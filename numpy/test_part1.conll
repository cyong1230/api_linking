OLS	O
solution	O
using	O
pinv	B-API
/	O
svd	B-API
#CODE	O

The	O
bad	O
days	O
are	O
eliminated	O
,	O
and	O
the	O
good	O
ones	B-API
are	O
kept	O
.	O

From	O
this	O
I've	O
gathered	O
that	O
`	O
len()	O
`	O
will	O
return	O
the	O
number	O
of	O
rows	O
,	O
so	O
I	O
can	O
always	O
us	O
the	O
transpose	B-API
,	O
`	O
len	O
(	O
A.T	O
)`	O
,	O
for	O
the	O
number	O
of	O
columns	O
.	O

shape	O
mismatch	O
:	O
value	O
array	O
of	O
shape	O
(	O
1000	O
,	O
)	O
could	O
not	O
be	O
broadcast	B-API
to	O
indexing	O
result	O
of	O
shape	O
(	O
1000,3,255,255	O
)	O

@USER	O
Well	O
in	O
this	O
case	O
,	O
`	O
searchsorted	B-API
`	O
is	O
basically	O
looking	O
for	O
places	O
or	O
indices	B-API
where	O
elements	O
from	O
`	O
message	O
`	O
exists	O
in	O
the	O
keys	O
of	O
`	O
codes	O
`	O
.	O

@USER	O
--	O
I	O
had	O
a	O
hard	O
time	O
remembering	O
how	O
`	O
translate	B-API
`	O
and	O
`	O
maketrans	O
`	O
work	O
for	O
quite	O
a	O
while	O
too	O
,	O
but	O
I've	O
gotten	O
used	O
to	O
it	O
.	O

Edit	O
:	O
if	O
you're	O
using	O
a	O
version	O
of	O
numpy	O
>	O
=	O
1.8.0	O
,	O
then	O
`	O
np.linalg.eigvals	B-API
`	O
operates	O
over	O
the	O
last	O
two	O
dimensions	O
of	O
whatever	O
array	O
you	O
hand	O
it	O
,	O
so	O
if	O
you	O
reshape	B-API
your	O
input	O
to	O
an	O
`	O
(	O
n_subarrays	O
,	O
nrows	O
,	O
ncols	O
)`	O
array	O
you'll	O
only	O
have	O
to	O
call	O
`	O
eigvals	B-API
`	O
once	O
:	O
#CODE	O

`	O
reshape	B-API
`	O
returns	O
a	O
view	O
of	O
the	O
original	O
array	O
,	O
not	O
a	O
copy	O
,	O
so	O
the	O
conversion	O
to	O
3D	O
only	O
requires	O
altering	O
the	O
`	O
shape	B-API
`	O
and	O
`	O
strides	O
`	O
attributes	O
of	O
the	O
array	O
,	O
without	O
having	O
to	O
copy	O
any	O
of	O
the	O
actual	O
data	O
.	O

sum	B-API
this	O
new	O
array	O
along	O
particular	O
axes	O
;	O
and	O
then	O
maybe	O

Calling	O
`	O
reshape	B-API
`	O
returns	O
a	O
view	O
,	O
so	O
it	O
doesn't	O
incur	O
any	O
big	O
copying	O
costs	O
or	O
anything	O
like	O
that	O
.	O

so	O
at	O
some	O
point	O
in	O
the	O
execution	O
it	O
will	O
max	B-API
my	O
memory	O
.	O

If	O
`	O
len	O
(	O
vals	O
)`	O
is	O
too	O
long	O
,	O
do	O
you	O
want	O
to	O
truncate	B-API
`	O
vals	O
`	O
?	O
and	O
if	O
`	O
len	O
(	O
vals	O
)`	O
is	O
too	O
short	O
,	O
do	O
you	O
want	O
to	O
fill	O
the	O
rest	O
of	O
the	O
array	O
with	O
`	O
0	O
`	O
s	O
?	O

Note	O
that	O
extension	O
to	O
even	O
higher	O
combinatorics	O
should	O
be	O
trivial	O
,	O
along	O
the	O
lines	O
presented	O
;	O
but	O
keep	O
an	O
eye	B-API
on	O
the	O
n	O
used	O
in	O
that	O
case	O
.	O

These	O
functions	O
return	O
a	O
list	O
,	O
which	O
I	O
convert	O
to	O
a	O
numpy	O
array	O
and	O
then	O
sum	B-API
over	O
.	O

Can	O
it	O
be	O
because	O
of	O
the	O
many	O
zeros	B-API
in	O
the	O
initial	O
table	O
?	O

I	O
also	O
understand	O
that	O
sum	B-API
(	O
A	O
,	O
axis=1	O
)	O
will	O
sum	B-API
each	O
row	O
.	O

But	O
what	O
I	O
really	O
want	O
to	O
do	O
,	O
is	O
to	O
bin	O
`	O
array	O
[:	O
,	O
1	O
]`	O
by	O
day	O
(	O
as	O
derived	O
by	O
the	O
unix	O
timestamps	O
in	O
array	O
[:	O
,	O
0	O
])	O
,	O
and	O
plot	O
these	O
as	O
a	O
stacked	O
histogram	B-API
,	O
with	O
each	O
(	O
colored	O
)	O
stack	B-API
representing	O
a	O
day	O
.	O

It's	O
interesting	O
to	O
see	O
that	O
when	O
I	O
go	O
back	O
to	O
`	O
nloop=1000	O
`	O
,	O
`	O
nreps=3	O
`	O
I	O
actually	O
see	O
a	O
slightly	O
*	O
greater	O
*	O
rate	B-API
of	O
cache	O
misses	O
for	O
the	O
row	O
sum	B-API
(	O
17%	O
vs	O
13%	O
)	O
,	O
even	O
though	O
it's	O
faster	O
than	O
the	O
column	O
sum	B-API
.	O

You	O
can	O
concatenate	B-API
arrays	O
in	O
`	O
numpy	O
`	O
.	O

If	O
you	O
are	O
100%	O
sure	O
that	O
l2	O
would	O
only	O
be	O
one	O
column	O
then	O
you	O
can	O
reshape	B-API
that	O
array	O
to	O
make	O
it	O
one	O
dimensional	O
before	O
doing	O
the	O
subtraction	O
.	O

You	O
won't	O
be	O
able	O
to	O
create	O
a	O
2D	O
array	O
that	O
way	O
,	O
and	O
@USER	O
method	O
of	O
returning	O
a	O
1D	O
array	O
that	O
you	O
reshape	B-API
afterwards	O
is	O
a	O
sure	O
go	O
.	O

I	O
have	O
a	O
square	O
matrix	O
A	O
(	O
could	O
be	O
any	O
size	O
)	O
and	O
I	O
want	O
to	O
take	O
the	O
upper	O
triangular	O
part	O
and	O
place	O
those	O
values	O
in	O
an	O
array	O
without	O
the	O
values	O
below	O
the	O
center	O
diagonal	B-API
(	O
k=0	O
)	O
.	O

You	O
can	O
mimic	O
this	O
behavior	O
with	O
a	O
simple	O
function	O
to	O
flatten	B-API
a	O
list	O
:	O
#CODE	O

So	O
`	O
popt	O
`	O
,	O
according	O
to	O
the	O
documentation	O
,	O
returns	O
*	O
"	O
Optimal	O
values	O
for	O
the	O
parameters	O
so	O
that	O
the	O
sum	B-API
of	O
the	O
squared	O
error	O
of	O
f	O
(	O
xdata	O
,	O
popt	O
)	O
-	O
ydata	O
is	O
minimized	O
"	O
.	O

And	O
I'd	O
like	O
indices	B-API
`	O
i	O
`	O
such	O
that	O
,	O
#CODE	O

But	O
,	O
`	O
resize	B-API
`	O
looks	O
like	O
it	O
just	O
might	O
be	O
the	O
thing	O
I'm	O
looking	O
for	O
...	O

`	O
rfft	B-API
`	O
,	O
apart	O
from	O
repeated	O
terms	O
excluded	O
,	O
and	O
an	O
almost	O
2x	O
speed-up	O
,	O
returns	O
the	O
exact	O
same	O
you	O
would	O
get	O
from	O
`	O
fft	B-API
`	O
.	O

Plus	O
,	O
if	O
I	O
have	O
4	O
dimensions	O
,	O
I	O
thought	O
I	O
should	O
have	O
4	O
eigenvalues	O
and	O
not	O
150	O
like	O
the	O
eig	B-API
gives	O
me	O
.	O

If	O
I	O
run	O
your	O
code	O
to	O
generate	O
`	O
d	O
`	O
and	O
`	O
dx	O
`	O
with	O
`	O
eig	B-API
`	O
I	O
get	O
the	O
following	O
:	O
#CODE	O

In	O
other	O
words-	O
it	O
is	O
not	O
just	O
taking	O
a	O
min	B-API
or	O
max	B-API
.	O

D	O
[	O
I+1	O
,	O
J+1	O
]	O
=	O
map	O
(	O
norm	B-API
,	O
x	O
[	O
I	O
]	O
-y	O
[	O
J	O
])	O
+	O
np.minimum	B-API
(	O
np.minimum	B-API
(	O
D	O
[	O
I	O
,	O
J	O
]	O
,	O
D	O
[	O
I	O
,	O
J+1	O
])	O
,	O
D	O
[	O
I+1	O
,	O
J	O
])	O
?	O

`	O
dot	B-API
`	O
just	O
has	O
tighter	O
code	O
for	O
a	O
specific	O
combination	O
of	O
dimensions	O
.	O

numpy	O
sum	B-API
does	O
not	O
agree	O

Since	O
you	O
are	O
only	O
adding	O
many	O
`	O
1	O
`	O
s	O
you	O
can	O
convert	O
`	O
diff	B-API
`	O
to	O
`	O
bool	O
`	O
:	O
#CODE	O

It	O
isn't	O
mathematically	O
possible	O
to	O
represent	O
0	O
on	O
a	O
log	B-API
scale	O
,	O
so	O
the	O
first	O
value	O
will	O
have	O
to	O
either	O
be	O
masked	O
or	O
clipped	O
to	O
a	O
very	O
small	O
positive	O
number	O
.	O

possible	O
duplicate	O
of	O
[	O
Efficiently	O
count	O
the	O
number	O
of	O
occurrences	O
of	O
unique	B-API
subarrays	O
in	O
NumPy	O
?	O
]	O
(	O
#URL	O
)	O

Or	O
you	O
could	O
mask	O
the	O
x	O
value	O
as	O
well	O
,	O
so	O
the	O
indices	B-API
were	O
consistent	O
between	O
x	O
and	O
y	O
#CODE	O

Here	O
the	O
`	O
outer	B-API
`	O
method	O
of	O
the	O
`	O
multiply	B-API
`	O
ufunc	O
is	O
used	O
to	O
create	O
the	O
new	O
20x20	O
array	O
.	O

I	O
have	O
a	O
3D	O
numpy	O
array	O
consisting	O
of	O
1's	O
and	O
zeros	B-API
defining	O
open	O
versus	O
filled	O
space	O
in	O
a	O
porous	O
solid	O
(	O
it's	O
currently	O
a	O
numpy	O
Int64	O
array	O
)	O
.	O

You	O
are	O
attempting	O
to	O
broadcast	B-API
a	O
4-D	O
array	O
together	O
with	O
a	O
3-D	O
array	O
.	O

Scipy	O
NDimage	O
correlate	B-API
:	O
unbearably	O
slow	O

I	O
know	O
that	O
I	O
can	O
reshape	B-API
the	O
array	O
to	O
a	O
100	O
x	O
2	O
array	O
of	O
grid	O
points	O
:	O
#CODE	O

You	O
probably	O
could	O
get	O
`	O
append	B-API
`	O
to	O
work	O
,	O
but	O
it	O
just	O
does	O
a	O
step	O
by	O
step	O
concatenate	B-API
,	O
which	O
is	O
slower	O
.	O

This	O
produces	O
a	O
random	O
permutation	B-API
of	O
each	O
column's	O
indices	B-API
.	O

As	O
it	O
happens	O
,	O
the	O
histogram	B-API
is	O
enough	O
for	O
the	O
former	O
.	O

I	O
see	O
how	O
the	O
symmetry	O
of	O
the	O
trace	O
lets	O
you	O
replace	O
the	O
final	O
`	O
dot	B-API
`	O
.	O

In	O
that	O
question	O
,	O
I	O
sought	O
to	O
sum	B-API
values	O
in	O
a	O
numpy	O
structured	O
array	O
based	O
on	O
multiple	O
criteria	O
,	O
including	O
matches	O
in	O
a	O
list	O
.	O

Assuming	O
I	O
understand	O
you	O
,	O
and	O
you're	O
looking	O
for	O
the	O
indices	B-API
where	O
either	O
the	O
element	O
is	O
True	O
or	O
the	O
next	O
element	O
is	O
True	O
,	O
you	O
can	O
take	O
advantage	O
of	O
`	O
shift	O
`	O
and	O
use	O
#CODE	O

to	O
delete	O
the	O
lines	O
that	O
had	O
zeros	B-API
in	O
them	O
!	O

Fill	O
scipy	O
/	O
numpy	O
matrix	O
based	O
on	O
indices	B-API
and	O
values	O

It	O
looks	O
like	O
a	O
vector	O
product	O
followed	O
by	O
a	O
sum	B-API
along	O
the	O
resulting	O
array	O
.	O

The	O
trick	O
is	O
that	O
this	O
convolve	B-API
function	O
can	O
be	O
used	O
in-place	O
so	O
the	O
double	O
for	O
loop	O
:	O
#CODE	O

But	O
this	O
reshape	B-API
should	O
produce	O
a	O
`	O
(	O
n	O
,	O
1	O
,	O
1	O
)`	O
array	O
,	O
not	O
your	O
`	O
(	O
1	O
,	O
1	O
,	O
1	O
,...	O
)`	O
array	O
.	O

For	O
an	O
extreme	O
example	O
,	O
consider	O
a	O
sequence	O
that	O
consists	O
of	O
9	O
zeros	B-API
followed	O
by	O
the	O
result	O
of	O
a	O
coin	O
toss	O
,	O
9	O
zeros	B-API
and	O
another	O
coin	O
toss	O
,	O
etc	O
.	O

If	O
so	O
then	O
`	O
np.array	B-API
(	O
a	O
)`	O
is	O
a	O
2d	O
array	O
,	O
and	O
you	O
can	O
sum	B-API
over	O
`	O
axis=1	O
`	O
.	O

I	O
am	O
trying	O
to	O
create	O
a	O
lat	O
/	O
lon	O
grid	O
that	O
contains	O
an	O
array	O
of	O
found	O
indices	B-API
where	O
two	O
conditions	O
are	O
met	O
for	O
a	O
lat	O
/	O
lon	O
combination	O
.	O

This	O
NAMBE	O
is	O
the	O
absolute	B-API
difference	O
between	O
a	O
base	O
vector	O
and	O
another	O
vector	O
,	O
divided	O
by	O
the	O
base	O
vector	O
and	O
multiplied	O
by	O
a	O
hundred	O
,	O
in	O
pseudo-code	O
notation	O
:	O
#CODE	O

this	O
my	O
code	O
to	O
and	O
i	O
want	O
to	O
use	O
histogram	B-API
data	O
to	O
plot	O
scatter	O
where	O
y	O
axis	O
is	O
counts	O
center	O
from	O
the	O
histogram	B-API
,	O
is	O
there	O
any	O
direct	O
command	O
or	O
way	O
to	O
do	O
this	O
?	O

Please	O
compile	O
with	O
`	O
cython	O
-a	O
`	O
,	O
then	O
show	O
us	O
the	O
C	O
code	O
that	O
the	O
`	O
a	O
[	O
0	O
]	O
+=	O
sum	B-API
`	O
line	O
turns	O
into	O
.	O

The	O
revised	O
question	O
is	O
still	O
a	O
duplicate	O
,	O
see	O
[	O
this	O
question	O
]	O
(	O
#URL	O
)	O
,	O
and	O
[	O
this	O
question	O
]	O
(	O
#URL	O
)	O
for	O
finding	O
the	O
indices	B-API
.	O

ValueError	O
:	O
operands	O
could	O
not	O
be	O
broadcast	B-API
together	O
with	O
different	O
shapes	O
in	O
numpy	O
?	O

There	O
are	O
thousands	O
of	O
numbers	O
below	O
the	O
ones	B-API
shown	O
here	O
.	O

Assuming	O
you	O
want	O
to	O
align	O
all	O
the	O
arrays	O
to	O
the	O
left	O
,	O
and	O
pad	O
to	O
the	O
right	O
with	O
zeros	B-API
,	O
then	O
you	O
could	O
first	O
find	O
the	O
maximum	O
length	O
with	O
#CODE	O

How	O
to	O
do	O
the	O
same	O
If	O
I	O
want	O
to	O
apply	O
norm	B-API
column-wise	O
to	O
a	O
matrix	O
?	O

The	O
easiest	O
approach	O
is	O
to	O
reshape	B-API
to	O
data	O
to	O
a	O
long	O
format	O
using	O
`	O
.stack	O
`	O
,	O
which	O
can	O
be	O
be	O
passed	O
straight	O
into	O
rolling	O
mean	O
.	O

It's	O
pretty	O
low-level	O
,	O
and	O
mostly	O
focused	O
on	O
how	O
to	O
address	O
the	O
more	O
difficult	O
problem	O
of	O
how	O
to	O
pass	O
C++	O
data	O
to	O
and	O
from	O
NumPy	O
without	O
copying	O
,	O
but	O
here's	O
how	O
you'd	O
do	O
a	O
copied	O
std	B-API
::	O
vector	O
return	O
with	O
that	O
:	O
#CODE	O

`	O
std	B-API
=	O
RMS	O
(	O
data	O
-	O
mean	O
)`	O
.	O

This	O
generalized	O
diagonal	B-API
would	O
be	O
defined	O
as	O
those	O
elements	O
of	O
the	O
array	O
whose	O
0th	O
and	O
2nd	O
index	O
coincide	O
,	O
and	O
would	O
have	O
shape	O
(	O
3	O
,	O
3	O
,	O
7	O
)	O
.	O

I	O
have	O
a	O
given	O
array	O
`	O
[	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
1	O
,	O
1	O
,	O
2	O
,	O
1	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
1	O
,	O
0	O
,	O
1	O
,	O
2	O
,	O
1	O
,	O
0	O
,	O
2	O
,	O
3	O
`]	O
(	O
arbitrary	O
elements	O
from	O
0-5	O
)	O
and	O
I	O
want	O
to	O
have	O
a	O
counter	O
for	O
the	O
occurence	O
of	O
zeros	B-API
in	O
a	O
row	O
.	O

To	O
see	O
the	O
benefits	O
of	O
this	O
,	O
you	O
need	O
to	O
use	O
`	O
z	O
,	O
p	O
,	O
k	O
=	O
butter	O
(	O
output=	O
'	O
zpk	O
')`	O
and	O
then	O
work	O
with	O
poles	O
and	O
zeros	B-API
instead	O
of	O
numerator	O
and	O
denominator	O
.	O

In	O
that	O
case	O
you	O
would	O
"	O
extrapolate	O
"	O
zeros	B-API
to	O
the	O
left	O
and	O
the	O
right	O
.	O

can	O
numpy	O
interpret	O
column	O
of	O
indices	B-API
like	O
matlab	O
does	O

To	O
get	O
the	O
diagonal	B-API
elements	O
you	O
can	O
get	O
their	O
indices	B-API
with	O
`	O
np.triu_indices	B-API
`	O
(	O
or	O
,	O
for	O
the	O
lower	O
triangle	O
,	O
`	O
np.tril_indices	B-API
`)	O
and	O
then	O
index	O
by	O
them	O
.	O

The	O
question	O
states	O
that	O
the	O
input	O
array	O
is	O
of	O
shape	O
`	O
(	O
128	O
,	O
36	O
,	O
8)	O
`	O
and	O
we	O
are	O
interested	O
in	O
finding	O
unique	B-API
subarrays	O
of	O
length	O
`	O
8	O
`	O
in	O
the	O
last	O
dimension	O
.	O

What	O
does	O
work	O
,	O
however	O
is	O
nesting	O
append	B-API
and	O
concatenate	B-API
#CODE	O

(	O
`	O
b	O
`	O
will	O
be	O
broadcast	B-API
along	O
(	O
?	O
)	O
the	O
first	O
axis	O
)	O
#CODE	O

As	O
he	O
points	O
out	O
,	O
the	O
`	O
[	O
0	O
]	O
[	O
1	O
]`	O
element	O
is	O
what	O
you'd	O
want	O
for	O
`	O
cov	B-API
(	O
a	O
,	O
b	O
)`	O
.	O

returns	O
`	O
1	O
`	O
,	O
making	O
the	O
sum	B-API
not	O
commutative	O
!	O

But	O
as	O
I	O
have	O
a	O
log	B-API
of	O
values	O
(	O
10000+	O
)	O
,	O
this	O
will	O
be	O
quite	O
slow	O
.	O

@USER	O
-	O
good	O
point	O
.	O
anyway	O
,	O
`	O
diff	B-API
`	O
works	O
on	O
python	O
lists	O
too	O
.	O

It	O
will	O
also	O
work	O
if	O
they	O
are	O
both	O
arrays	O
that	O
can	O
be	O
broadcast	B-API
.	O

It's	O
column	O
stack	B-API
that	O
requires	O
equal	O
length	O
strings	O
.	O

In	O
the	O
end	O
it	O
is	O
usually	O
not	O
too	O
complicated	O
,	O
especially	O
if	O
you	O
use	O
[	O
`	O
mgrid	B-API
`]	O
(	O
#URL	O
)	O
or	O
similar	O
to	O
get	O
the	O
indices	B-API
.	O

The	O
absolute	B-API
error	O
will	O
be	O
at	O
most	O
1	O
/	O
2	O
ULP	O
,	O
2	O
-150	O
.	O

AttributeError	O
:	O
'	O
Add	O
'	O
object	O
has	O
no	O
attribute	O
'	O
log	B-API
'	O
Python	O

Or	O
,	O
you	O
could	O
initialize	O
an	O
array	O
of	O
all	O
zeros	B-API
if	O
you	O
know	O
the	O
size	O
of	O
the	O
array	O
ahead	O
of	O
time	O
.	O

Are	O
you	O
checking	O
shape	O
or	O
number	O
of	O
nonzero	B-API
values	O
?	O

Something	O
like	O
`	O
eigvals	B-API
,	O
eigvecs	O
=	O
la.eigh	O
(	O
mat	B-API
)`	O
`	O
principal	O
=	O
eigvecs	O
[:	O
,	O
eigvals.argmax()	O
]`	O
`	O
if	O
(	O
principal	O
>	O
=	O
0	O
)	O
.all()	O
or	O
(	O
pricipal	O
<=	O
0	O
)	O
.all()	O
:	O
print	O
'	O
all	O
the	O
same	O
'`	O
?	O

I	O
also	O
want	O
bins	O
to	O
have	O
a	O
width	O
of	O
.5	O
so	O
that	O
I	O
can	O
have	O
a	O
bin	O
from	O
10.5	O
to	O
11	O
or	O
24	O
to	O
24.5	O
etc	O
...	O
because	O
otherwise	O
,	O
python	O
outputs	O
the	O
histogram	B-API
with	O
the	O
bins	O
random	O
and	O
undetermined	O
.	O

Maximum	O
is	O
always	O
bigger	O
than	O
the	O
minimum	O
(	O
more	O
to	O
the	O
right	O
on	O
a	O
1d	O
axis	O
,	O
not	O
by	O
absolute	B-API
value	O
)	O
.	O

should	O
give	O
the	O
sum	B-API
of	O
the	O
columns	O
.	O

Suppose	O
,	O
You	O
wanna	O
check	O
how	O
many	O
times	O
you	O
will	O
get	O
six	O
if	O
you	O
roll	B-API
dice	O
10	O
times	O
.	O

With	O
this	O
option	O
,	O
the	O
result	O
will	O
broadcast	B-API
correctly	O

Do	O
you	O
mean	O
`	O
indices	B-API
=	O
np.where	B-API
(	O
a	O
==	O
a.max()	O
)`	O
in	O
line	O
3	O
?	O

The	O
problem	O
I	O
have	O
much	O
later	O
on	O
in	O
the	O
code	O
is	O
that	O
if	O
one	O
of	O
these	O
parameters	O
isn't	O
in	O
the	O
ASCII	O
file	O
it	O
throws	O
errors	O
up	O
so	O
I	O
have	O
to	O
keep	O
adding	O
in	O
ones	B-API
I	O
don't	O
need	O
.	O

`	O
append	B-API
`	O
adds	O
them	O
to	O
the	O
end	O
of	O
the	O
list	O
,	O
which	O
is	O
exactly	O
what	O
you	O
want	O
.	O

I	O
have	O
two	O
3dim	O
numpy	O
matrices	O
and	O
I	O
want	O
to	O
do	O
a	O
dot	B-API
product	O
according	O
to	O
one	O
axis	O
without	O
using	O
a	O
loop	O
in	O
theano	O
.	O

you	O
have	O
at	O
most	O
4	O
in	O
that	O
dimension	O
(	O
see	O
your	O
reshape	B-API
line	O
)	O
,	O
so	O
the	O
index	O
it	O
will	O
count	O
are	O
0	O
and	O
2	O
(	O
1	O
and	O
3	O
are	O
skipped	O
,	O
and	O
3	O
is	O
the	O
last	O
element	O
)	O
.	O

Once	O
we	O
have	O
the	O
indices	B-API
to	O
sort	O
`	O
data	O
`	O
,	O
to	O
get	O
a	O
sorted	O
copy	O
of	O
the	O
array	O
it	O
is	O
faster	O
to	O
use	O
the	O
indices	B-API
than	O
to	O
re-sort	O
the	O
array	O
:	O
#CODE	O

I	O
hope	O
this	O
will	O
help	O
you	O
perform	O
your	O
transpose	B-API
and	O
column-wise	O
operations	O

It	O
is	O
better	O
to	O
specify	O
that	O
I'm	O
looking	O
for	O
something	O
that	O
performs	O
the	O
log-sum-exp	O
trick	O
,	O
doing	O
a	O
simply	O
succession	O
of	O
exp	B-API
elem-wise	O
,	O
summing	O
the	O
rows	O
and	O
doing	O
a	O
log	B-API
elem-wise	O
is	O
trivial	O
in	O
`	O
scipy.sparse	O
`	O
.	O

Scipy	O
uses	O
`	O
int32	O
`	O
to	O
store	O
`	O
indptr	O
`	O
and	O
`	O
indices	B-API
`	O
for	O
the	O
sparse	O
formats	O
.	O

But	O
not	O
able	O
to	O
plot	O
it	O
as	O
a	O
graph	O
(	O
something	O
like	O
a	O
histogram	B-API
)	O
...	O
that	O
is	O
the	O
problem	O
.	O

It	O
gave	O
error	O
testing	O
doesnot	O
have	O
attribute	O
append	B-API
as	O
its	O
of	O
None	O
Type	O
.	O

In	O
both	O
cases	O
,	O
you	O
can	O
access	O
individual	O
elements	O
by	O
indices	B-API
,	O
like	O
`	O
R	O
[	O
0	O
]`	O
(	O
which	O
would	O
give	O
you	O
a	O
specific	O
object	O
,	O
a	O
`	O
np.void	O
`	O
,	O
that	O
still	O
gives	O
you	O
the	O
possibility	O
to	O
access	O
the	O
fields	O
separately	O
)	O
,	O
or	O
by	O
slices	O
`	O
R	O
[	O
1	O
:	O
-1	O
]`	O
...	O

I	O
think	O
you	O
can	O
have	O
a	O
sum	B-API
over	O
a	O
sliding	O
window	O
(	O
or	O
a	O
rolling	O
window	O
)	O
or	O
a	O
mean	O
over	O
a	O
sliding	O
window	O
.	O

I	O
got	O
your	O
point	O
and	O
I	O
find	O
it	O
more	O
logical	O
,	O
but	O
when	O
trying	O
the	O
code	O
you've	O
suggested	O
to	O
get	O
rid	O
of	O
the	O
second	O
error	O
I	O
got	O
another	O
error	O
:	O
`	O
AttributeError	O
:	O
flatten	B-API
`	O

`	O
dot	B-API
`	O
does	O
many	O
things	O
under	O
the	O
hood	O
,	O
it	O
is	O
apparent	O
that	O
`	O
np.dot	B-API
(	O
A	O
,	O
x	O
)`	O
is	O
not	O
calling	O
BLAS	O
and	O
is	O
somehow	O
defaulting	O
over	O
to	O
numpy's	O
internal	O
GEMM	O
routine	O
.	O

Below	O
is	O
some	O
code	O
which	O
uses	O
a	O
callback	O
to	O
print	O
out	O
the	O
current	O
azimuthal	O
and	O
elevation	O
angles	O
,	O
as	O
well	O
as	O
append	B-API
them	O
to	O
a	O
list	O
for	O
further	O
use	O
later	O
.	O

It's	O
super	O
alex	O
,	O
here	O
to	O
answer	O
NumPy	O
questions	O
in	O
the	O
blink	O
of	O
an	O
eye	B-API
:)	O

Your	O
solution	O
of	O
searching	O
the	O
eigenvalues	O
for	O
the	O
ones	B-API
you	O
want	O
seems	O
plausible	O
enough	O
.	O

If	O
d	O
is	O
larger	O
than	O
8	O
or	O
9	O
,	O
then	O
bases	O
will	O
be	O
sufficiently	O
long	O
that	O
you	O
probably	O
would	O
be	O
better	O
off	O
going	O
with	O
the	O
other	O
version	O
using	O
the	O
dot	B-API
product	O
.	O

Interesting	O
,	O
in	O
R	O
`	O
Reduce	O
(	O
'	O
+	O
'	O
,	O
s	O
)`	O
yields	O
the	O
same	O
sum	B-API
as	O
in	O
python	O
.	O

I'm	O
not	O
sure	O
which	O
indices	B-API
i	O
need	O
to	O
change	O
to	O
achieve	O
the	O
minimum	O
and	O
not	O
the	O
maximum	O
values	O
.	O

The	O
dimension	O
of	O
`	O
result	O
`	O
has	O
been	O
set	O
earlier	O
to	O
the	O
correct	O
dimension	O
,	O
so	O
can	O
check	O
it	O
,	O
but	O
it	O
would	O
be	O
nice	O
to	O
only	O
use	O
the	O
length	O
of	O
`	O
indices	B-API
`	O
to	O
determine	O
it	O
.	O

Alternatively	O
,	O
what	O
about	O
applying	O
the	O
same	O
function	O
without	O
indices	B-API
along	O
the	O
depth	O
axes	O
?	O

Here's	O
an	O
O	O
(	O
n	O
log	B-API
n	O
)	O
algorithm	O
for	O
your	O
problem	O
.	O

You	O
need	O
to	O
add	O
axes	O
to	O
`	O
coeffs	O
`	O
so	O
it	O
will	O
broadcast	B-API
in	O
the	O
dimension	O
(	O
s	O
)	O
you	O
want	O
.	O

If	O
you	O
want	O
to	O
search	O
for	O
a	O
certain	O
rank	O
on	O
B	O
randomly	O
,	O
you	O
need	O
to	O
start	O
off	O
with	O
a	O
valid	O
B	O
with	O
max	B-API
rank	O
,	O
and	O
rotate	O
a	O
random	O
column	O
j	O
of	O
a	O
random	O
B	O
i	O
by	O
a	O
random	O
amount	O
.	O

I	O
want	O
to	O
save	O
some	O
histogram	B-API
data	O
in	O
a	O
csv	O
file	O
.	O

I	O
want	O
to	O
read	O
a	O
mat	B-API
file	O
back	O
in	O
python	O
but	O
I	O
have	O
trouble	O
going	O
back	O
to	O
a	O
graph	O
,	O
because	O
the	O
mat	B-API
file	O
gives	O
a	O
numpy.ndarray	B-API
type	O
file	O
and	O
I	O
need	O
a	O
sparse	O
matrix	O
to	O
reconstruct	O
my	O
graph	O
.	O

numpy	O
makes	O
it	O
easy	O
to	O
translate	B-API
python	O
objects	O
into	O
numpy	O
ndarrays	O
,	O
and	O
will	O
even	O
pick	O
an	O
appropriate	O
resulting	O
data	O
type	O
if	O
one	O
is	O
not	O
specified	O
:	O
#CODE	O

This	O
`	O
T	O
`	O
and	O
`	O
X	O
`	O
broadcast	B-API
together	O
just	O
fine	O
,	O
for	O
example	O
`	O
T*X	O
`	O
works	O
.	O

I	O
assume	O
the	O
number	O
produced	O
in	O
exp	B-API
is	O
too	O
big	O
to	O
fit	O
in	O
a	O
`	O
float64	O
`	O
.	O

I	O
have	O
a	O
numpy	O
matrix	O
A	O
and	O
I	O
need	O
a	O
function	O
that	O
will	O
count	O
(	O
A	O
[	O
i	O
,	O
j	O
]	O
/	O
sum	B-API
of	O
all	O
elements	O
in	O
i-th	O
column	O
)	O
-	O
A	O
[	O
i	O
,	O
j	O
]	O
/	O
sum	B-API
of	O
all	O
elements	O
in	O
j-th	O
row	O

This	O
also	O
works	O
if	O
,	O
instead	O
of	O
a	O
single	O
index	O
,	O
you	O
provide	O
an	O
array	O
of	O
indices	B-API
:	O
#CODE	O

How	O
to	O
solve	O
nonlinear	O
equation	O
without	O
sympy	O
(	O
max	B-API
and	O
min	B-API
)	O
?	O

Bivariate	O
Legendre	B-API
Polynomial	B-API
Fitting	O
to	O
find	O
orthogonal	O
coefficents	O

For	O
numpy	O
this	O
list	O
includes	O
'	O
linalg	O
'	O
,	O
'	O
fft	B-API
'	O
,	O
'	O
random	O
'	O
,	O
'	O
ctypeslib	O
'	O
,	O
'	O
ma	O
'	O
,	O
and	O
'	O
doc	O
'	O
last	O
I	O
checked	O
.	O

I	O
have	O
a	O
big	O
n-square	O
diagonal	B-API
matrix	O
,	O
in	O
the	O
scipy's	O
sparse	O
DIA	O
format	O

To	O
find	O
the	O
most	O
frequent	O
value	O
of	O
a	O
flat	O
array	O
,	O
use	O
`	O
unique	B-API
`	O
,	O
`	O
bincount	B-API
`	O
and	O
`	O
argmax	B-API
`	O
:	O
#CODE	O

The	O
funny	O
thing	O
is	O
in	O
the	O
above	O
function	O
If	O
i	O
pass	O
an	O
extra	O
argument	O
and	O
just	O
divide	O
sum	B-API
by	O
it	O
,	O
then	O
the	O
times	O
are	O
the	O
same	O
again	O
.	O

are	O
the	O
same	O
as	O
the	O
ones	B-API
posted	O
in	O
the	O
examples	O
of	O
this	O
web	O
page	O
.	O

How	O
to	O
remove	O
rings	O
from	O
convolve	B-API
healpix	O
map	O
?	O

With	O
the	O
information	O
of	O
the	O
full	O
stack	B-API
trace	O
report	O
the	O
bug	O
to	O
the	O
ubuntu	O
team	O
.	O

fastest	O
way	O
to	O
get	O
lookup	O
table	O
indices	B-API
with	O
numpy	O

Well	O
,	O
a	O
few	O
more	O
,	O
anyway	O
:	O
`	O
cos	B-API
`	O
,	O
`	O
pi	O
`	O
,	O
`	O
diag	B-API
`	O

I	O
implemented	O
a	O
LOWESS	O
smoother	O
(	O
which	O
is	O
the	O
curve	O
you	O
see	O
)	O
with	O
a	O
tight	O
fit	O
to	O
eliminate	O
noise	O
,	O
since	O
the	O
real	O
waveforms	O
have	O
a	O
non-trivial	O
noise	O
component	O
,	O
and	O
then	O
tried	O
doing	O
a	O
rolling	O
max	B-API
with	O
a	O
window	O
over	O
the	O
data	O
,	O
but	O
I	O
can't	O
get	O
anything	O
solid	O
.	O

But	O
sum	B-API
function	O
from	O
numpy	O
doesn't	O
suport	O
"	O
1:3	O
"	O

(	O
the	O
`	O
np.nonzero	B-API
`	O
should	O
return	O
a	O
tuple	O
with	O
one	O
element	O
,	O
an	O
array	O
of	O
indices	B-API
)	O
.	O

Can	O
the	O
"	O
small	O
values	O
of	O
derivative	O
"	O
be	O
small	O
with	O
respect	O
to	O
the	O
sin	B-API
curve	O
?	O

6	O
columns	O
,	O
92370574	O
rows	O
,	O
2496502	O
locations	O
,	O
37	O
months	O
each	O
,	O
unique	B-API
amounts	O
for	O
each	O
value	O
.	O

Note	O
that	O
where	O
possible	O
,	O
`	O
reshape	B-API
`	O
will	O
give	O
you	O
a	O
view	O
of	O
the	O
array	O
.	O

Here	O
you	O
append	B-API
only	O
a	O
REFERENCE	O
to	O
your	O
only	O
one	O
existing	O
`	O
energy	O
`	O
array	O
.	O

And	O
you	O
can	O
combine	O
the	O
summation	O
and	O
multiplication	O
into	O
a	O
dot	B-API
product	O
:	O
#CODE	O

For	O
example	O
,	O
`	O
a	O
`	O
is	O
generated	O
from	O
`	O
a	O
=	O
z	O
[	O
z	O
!	O
=0	O
]`	O
;	O
`	O
a	O
`	O
then	O
changes	O
through	O
some	O
processing	O
,	O
and	O
now	O
I	O
need	O
to	O
insert	O
`	O
nan	O
`	O
s	O
where	O
there	O
were	O
originally	O
zeros	B-API
.	O

I	O
frequently	O
use	O
the	O
numpy.where	B-API
function	O
to	O
gather	O
a	O
tuple	O
of	O
indices	B-API
of	O
a	O
matrix	O
having	O
some	O
property	O
.	O

I	O
suspect	O
the	O
original	O
formula	O
was	O
right	O
but	O
you	O
didn't	O
encode	B-API
it	O
right	O
in	O
Python	O
.	O

This	O
gets	O
me	O
the	O
sum	B-API
of	O
all	O
red	O
combined	O
in	O
original	O
-	O
all	O
red	O
combined	O
in	O
mutated	O
.	O

`	O
p2	O
=	O
einsum	B-API
(	O
'	O
nk	O
,	O
nk	O
->	O
n	O
'	O
,	O
p1	O
,	O
delta	O
)`	O
is	O
the	O
pairwise	O
dot	B-API
product	O
of	O
the	O
rows	O
of	O
`	O
p1	O
`	O
and	O
`	O
delta	O
`	O
.	O

I	O
did	O
the	O
reshape	B-API
,	O
just	O
so	O
that	O
both	O
arrays	O
are	O
same	O
shape	O
,	O
but	O
I	O
do	O
not	O
think	O
you	O
really	O
need	O
the	O
reshaping	O
,	O
with	O
the	O
list	O
comprehension	O
the	O
shape	O
of	O
array	O
you	O
get	O
is	O
`	O
(	O
length	O
of	O
string	O
,	O
)`	O

I	O
made	O
a	O
typo	O
in	O
the	O
norm	B-API
,	O
fixed	O
now	O
.	O

Also	O
,	O
I	O
expect	O
the	O
positions	O
of	O
the	O
zeros	B-API
to	O
be	O
relatively	O
sparse	O
(	O
~1%	O
of	O
all	O
bit	O
positions	O
)	O
.	O

Slicing	O
arrays	O
with	O
meshgrid	B-API
/	O
array	O
indices	B-API
in	O
Numpy	O

(	O
An	O
nonzero	B-API
exit	O
status	O
usually	O
indicates	O
an	O
error	O
on	O
Unix	O
style	O
systems	O
.	O
A	O
couple	O
programs	O
are	O
different	O
,	O
e.g.	O
,	O
`	O
diff	B-API
`	O
.	O
)	O
Try	O
examining	O
the	O
`	O
stderr	O
`	O
produced	O
by	O
the	O
subprocess	O
to	O
see	O
what	O
error	O
messages	O
are	O
printed	O
there	O
.	O

To	O
achieve	O
exactly	O
what	O
you	O
are	O
asking	O
for	O
I	O
would	O
apply	O
a	O
`	O
[	O
3x3	O
]`	O
box-filter	O
on	O
the	O
image	O
and	O
than	O
I	O
would	O
resize	B-API
the	O
matrix	O
using	O
nearest	O
neighbor	O
interpolation	O
.	O

Is	O
there	O
a	O
quick	O
way	O
to	O
reshape	B-API
my	O
`	O
csr_matrix	O
`	O
without	O
copying	O
everything	O
in	O
it	O
?	O

The	O
catch	O
is	O
that	O
I	O
need	O
to	O
keep	O
the	O
colors	O
exactly	O
the	O
way	O
they	O
are	O
(	O
background	O
:	O
I'm	O
resizing	O
a	O
map	O
where	O
provinces	O
are	O
color-coded	O
)	O
,	O
and	O
so	O
I	O
cannot	O
just	O
perform	O
a	O
resize	B-API
with	O
bicubic	O
interpolation	O
,	O
because	O
that	O
will	O
also	O
interpolate	O
the	O
pixel	O
colors	O
while	O
smoothing	O
.	O

You	O
should	O
"	O
flatten	B-API
"	O
the	O
array	O
of	O
arrays	O
first	O
.	O
unfortunately	O
,	O
there's	O
no	O
builtin	O
method	O
,	O
see	O
#URL	O

then	O
concatenate	B-API
the	O
saved	O
objects	O
whit	O
this	O
code	O
:	O
#CODE	O

For	O
something	O
like	O
a	O
dot	B-API
product	O
,	O
pandas	O
`	O
DataFrames	O
`	O
are	O
generally	O
going	O
to	O
be	O
slower	O
than	O
a	O
numpy	O
array	O
since	O
pandas	O
is	O
doing	O
**	O
a	O
lot	O
more	O
stuff	O
**	O
aligning	O
labels	O
,	O
potentially	O
dealing	O
with	O
heterogenous	O
types	O
,	O
and	O
so	O
on	O
.	O

I	O
want	O
to	O
pass	O
an	O
array	O
of	O
indices	B-API
and	O
column	O
names	O
and	O
get	O
a	O
list	O
of	O
objects	O
that	O
are	O
found	O
in	O
the	O
corresponding	O
index	O
and	O
column	O
name	O
.	O

From	O
this	O
you	O
would	O
expect	O
the	O
total	O
sum	B-API
to	O
be	O
`	O
100,679,697	O
=	O
200*	O
(	O
1,000,000	O
-	O
499,097	O
)	O
+	O
499,097	O
`	O

The	O
histogram	B-API
way	O
is	O
not	O
the	O
fastest	O
,	O
and	O
can't	O
tell	O
the	O
difference	O
between	O
an	O
arbitrarily	O
small	O
separation	O
of	O
points	O
and	O
`	O
2	O
*	O
sqrt	B-API
(	O
2	O
)	O
*	O
b	O
`	O
(	O
where	O
`	O
b	O
`	O
is	O
bin	O
width	O
)	O
.	O

}	O
for	O
n=1	O
,	O
2	O
,	O
3	O
,	O
4	O
,	O
5	O
,	O
6	O
(	O
using	O
Sum	B-API
(	O
c_n	O
exp	B-API
(	O
i	O
2	O
pi	O
n	O
x	O
)	O
)	O
as	O
Fourier	O
series	O
)	O
.	O

I	O
think	O
I	O
can	O
t	O
just	O
simple	O
sum	B-API
the	O
"	O
seq	O
*	O
"	O
array	O
,	O
because	O
instead	O
of	O
a	O
chord	O
I	O
will	O
get	O
noise	O
.	O

I	O
presume	O
you	O
want	O
to	O
transpose	B-API
first	O
:	O
#CODE	O

Oh	O
,	O
that's	O
interesting	O
you	O
can	O
do	O
it	O
with	O
stack	B-API
.	O

In	O
this	O
case	O
,	O
using	O
numpy	O
outer	B-API
operations	O
allow	O
you	O
to	O
compute	O
the	O
multiplications	O
and	O
sums	O
at	O
the	O
`	O
C	O
`	O
loop	O
speed	O
.	O

The	O
most	O
efficient	O
way	O
is	O
likely	O
to	O
use	O
'	O
np.empty()	B-API
'	O
to	O
allocate	O
the	O
space	O
/	O
memory	O
for	O
your	O
end	O
dataset	O
and	O
then	O
load	O
data	O
&	O
broadcast	B-API
within	O
that	O
using	O
slice	O
indexing	O
.	O

Ok	O
,	O
with	O
your	O
histogram	B-API
I	O
get	O
at	O
least	O
the	O
total	O
number	O
of	O
each	O
pair	O
.	O

This	O
is	O
because	O
python's	O
sum	B-API
is	O
basically	O
summing	O
a	O
for	O
loop	O
over	O
the	O
object	O
.	O

Then	O
the	O
entire	O
shape	O
changes	O
from	O
(	O
x	O
,	O
y	O
)	O
to	O
merely	O
(	O
x	O
,	O
)	O
and	O
I	O
get	O
'	O
too	O
many	O
indices	B-API
'	O
errors	O
when	O
I	O
try	O
to	O
use	O
masks	O
.	O

If	O
reps	O
has	O
length	O
d	O
,	O
the	O
result	O
will	O
have	O
dimension	O
of	O
max	B-API
(	O
d	O
,	O
A.ndim	O
)	O
.	O

I	O
want	O
to	O
do	O
this	O
by	O
dividing	O
each	O
histogram	B-API
by	O
its	O
maximum	O
value	O
so	O
all	O
the	O
distributions	O
have	O
the	O
same	O
scale	O
.	O

An	O
obvious	O
path	O
would	O
be	O
to	O
transpose	B-API
the	O
array	O
so	O
that	O
the	O
indices	B-API
that	O
I	O
am	O
selecting	O
would	O
come	O
up	O
first	O
.	O

Now	O
,	O
for	O
mean	O
calculations	O
,	O
those	O
numeric	O
IDs	B-API
could	O
be	O
used	O
as	O
`"	O
weights	O
"`	O
for	O
binning	O
with	O
`	O
np.bincount	B-API
`	O
,	O
giving	O
us	O
the	O
sum	B-API
of	O
data	O
elements	O
corresponding	O
to	O
each	O
`	O
ID	O
`	O
.	O

However	O
,	O
what	O
I	O
need	O
is	O
a	O
string	O
containing	O
all	O
the	O
elements	O
in	O
the	O
list	O
linked	O
by	O
'	O
;	O
'	O
,	O
not	O
the	O
list	O
itself	O
,	O
so	O
it	O
seems	O
like	O
I	O
have	O
to	O
sum	B-API
all	O
the	O
elements	O
in	O
asString	O
with	O
another	O
iteration	O
?	O

the	O
output	O
I	O
need	O
:	O
`	O
S	O
=	O
[	O
2	O
,	O
5	O
,	O
8	O
,	O
11	O
,	O
14	O
]`	O
I	O
thought	O
something	O
like	O
:	O
`	O
S1	O
=	O
np.array	B-API
(	O
L	O
[:	O
]	O
[	O
1	O
,	O
0	O
])`	O
should	O
work	O
but	O
whatever	O
I	O
try	O
I	O
have	O
the	O
error	O
like	O
:	O
`	O
TypeError	O
:	O
list	O
indices	B-API
must	O
be	O
integers	O
,	O
not	O
tuple	O
`	O
.	O

I	O
need	O
it	O
because	O
in	O
the	O
next	O
part	O
I	O
will	O
sum	B-API
up	O
this	O
large	O
np.array	B-API
with	O
some	O
delta_array	O
that	O
has	O
the	O
same	O
shape	O
.	O

Used	O
reshape	B-API
to	O
make	O
rows	O
into	O
columns	O
.	O

I	O
understand	O
that	O
you	O
could	O
create	O
an	O
array	O
of	O
zeros	B-API
and	O
iteratively	O
change	O
the	O
values	O
in	O
each	O
column	O
,	O
but	O
I	O
also	O
understand	O
this	O
is	O
not	O
an	O
efficient	O
method	O
.	O

I'm	O
trying	O
to	O
implement	O
the	O
univariate	O
gradient	B-API
descent	O
algorithm	O
in	O
python	O
.	O

numpy	O
glossary	O
says	O
the	O
sum	B-API
along	O
axis	O
argument	O
`	O
axis=1	O
`	O
sums	O
over	O
rows	O
:	O
"	O
we	O
can	O
sum	B-API
each	O
row	O
of	O
an	O
array	O
,	O
in	O
which	O
case	O
we	O
operate	O
along	O
columns	O
,	O
or	O
axis	O
1	O
"	O
.	O

It	O
also	O
prints	O
out	O
the	O
new	O
indices	B-API
signature	O
.	O

At	O
first	O
,	O
your	O
`	O
result	O
`	O
does	O
not	O
look	O
like	O
a	O
complex	O
FFT	B-API
output	O
,	O
because	O
you	O
calculated	O
the	O
absolute	B-API
values	O
of	O
the	O
FFT	B-API
.	O

When	O
you	O
do	O
fft	B-API
the	O
frequencies	O
ranges	O
from	O
-pi	O
/	O
timestep	O
to	O
pi	O
/	O
timestep	O
(	O
assuming	O
that	O
frequency	O
is	O
defined	O
as	O
w	O
=	O
2*pi	O
/	O
t	O
,	O
change	O
the	O
values	O
accordingly	O
if	O
you	O
use	O
f	O
=1	O
/	O
t	O
representation	O
)	O
.	O

debug	O
performance	O
diff	B-API
of	O
Same	O
code	O
on	O
nearly	O
same	O
cpu	O
/	O
ram	O

The	O
HTML	O
file	O
generated	O
by	O
Cython	O
indicates	O
that	O
the	O
bottleneck	O
is	O
the	O
dot	B-API
products	O
(	O
which	O
is	O
expected	O
of	O
course	O
)	O
.	O

`	O
numpy.unique	B-API
`	O
with	O
`	O
return_index=True	O
`	O
will	O
give	O
you	O
a	O
list	O
of	O
indices	B-API
to	O
take	O
from	O
.	O

I	O
forgot	O
exactly	O
why	O
,	O
but	O
there	O
is	O
a	O
good	O
reason	O
why	O
you	O
calculate	O
it	O
as	O
the	O
ratio	O
between	O
these	O
two	O
averages	O
,	O
instead	O
of	O
directly	O
averaging	O
`	O
fft	B-API
(	O
y	O
)	O
/	O
fft	B-API
(	O
x	O
)`	O
.	O

Do	O
you	O
really	O
want	O
this	O
'	O
roll	B-API
'	O
?	O

By	O
adding	O
a	O
nonzero	B-API
number	O
at	O
the	O
end	O
of	O
the	O
array	O
,	O
you	O
can	O
still	O
use	O
np.nonzero	B-API
to	O
get	O
your	O
desired	O
outcome	O
.	O

which	O
simply	O
sorts	O
the	O
terms	O
and	O
then	O
takes	O
the	O
ones	B-API
which	O
aren't	O
equal	O
to	O
the	O
previous	O
one	O
.	O

4	O
:	O
I	O
am	O
not	O
sure	O
about	O
the	O
indices	B-API
,	O
by	O
writing	O
couple	O
of	O
code	O
lines	O
I	O
just	O
able	O
to	O
get	O
cluster	O
indices	B-API
based	O
on	O
fclusterdata	O
.	O

Matlab	O
gives	O
me	O
a	O
norm	B-API
=	O
2	O
for	O
your	O
matrix	O
.	O

I	O
first	O
generated	O
a	O
labelled	O
array	O
of	O
unique	B-API
IDs	B-API
for	O
each	O
discrete	O
region	O
,	O
calculated	O
sizes	O
for	O
each	O
ID	O
,	O
masked	O
the	O
size	O
array	O
to	O
focus	O
only	O
on	O
size	O
==	O
1	O
blobs	O
,	O
then	O
index	O
the	O
original	O
array	O
and	O
set	O
IDs	B-API
with	O
a	O
size	O
==	O
1	O
to	O
0	O
:	O
#CODE	O

absolute	B-API
(	O
a	O
-	O
b	O
)	O
=	O
(	O
atol	O
+	O
rtol	O
*	O
absolute	B-API
(	O
b	O
))	O

Then	O
I	O
reshape	B-API
this	O
to	O
form	O
a	O
2D	O
numpy	O
array	O
.	O

n=5	O
(	O
min	B-API
length	O
of	O
sequence	O
)	O

I	O
have	O
written	O
a	O
function	O
which	O
contains	O
nested	O
loops	O
and	O
a	O
conditional	O
statement	O
;	O
the	O
purpose	O
of	O
the	O
loop	O
is	O
to	O
return	O
a	O
list	O
of	O
indices	B-API
for	O
the	O
nearest	O
elements	O
in	O
array	O
x	O
when	O
compared	O
to	O
array	O
y	O
.	O

I	O
also	O
want	O
to	O
color	O
the	O
1D	O
histogram	B-API
bars	O
according	O
to	O
the	O
same	O
normalization	O
.	O

If	O
you	O
are	O
calling	O
it	O
with	O
an	O
empty	O
matrix	O
for	O
[	O
low	O
,	O
high	O
]	O
it	O
will	O
just	O
use	O
whatever	O
the	O
max	B-API
and	O
min	B-API
values	O
in	O
the	O
array	O
are	O
.	O

Creating	O
a	O
class	O
deriving	O
from	O
`	O
ndarray	B-API
`	O
and	O
overriding	O
indexing	O
such	O
that	O
the	O
absolute	B-API
indices	B-API
are	O
used	O
.	O

One	O
solution	O
is	O
to	O
sort	O
both	O
arrays	O
(	O
adding	O
an	O
index	O
column	O
so	O
that	O
the	O
sorted	O
arrays	O
still	O
contains	O
the	O
original	O
indices	B-API
)	O
.	O

Use	O
`	O
reshape	B-API
`	O
:	O
#CODE	O

What's	O
wrong	O
with	O
the	O
normal	O
div	O
/	O
mod	B-API
operations	O
?	O

You	O
can	O
use	O
`	O
argmin	B-API
`	O
to	O
find	O
the	O
False	O
values	O
,	O
and	O
this	O
will	O
be	O
faster	O
and	O
take	O
less	O
memory	O
than	O
using	O
nonzero	B-API
,	O
but	O
this	O
is	O
linear	O
in	O
the	O
length	O
of	O
`	O
a	O
`	O
.	O

I'd	O
like	O
it	O
to	O
be	O
like	O
8x10^8	O
or	O
.8x10	O
^9	O
to	O
save	O
space	O
instead	O
of	O
putting	O
all	O
those	O
zeros	B-API
.	O

The	O
one	O
I	O
pointed	O
out	O
in	O
a	O
comment	O
to	O
other	O
answer	O
as	O
to	O
encode	B-API
the	O
binary	O
representation	O
of	O
the	O
array	O
as	O
a	O
Base64	O
text	O
block	O
.	O

due	O
to	O
broadcasting	O
,	O
you	O
don't	O
need	O
to	O
repeat	O
duplicate	O
indices	B-API
,	O
thus	O
:	O
#CODE	O

Maybe	O
`	O
flatten()	B-API
`	O
the	O
original	O
array	O
,	O
then	O
use	O
your	O
1D	O
solution	O
,	O
finally	O
calculate	O
the	O
real	O
nD	O
indices	B-API
using	O
the	O
original	O
shape	O
?	O

Multiply	O
the	O
coefficients	O
and	O
sum	B-API
#CODE	O

Note	O
that	O
the	O
diagonal	B-API
is	O
always	O
zero	O
since	O
`	O
mahalanobis	O
(	O
x	O
,	O
x	O
)`	O
equals	O
zero	O
for	O

I	O
will	O
have	O
a	O
go	O
at	O
the	O
numpy	O
2d	O
histogram	B-API
in	O
the	O
next	O
days	O
.	O

For	O
example	O
,	O
1851	O
is	O
four	O
times	O
and	O
1852	O
is	O
5	O
times	O
,	O
when	O
i	O
put	O
the	O
interval	O
(	O
1851,185	O
2	O
)	O
it	O
will	O
sum	B-API
up	O
and	O
give	O
out	O
put	O
as	O
9	O
.	O

NumPy	O
has	O
the	O
efficient	O
function	O
/	O
method	O
`	O
nonzero()	B-API
`	O
to	O
identify	O
the	O
indices	B-API
of	O
non-zero	O
elements	O
in	O
an	O
`	O
ndarray	B-API
`	O
object	O
.	O

possible	O
duplicate	O
of	O
[	O
NumPy	O
min	B-API
/	O
max	B-API
in-place	O
assignment	O
]	O
(	O
#URL	O
)	O

Once	O
the	O
tree	O
structure	O
has	O
been	O
built	O
,	O
go	O
back	O
and	O
collect	O
all	O
the	O
branches	O
and	O
leaves	O
into	O
the	O
array	O
structure	O
and	O
by	O
definition	O
,	O
they	O
will	O
be	O
unique	B-API
.	O

I	O
wrote	O
the	O
following	O
code	O
but	O
the	O
output	O
only	O
contains	O
the	O
ids	B-API
(	O
single	O
column	O
)	O
.	O

Maximum	O
is	O
always	O
bigger	O
than	O
the	O
minimum	O
(	O
more	O
to	O
the	O
right	O
on	O
a	O
1d	O
axis	O
,	O
not	O
by	O
absolute	B-API
value	O
)	O
.	O

Note	O
that	O
`	O
unq_count	O
`	O
doesn't	O
count	O
the	O
occurrences	O
of	O
the	O
last	O
unique	B-API
item	O
,	O
because	O
that	O
is	O
not	O
needed	O
to	O
split	O
the	O
index	O
array	O
.	O

If	O
yes	O
,	O
you	O
can	O
use	O
the	O
Linux	O
terminal	O
to	O
strip	B-API
quotes	O
from	O
the	O
ends	O
of	O
the	O
rows	O
quickly	O
.	O

Which	O
works	O
fairly	O
well	O
,	O
except	O
it's	O
somewhat	O
cumbersome	O
to	O
do	O
interactive	O
work	O
since	O
you	O
constantly	O
have	O
to	O
remember	O
which	O
array	O
dimensions	O
correspond	O
to	O
which	O
axes	O
,	O
and	O
which	O
parameteres	O
correspond	O
to	O
which	O
indices	B-API
along	O
that	O
certain	O
axis	O
,	O
etc	O
.	O

The	O
append	B-API
method	O
for	O
a	O
numpy	O
array	O
returns	O
a	O
copy	O
of	O
the	O
array	O
with	O
new	O
items	O
added	O
to	O
the	O
end	O
.	O

I	O
have	O
a	O
2-D	O
NumPy	O
array	O
and	O
a	O
set	O
of	O
indices	B-API
the	O
size	O
of	O
which	O
is	O
the	O
first	O
dimension	O
of	O
the	O
NumPy	O
array	O
.	O

I	O
want	O
to	O
get	O
the	O
norm	B-API
of	O
this	O
array	O
using	O
numpy	O
.	O

The	O
only	O
problem	O
here	O
is	O
that	O
I	O
think	O
it	O
will	O
append	B-API
directly	O
to	O
the	O
column	O
,	O
when	O
I	O
would	O
prefer	O
it	O
to	O
append	B-API
to	O
a	O
new	O
column	O
.	O

So	O
the	O
function	O
might	O
be	O
something	O
like	O
`	O
def	O
some_function	O
(	O
arr	O
)`	O
and	O
it	O
returns	O
the	O
indices	B-API
in	O
arr	O
that	O
meet	O
a	O
series	O
of	O
conditions	O
.	O

However	O
,	O
because	O
columns	O
indices	B-API
are	O
both	O
0	O
,	O
it	O
adds	O
a_	O
to	O
the	O
end	O
of	O
the	O
dataframe	O
column	O
,	O
resulting	O
in	O
a	O
single	O
column	O
.	O

The	O
value	O
held	O
in	O
your	O
tensor	O
`	O
x	O
`	O
at	O
position	O
with	O
indices	B-API
`	O
[	O
0	O
,	O
0	O
,	O
1	O
,	O
1	O
]'	O
?	O

You	O
don't	O
need	O
to	O
import	O
string	O
,	O
and	O
you	O
don't	O
need	O
to	O
loop	O
through	O
all	O
the	O
lines	O
and	O
append	B-API
text	O
or	O
count	O
the	O
characters	O
.	O

The	O
transpose	B-API
of	O
the	O
transpose	B-API
of	O
a	O
matrix	O
==	O
that	O
matrix	O
,	O
or	O
,	O
[	O
A^T	O
]	O
^T	O
==	O
A	O
.	O

The	O
last	O
timestamps	O
in	O
`	O
a	O
`	O
that	O
are	O
smaller	O
than	O
or	O
equal	O
to	O
each	O
item	O
in	O
`	O
b	O
`	O
would	O
be	O
`	O
[	O
0	O
,	O
4	O
,	O
6	O
]`	O
,	O
which	O
correspond	O
to	O
indices	B-API
`	O
[	O
0	O
,	O
2	O
,	O
3	O
]`	O
,	O
which	O
is	O
exactly	O
what	O
we	O
get	O
if	O
we	O
do	O
:	O
#CODE	O

Currently	O
I	O
am	O
looping	O
through	O
the	O
arrays	O
and	O
using	O
numpy.dstack	B-API
to	O
stack	B-API
the	O
1000	O
arrays	O
into	O
a	O
rather	O
large	O
3d	O
array	O
...	O
and	O
then	O
will	O
calculate	O
the	O
mean	O
across	O
the	O
3rd	O
(	O
?	O
)	O
dimension	O
.	O

[8	O
0	O
:]	O
[	O
105	O
:]	O
it	O
returns	O
me	O
an	O
array	O
with	O
the	O
corresponding	O
values	O
of	O
allpix	O
but	O
when	O
I	O
set	O
[8	O
0:1	O
:	O
200	O
]	O
[	O
105:1	O
:	O
200	O
]	O
it	O
returns	O
me	O
the	O
original	O
one	O
roipix	O
(	O
i.e	O
with	O
only	O
zeros	B-API
)	O
without	O
any	O
change	O
.	O

transpose	B-API
simply	O
returns	O
a	O
`	O
view	B-API
`	O
if	O
possible	O
--	O
So	O
it's	O
a	O
fast	O
operation	O
--	O
That	O
said	O
,	O
if	O
you	O
*	O
can	O
*	O
just	O
switch	O
the	O
way	O
you	O
index	O
your	O
array	O
,	O
that's	O
probably	O
the	O
fastest	O
you	O
can	O
do	O
if	O
you're	O
operating	O
one	O
element	O
at	O
a	O
time	O
.	O

If	O
you	O
strip	B-API
all	O
these	O
out	O
and	O
just	O
call	O
lapack	O
in	O
your	O
for	O
loop	O
(	O
since	O
you	O
already	O
know	O
the	O
dimensions	O
of	O
your	O
matrix	O
and	O
maybe	O
know	O
that	O
it's	O
real	O
,	O
not	O
complex	O
)	O
,	O
things	O
run	O
MUCH	O
faster	O
(	O
Note	O
that	O
I've	O
made	O
my	O
array	O
larger	O
)	O
:	O
#CODE	O

First	O
,	O
you	O
have	O
a	O
binomial	B-API
response	O
:	O
having	O
or	O
not	O
having	O
a	O
particular	O
behavior	O
.	O

The	O
call	O
to	O
`	O
np.sqrt	B-API
`	O
,	O
which	O
is	O
a	O
Python	O
function	O
call	O
,	O
is	O
killing	O
your	O
performance	O
You	O
are	O
computing	O
the	O
square	O
root	O
of	O
scalar	O
floating	O
point	O
value	O
,	O
so	O
you	O
should	O
use	O
the	O
`	O
sqrt	B-API
`	O
function	O
from	O
the	O
C	O
math	O
library	O
.	O

A	O
little	O
annoying	O
:)	O
which	O
is	O
one	O
reason	O
why	O
I	O
almost	O
never	O
use	O
the	O
`	O
trace	B-API
`	O
feature	O
;	O
seeing	O
_all_	O
syscalls	O
is	O
often	O
more	O
instructive	O
,	O
and	O
`	O
grep	O
-v	O
`	O
can	O
remove	O
ones	B-API
I	O
don't	O
want	O
to	O
see	O
after	O
the	O
fact	O
.	O

What's	O
the	O
`	O
dot	B-API
`	O
product	O
involving	O
your	O
'	O
point	O
'	O
?	O

It's	O
probably	O
(	O
?	O
)	O
those	O
two	O
that	O
are	O
slowing	O
you	O
down	O
(	O
mostly	O
`	O
sum	B-API
`	O
vs	O
`	O
numpy.sum	B-API
`)	O
.	O

I	O
would	O
like	O
to	O
perform	O
dot	B-API
(	O
A	O
,	O
A.T	O
)	O
where	O
certain	O
indices	B-API
are	O
omitted	O
:	O
#CODE	O

I	O
know	O
need	O
the	O
sum	B-API
of	O
the	O
values	O
for	O
each	O
label	O
and	O
column	O
.	O

Now	O
to	O
this	O
I	O
want	O
to	O
add	O
a	O
new	O
column	O
at	O
beginning	O
with	O
all	O
ones	B-API

This	O
would	O
call	O
the	O
function	O
`	O
np.loadtxt	B-API
`	O
which	O
would	O
load	O
the	O
file	O
`	O
GPBUSD1d.txt	O
'`	O
and	O
transpose	B-API
(	O
"	O
unpack	O
")	O
it	O
.	O

I	O
have	O
a	O
quite	O
large	O
numpy	O
array	O
of	O
one	O
dimension	O
for	O
which	O
I	O
would	O
like	O
to	O
apply	O
some	O
sorting	O
on	O
a	O
slice	O
inplace	O
and	O
also	O
retrieve	O
the	O
permutation	B-API
vector	O
for	O
other	O
processing	O
.	O

Can	O
anyone	O
explain	O
me	O
why	O
does	O
this	O
happen	O
?	O
and	O
what	O
do	O
i	O
do	O
if	O
i	O
have	O
keep	O
the	O
frame	O
from	O
getting	O
changed	O
when	O
i	O
write	O
a	O
composite	O
clip	B-API
into	O
a	O
video	O
?	O

You	O
can't	O
change	O
the	O
typing	O
of	O
the	O
array	O
in-place	O
(	O
unless	O
I'm	O
grossly	O
mistaken	O
)	O
,	O
but	O
you	O
can	O
floor	B-API
.	O

I	O
have	O
a	O
2D	O
histogram	B-API
that	O
I	O
generate	O
with	O
numpy	O
:	O
#CODE	O

Your	O
calculation	O
is	O
essentially	O
a	O
dot	B-API
(	O
matrix	O
)	O
product	O
.	O

Finally	O
I	O
just	O
transpose	B-API
the	O
dataframe	O
to	O
get	O
ids	B-API
as	O
rows	O
and	O
categories	O
as	O
columns	O
.	O

Are	O
the	O
operations	O
you're	O
doing	O
simple	O
enough	O
(	O
eg	O
,	O
dot	B-API
product	O
etc	O
)	O
that	O
you	O
could	O
simply	O
implement	O
them	O
yourself	O
?	O

As	O
a	O
side	O
note	O
,	O
in	O
Matlab	O
you'd	O
better	O
use	O
the	O
[	O
more	O
efficient	O
approach	O
]	O
(	O
#URL	O
)	O
`	O
mat	B-API
=	O
bsxfun	O
(	O
@USER	O
,	O
mat	B-API
,	O
sum	B-API
(	O
mat	B-API
,	O
1	O
))`	O

The	O
following	O
way	O
of	O
obtaining	O
the	O
unique	B-API
elements	O
in	O
all	O
sub-arrays	O
is	O
very	O
fast	O
:	O
#CODE	O

Can't	O
use	O
dot	B-API
,	O
though	O
,	O
because	O
doing	O
that	O
will	O
add	O
extra	O
dimensions	O
.	O

Whats	O
the	O
best	O
way	O
to	O
plot	O
a	O
histogram	B-API
of	O
this	O
data	O
with	O
minute	O
bins	O
and	O
10-min	O
bins	O
?	O

You	O
can't	O
use	O
the	O
numpy	O
reshape	B-API
for	O
a	O
simple	O
reason	O
:	O
you	O
have	O
data	O
duplicity	O
in	O
your	O
original	O
array	O
(	O
time	O
and	O
positions	O
)	O
and	O
not	O
in	O
the	O
result	O
you	O
want	O
.	O

So	O
it	O
does	O
not	O
make	O
much	O
sense	O
to	O
me	O
to	O
reshape	B-API
it	O
to	O
a	O
"	O
1d-matrix	O
"	O
.	O

PS	O
:	O
For	O
the	O
curious	O
ones	B-API
,	O
this	O
is	O
a	O
variant	O
of	O
the	O
prize-winning	O
solution	O
to	O
the	O
famous	O
NetFlix	O
million	O
prize	O
problem	O
.	O

Now	O
create	O
5-bit	O
bitstrings	O
from	O
each	O
integer	O
and	O
join	B-API
them	O
together	O
:	O
#CODE	O

It	O
would	O
probably	O
be	O
just	O
as	O
much	O
work	O
to	O
translate	B-API
the	O
top	O
Matlab	O
routine	O
from	O
Maurits	O
.	O

In	O
the	O
particular	O
case	O
of	O
your	O
example	O
,	O
where	O
your	O
unique	B-API
values	O
are	O
sequential	O
integers	O
,	O
you	O
can	O
use	O
`	O
find_objects	O
`	O
directly	O
.	O

Every	O
second	O
row	O
of	O
the	O
ft	O
consists	O
completely	O
of	O
zeros	B-API
.	O

The	O
i-th	O
element	O
of	O
the	O
output	O
is	O
the	O
sum	B-API
of	O
all	O
the	O
`	O
data	O
`	O
elements	O
corresponding	O
to	O
"	O
id	O
"	O
`	O
i	O
`	O
.	O

I'd	O
like	O
to	O
add	O
two	O
numpy	O
arrays	O
of	O
different	O
shapes	O
,	O
but	O
without	O
broadcasting	O
,	O
rather	O
the	O
"	O
missing	O
"	O
values	O
are	O
treated	O
as	O
zeros	B-API
.	O

axis=1	O
refers	O
to	O
working	O
on	O
rows	O
in	O
this	O
2d	O
case	O
(	O
axis=0	O
,	O
in	O
contrast	O
,	O
would	O
be	O
getting	O
you	O
the	O
max	B-API
in	O
each	O
column	O
)	O

There	O
are	O
many	O
other	O
`	O
ufunc	O
`	O
,	O
and	O
other	O
iteration	O
modes	O
-	O
`	O
accumulate	B-API
`	O
,	O
`	O
reduceat	B-API
`	O
.	O

All	O
diagonal	B-API
elements	O
will	O
be	O
of	O
the	O
form	O
`	O
s_i	O
**	O
2	O
/	O
s_i	O
**	O
2	O
==	O
1	O
`	O
.	O

I	O
get	O
a	O
vector	O
of	O
zeros	B-API
and	O
ones	B-API
,	O
of	O
length	O
1200	O
.	O

Note	O
that	O
in	O
many	O
geometries	O
d	O
(	O
x	O
,	O
y	O
)	O
=	O
0	O
iff	O
x	O
=	O
y	O
,	O
so	O
you	O
may	O
want	O
to	O
skip	O
that	O
check	O
,	O
and	O
deal	O
with	O
the	O
zeros	B-API
later	O
on	O
.	O

Take	O
the	O
sum	B-API
over	O
`	O
a	O
[	O
i	O
]`	O
out	O
of	O
the	O
loop	O
,	O
just	O
like	O
you	O
did	O
for	O
`	O
b	O
`	O

@USER	O
In	O
the	O
example	O
above	O
,	O
I	O
get	O
the	O
following	O
error	O
:	O
Non-broadcastable	O
operand	O
with	O
shape	O
(	O
100	O
)	O
doesn't	O
match	O
the	O
broadcast	B-API
shape	O
(	O
100,100	O
)	O

However	O
,	O
I	O
cant	O
just	O
use	O
a	O
matrix	O
full	O
of	O
zeros	B-API
,	O
since	O
I	O
could	O
afterwards	O
not	O
say	O
which	O
elements	O
of	O
the	O
matrix	O
are	O
the	O
"	O
default	O
"	O
zeros	B-API
and	O
which	O
ones	B-API
i	O
might	O
have	O
inserted	O
myself	O
.	O

is	O
calculated	O
such	O
that	O
all	O
but	O
the	O
diagonal	B-API
#CODE	O

Now	O
in	O
that	O
sorted	O
array	O
,	O
the	O
first	O
element	O
would	O
always	O
be	O
the	O
unique	B-API
one	O
and	O
that	O
`	O
diff	B-API
`	O
would	O
have	O
reduced	O
the	O
length	O
by	O
1	O
.	O

To	O
compute	O
the	O
number	O
of	O
unique	B-API
elements	O
in	O
a	O
numpy	O
array	O
,	O
you	O
can	O
use	O
`	O
unique	B-API
(	O
x	O
)	O
.size	O
`	O
or	O
`	O
len	O
(	O
unique	B-API
(	O
x	O
))`	O
(	O
see	O
`	O
numpy.unique	B-API
`	O
)	O
.	O

To	O
make	O
sure	O
they	O
appear	O
as	O
an	O
ordered	O
pair	O
I'd	O
have	O
to	O
find	O
the	O
indices	B-API
where	O
`	O
x	O
`	O
and	O
`	O
y	O
`	O
appear	O
in	O
`	O
cluster	O
`	O
and	O
compare	O
them	O
,	O
which	O
seems	O
very	O
clunky	O
and	O
inelegant	O
,	O
and	O
I'm	O
certain	O
there	O
must	O
be	O
a	O
better	O
solution	O
out	O
there	O
.	O

Or	O
would	O
that	O
basically	O
require	O
implementing	O
the	O
outer	B-API
loop	O
in	O
Cython	O
?	O

For	O
a	O
tensor	O
it	O
is	O
not	O
clear	O
how	O
to	O
define	O
an	O
inverse	O
or	O
a	O
transpose	B-API
.	O

Second	O
,	O
you	O
are	O
doing	O
transpose	B-API
the	O
hard	O
way	O
.	O

I	O
would	O
like	O
to	O
compute	O
the	O
following	O
sum	B-API
.	O

I've	O
modified	O
the	O
answer	O
to	O
show	O
how	O
to	O
get	O
this	O
sum	B-API
in	O
numpy	O
.	O

I	O
am	O
thinking	O
of	O
re-sample	O
all	O
the	O
time	O
columns	O
into	O
uniformly	O
separated	O
ones	B-API
based	O
on	O
the	O
starting	O
point	O
.	O

The	O
older	O
arrays	O
that	O
are	O
filtered	O
I	O
could	O
then	O
add	O
to	O
the	O
yearly	O
sum	B-API
and	O
delete	O
,	O
so	O
that	O
I	O
do	O
not	O
have	O
more	O
than	O
16	O
(	O
4+12	O
)	O
time	O
steps	O
(	O
arrays	O
)	O
in	O
memory	O
at	O
all	O
times	O
.	O

sum	B-API
(	O
triple	O
)	O
=	O
1	O

Where	O
does	O
log	B-API
(	O
b	O
,	O
2	O
)	O
come	O
from	O
?	O

`	O
numpy.indices	B-API
`	O
calculates	O
the	O
indices	B-API
of	O
each	O
axis	O
of	O
the	O
array	O
when	O
"	O
flattened	O
"	O
through	O
the	O
other	O
two	O
axes	O
(	O
or	O
n	O
-	O
1	O
axes	O
where	O
n	O
=	O
total	O
number	O
of	O
axes	O
)	O
.	O

(	O
The	O
values	O
in	O
the	O
corners	O
correspond	O
to	O
the	O
diagonal	B-API
elements	O
.	O
)	O

I	O
tried	O
using	O
the	O
scipy.stat	O
module	O
by	O
creating	O
my	O
numbers	O
with	O
`	O
np.random.normal	B-API
`	O
,	O
since	O
it	O
only	O
takes	O
data	O
and	O
not	O
stat	O
values	O
like	O
mean	O
and	O
std	B-API
dev	O
(	O
is	O
there	O
any	O
way	O
to	O
use	O
these	O
values	O
directly	O
)	O
.	O

until	O
you	O
reach	O
a	O
solution	O
of	O
size	O
k	O
,	O
add	O
to	O
the	O
solution	O
the	O
point	O
for	O
which	O
the	O
sum	B-API
of	O
distances	O
from	O
it	O
to	O
all	O
the	O
points	O
already	O
in	O
the	O
solution	O
is	O
the	O
greatest	O
.	O

Where	O
'	O
reverse	O
cumulative	O
sum	B-API
'	O
is	O
defined	O
as	O
below	O
(	O
I	O
welcome	O
any	O
corrections	O
on	O
the	O
name	O
for	O
this	O
procedure	O
):	O

The	O
asymptotic	O
complexity	O
of	O
both	O
of	O
the	O
`	O
matrix_rank	B-API
`	O
and	O
`	O
det	B-API
`	O
calls	O
are	O
therefore	O
O	O
(	O
n^3	O
)	O
,	O
the	O
complexity	O
of	O
LU	O
decomposition	O
.	O

One	O
way	O
to	O
achieve	O
what	O
I	O
need	O
is	O
to	O
use	O
a	O
code	O
like	O
the	O
following	O
(	O
see	O
e.g.	O
THIS	O
related	O
answer	O
)	O
,	O
where	O
I	O
digitize	B-API
my	O
values	O
and	O
then	O
have	O
a	O
j-loop	O
selecting	O
digitized	O
indices	B-API
equal	O
to	O
j	O
like	O
below	O
#CODE	O

I	O
think	O
the	O
np.std()	B-API
is	O
just	O
universal	O
std	B-API
.	O

Column	O
sum	B-API
with	O
matrix	O
from	O
txt	O
file	O
?	O

Golub	O
and	O
Van	O
Loan	O
also	O
provide	O
a	O
way	O
of	O
storing	O
a	O
matrix	O
in	O
diagonal	B-API
dominant	O
form	O
.	O

I	O
see	O
no	O
reason	O
why	O
`	O
numpy	O
`	O
would	O
need	O
to	O
make	O
a	O
copy	O
for	O
an	O
operation	O
like	O
this	O
,	O
as	O
long	O
as	O
it	O
does	O
the	O
necessary	O
checks	O
for	O
overlaps	O
(	O
though	O
of	O
course	O
as	O
others	O
have	O
noted	O
,	O
`	O
resize	B-API
`	O
may	O
itself	O
have	O
to	O
allocate	O
a	O
new	O
block	O
of	O
memory	O
)	O
.	O

Any	O
chance	O
you	O
know	O
how	O
I	O
can	O
display	O
this	O
as	O
a	O
normal	O
3D	O
histogram	B-API
with	O
bars	O
.	O

I	O
found	O
another	O
stack	B-API
question	O
about	O
this	O
here	O
,	O
but	O
I	O
am	O
not	O
entirely	O
sure	O
how	O
it	O
was	O
resolved	O
,	O
I'm	O
still	O
a	O
little	O
confused	O
.	O

Maybe	O
`	O
floor	B-API
(	O
arange	B-API
(	O
0	O
,	O
10	O
,	O
0.1	O
))`	O
?	O

or	O
,	O
if	O
you	O
want	O
to	O
sum	B-API
over	O
a	O
column	O
,	O
i.e.	O
,	O
the	O
index	O
that	O
changes	O
is	O
the	O
0-th	O
#CODE	O

In	O
python	O
,	O
I	O
would	O
like	O
to	O
convolve	B-API
the	O
two	O
matrices	O
along	O
the	O
second	O
axis	O
only	O
.	O

`	O
view	B-API
`	O
is	O
basically	O
taking	O
your	O
two	O
coordinates	O
as	O
a	O
single	O
variable	O
that	O
can	O
be	O
used	O
to	O
find	O
the	O
unique	B-API
coordinates	O
.	O

Optimize	O
NumPy	O
sum	B-API
of	O
matrices	O
iterated	O
through	O
every	O
element	O

You	O
also	O
incur	O
a	O
performance	O
penalty	O
by	O
constructing	O
a	O
new	O
NumPy	O
array	O
each	O
time	O
in	O
the	O
inner	O
loop	O
and	O
using	O
`	O
in	O
`	O
to	O
check	O
the	O
sum	B-API
(	O
which	O
is	O
`	O
O	O
(	O
n	O
)`	O
in	O
complexity	O
)	O
.	O

Keep	O
in	O
mind	O
that	O
machine	O
precision	O
for	O
a	O
32-bit	O
double	O
is	O
~	O
10^-16	O
,	O
which	O
will	O
be	O
an	O
absolute	B-API
limiting	O
factor	O
.	O

This	O
takes	O
advantage	O
of	O
fast	O
code	O
within	O
the	O
sparse	O
matrix	O
constructor	O
to	O
organize	O
the	O
data	O
in	O
a	O
useful	O
way	O
,	O
constructing	O
a	O
sparse	O
matrix	O
where	O
row	O
`	O
i	O
`	O
contains	O
just	O
the	O
indices	B-API
where	O
the	O
flattened	O
data	O
equals	O
`	O
i	O
`	O
.	O

Each	O
counter	O
is	O
basically	O
a	O
histogram	B-API
.	O

Then	O
I	O
try	O
and	O
resample	O
the	O
`	O
DataFrame	O
`	O
to	O
daily	O
using	O
`	O
df.resample	O
(	O
"	O
1D	O
"	O
,	O
how=	O
"	O
sum	B-API
")`	O
.	O

@USER	O
To	O
add	O
to	O
hpaulj's	O
comment	O
,	O
[	O
advanced	O
indexing	O
]	O
(	O
#URL	O
)	O
(	O
e.g.	O
with	O
an	O
array	O
of	O
integer	O
indices	B-API
)	O
always	O
returns	O
a	O
copy	O
of	O
the	O
data	O
rather	O
than	O
a	O
view	O
,	O
so	O
you	O
need	O
to	O
take	O
into	O
account	O
the	O
additional	O
cost	O
of	O
allocating	O
a	O
new	O
array	O
when	O
you	O
do	O
`	O
A	O
[:	O
,	O
subset	O
]`	O
,	O
as	O
well	O
as	O
the	O
fact	O
that	O
you	O
are	O
indexing	O
non-contiguous	O
blocks	O
of	O
`	O
A	O
`	O
.	O

Getting	O
linearized	O
indices	B-API
in	O
numpy	O

Note	O
that	O
this	O
approach	O
will	O
give	O
you	O
the	O
exact	O
proportion	O
of	O
zeros	B-API
/	O
ones	B-API
you	O
request	O
,	O
unlike	O
say	O
the	O
binomial	B-API
approach	O
.	O

That	O
is	O
the	O
exact	O
problem	O
with	O
your	O
`	O
square_list()	O
`	O
function	O
as	O
well	O
,	O
it	O
is	O
returning	O
a	O
list	O
,	O
not	O
the	O
sum	B-API
of	O
the	O
list	O
elements	O
.	O

For	O
example	O
,	O
if	O
you	O
want	O
to	O
sum	B-API
along	O
the	O
last	O
dimension	O
of	O
the	O
array	O
,	O
you	O
would	O
do	O
:	O
#CODE	O

For	O
a	O
sparse	O
csr	O
matrix	O
(	O
X	O
)	O
and	O
a	O
list	O
of	O
indices	B-API
to	O
drop	O
(	O
index_to_drop	O
):	O
#CODE	O

Also	O
,	O
if	O
there	O
is	O
then	O
I	O
could	O
just	O
append	B-API
to	O
the	O
b	O
and	O
c	O
arrays	O
each	O
time	O
instead	O
of	O
overwriting	O
and	O
starting	O
from	O
scratch	O
each	O
loop	O
.	O

Use	O
`	O
multiprocessing.Process	O
(	O
target	O
=	O
somefunc	O
,	O
args	O
=	O
(	O
sa	O
,	O
)`	O
(	O
and	O
`	O
start	O
`	O
,	O
maybe	O
`	O
join	B-API
`)	O
to	O
call	O
`	O
somefunc	O
`	O
in	O
a	O
separate	O
process	O
,	O
passing	O
the	O
shared	O
array	O
.	O

This	O
leads	O
to	O
the	O
situation	O
that	O
in	O
the	O
end	O
I	O
have	O
an	O
array	O
with	O
tail	O
of	O
zeros	B-API
.	O

Take	O
a	O
look	O
a	O
the	O
concatenate	B-API
function	O
.	O

The	O
simplest	O
way	O
to	O
deal	O
with	O
this	O
is	O
by	O
making	O
your	O
array	O
twice	O
as	O
large	O
along	O
every	O
dimension	O
,	O
padding	O
with	O
extra	O
zeros	B-API
,	O
and	O
then	O
discarding	O
the	O
extra	O
data	O
.	O

Get	O
the	O
column	O
which	O
have	O
maximum	O
sum	B-API
value	O
from	O
matrix	O

Unlike	O
Joe	O
Kington's	O
answer	O
,	O
the	O
benefit	O
of	O
this	O
is	O
that	O
you	O
don't	O
need	O
to	O
know	O
the	O
original	O
shape	O
of	O
the	O
data	O
in	O
the	O
`	O
.mat	O
`	O
file	O
,	O
i.e.	O
no	O
need	O
to	O
reshape	B-API
upon	O
reading	O
in	O
.	O

Also	O
,	O
to	O
start	O
with	O
,	O
rather	O
than	O
`	O
pd.Series.sum	O
`	O
-	O
just	O
use	O
`'	O
sum	B-API
'`	O
-	O
the	O
code	O
should	O
take	O
a	O
faster	O
path	O
.	O

(	O
The	O
code	O
won't	O
even	O
get	O
through	O
one	O
loop	O
for	O
me	O
because	O
I'm	O
using	O
Python	O
3	O
and	O
so	O
the	O
`	O
max	B-API
`	O
fails	O
--	O
in	O
2	O
it'll	O
just	O
give	O
an	O
answer	O
that	O
I	O
doubt	O
the	O
OP	O
intends	O
.	O
)	O

If	O
you're	O
multiplying	O
each	O
element	O
of	O
`	O
y	O
`	O
by	O
every	O
element	O
of	O
`	O
X	O
`	O
,	O
just	O
multiply	O
all	O
the	O
elements	O
of	O
`	O
X	O
`	O
together	O
first	O
,	O
then	O
use	O
multiply	O
the	O
array	O
`	O
y	O
`	O
by	O
this	O
number	O
and	O
sum	B-API
:	O
#CODE	O

but	O
I	O
think	O
,	O
finding	O
the	O
local	O
max	B-API
can	O
be	O
simplified	O
to	O
:	O
#CODE	O

Can	O
this	O
be	O
vectorised	O
as	O
a	O
dot	B-API
product	O
?	O

The	O
axis	O
are	O
showed	O
clearly	O
but	O
no	O
histogram	B-API
appears	O
on	O
the	O
plot	O
.	O

I	O
would	O
like	O
to	O
resize	B-API
the	O
ones	B-API
((	O
12	O
,	O
12	O
))	O
such	O
that	O
it's	O
new	O
size	O
will	O
be	O
5x5	O
.	O

@USER	O
`	O
swapaxes	B-API
`	O
seemed	O
to	O
be	O
indistinguishable	O
from	O
`	O
transpose	B-API
(	O
0	O
,	O
2	O
,	O
1	O
)`	O
.	O

Do	O
gradient	B-API
actually	O
compute	O
really	O
a	O
gradient	B-API
?	O

Just	O
multiply	O
everything	O
by	O
the	O
x	O
raised	O
to	O
the	O
absolute	B-API
value	O
of	O
the	O
largest	O
negative	O
exponent	O
and	O
use	O
the	O
normal	O
polynomial	B-API
class	O
.	O

I	O
would	O
suggest	O
to	O
first	O
program	O
it	O
with	O
`	O
np.nditer	B-API
`	O
and	O
then	O
translate	B-API
it	O
into	O
C	O
.	O

As	O
you	O
can	O
see	O
,	O
using	O
the	O
join	B-API
function	O
on	O
the	O
list	O
(	O
`	O
binary_list	O
`)	O
works	O
properly	O
,	O
but	O
on	O
the	O
equivalent	O
numpy	O
array	O
(	O
`	O
binary_split_array	O
`)	O
it	O
doesn't	O
:	O
we	O
can	O
see	O
the	O
string	O
returned	O
is	O
only	O
72	O
characters	O
long	O
instead	O
of	O
80	O
.	O

Does	O
this	O
mean	O
that	O
`	O
numpy.random.RandomState	B-API
(	O
seed=None	O
)`	O
is	O
called	O
every	O
time	O
you	O
call	O
`	O
rand	B-API
`	O
?	O

@USER	O
.B	O
.	O
the	O
above	O
question	O
is	O
significantly	O
different	O
from	O
mine	O
;	O
it	O
asks	O
for	O
both	O
min	B-API
and	O
max	B-API
,	O
and	O
it	O
is	O
for	O
2D	O
matrix	O

This	O
will	O
join	B-API
the	O
rows	O
and	O
write	O
them	O
to	O
a	O
new	O
csv	O
:	O
#CODE	O

The	O
reason	O
I	O
have	O
`	O
-det	O
(	O
mat	B-API
)`	O
in	O
the	O
energy	O
function	O
is	O
because	O
the	O
simulated	O
annealing	O
algorithm	O
does	O
minimization	O
.	O

My	O
biggest	O
issue	O
is	O
that	O
further	O
down	O
the	O
code	O
I	O
divide	O
my	O
spectra	O
by	O
a	O
template	O
spectrum	O
constructed	O
from	O
the	O
sum	B-API
of	O
all	O
my	O
spectra	O
in	O
order	O
to	O
analyse	O
the	O
differences	O
and	O
since	O
I	O
do	O
not	O
have	O
enough	O
decimal	O
places	O
I	O
am	O
getting	O
rounding	O
errors	O
.	O

Also	O
is	O
`	O
x	O
`	O
unique	B-API
?	O

If	O
you	O
wanted	O
to	O
automatically	O
generate	O
levels	O
like	O
the	O
ones	B-API
I	O
have	O
used	O
,	O
you	O
can	O
consider	O
this	O
piece	O
of	O
code	O
:	O
#CODE	O

`	O
plt.hist	O
`	O
is	O
making	O
a	O
histogram	B-API
of	O
the	O
values	O
.	O

Pandas	O
append	B-API
filtered	O
row	O
to	O
another	O
DataFrame	O

Again	O
,	O
the	O
code	O
notes	O
that	O
set	O
of	O
combinations	O
is	O
not	O
unique	B-API
;	O
but	O
it	O
does	O
have	O
a	O
unique	B-API
subset	O
,	O
namely	O
[[	O
2	O
3	O
]	O
,	O
[	O
0	O
1	O
]]	O
,	O
which	O
as	O
you	O
just	O
revealed	O
,	O
you	O
do	O
consider	O
a	O
valid	O
combination	O
.	O

Note	O
that	O
in	O
the	O
last	O
one	O
,	O
your	O
list	O
(	O
if	O
you	O
are	O
setting	O
a	O
column	O
)	O
would	O
have	O
to	O
be	O
a	O
list	O
within	O
a	O
list	O
(	O
i.e.	O
the	O
outer	B-API
list	O
acts	O
as	O
a	O
row	O
,	O
the	O
inner	O
lists	O
act	O
as	O
columns	O
)	O
.	O

In	O
short	O
,	O
this	O
creates	O
a	O
vectorized	O
version	O
of	O
the	O
python	O
function	O
,	O
that	O
can	O
be	O
broadcast	B-API
element-wise	O
on	O
an	O
array	O
.	O

That	O
concatenate	B-API
action	O
should	O
be	O
pretty	O
fast	O
.	O

This	O
produces	O
a	O
big	O
band	O
of	O
zeros	B-API
in	O
the	O
internal	O
covariance	O
matrix	O
calculated	O
by	O
`	O
gaussian_kde	O
`	O
,	O
making	O
it	O
singular	O
and	O
causing	O
the	O
routine	O
to	O
fail	O
.	O

If	O
you	O
want	O
to	O
pass	O
in	O
the	O
transpose	B-API
,	O
you'll	O
need	O
to	O
set	O
`	O
rowvar	O
`	O
to	O
zero	O
.	O

You	O
can	O
override	O
this	O
behavior	O
by	O
using	O
the	O
arguments	O
`	O
vmin	O
`	O
and	O
`	O
vmax	O
`	O
(	O
or	O
`	O
norm	B-API
`)	O
of	O
`	O
imshow	O
`	O
.	O

I	O
then	O
must	O
sum	B-API
these	O
values	O
,	O
using	O
the	O
expression	O
:	O

gaussian	O
sum	B-API
filter	O
for	O
irregular	O
spaced	O
points	O

Differences	O
between	O
matrix	O
multiplication	O
and	O
array	O
dot	B-API

Here	O
I	O
collect	O
5	O
(	O
3	O
,	O
3	O
)	O
arrays	O
and	O
join	B-API
them	O
into	O
one	O
.	O

@USER	O
,	O
`	O
cs	O
`	O
is	O
sorted	O
and	O
`	O
searchsorted()	B-API
`	O
exploits	O
that	O
to	O
do	O
a	O
binary	O
search	O
-	O
only	O
`	O
O	O
(	O
log	B-API
(	O
len	O
(	O
weights	O
)))`	O
comparisons	O
are	O
needed	O
.	O

If	O
we	O
sum	B-API
the	O
elements	O
of	O
the	O
array	O
it	O
will	O
give	O
15	O
.	O

Think	O
`	O
flatten	B-API
`	O
without	O
the	O
copy	O
.	O

In	O
your	O
case	O
it	O
looks	O
like	O
the	O
weight	O
arrays	O
will	O
have	O
the	O
same	O
dimension	O
as	O
'	O
A	O
'	O
,	O
so	O
you	O
reshape	B-API
them	O
accordingly	O
and	O
multiply	O
dx	O
and	O
dy	O
by	O
their	O
individual	O
weight	O
vectors	O
.	O

Python	O
program	O
can	O
not	O
import	O
dot	B-API
parser	O

Does	O
this	O
mean	O
the	O
standard	O
error	O
of	O
the	O
gradient	B-API
or	O
intercept	O
?	O

I	O
would	O
think	O
a	O
density	O
map	O
(	O
2D	O
histogram	B-API
)	O
would	O
be	O
more	O
informative	O
.	O

The	O
second	O
creates	O
a	O
2D	O
`	O
numpy.array	B-API
`	O
of	O
1	O
row	O
and	O
3	O
columns	O
,	O
filled	O
with	O
zeros	B-API
:	O
#CODE	O

Now	O
I	O
have	O
the	O
start	O
and	O
end	O
indices	B-API
for	O
my	O
mcp	O
process	O
.	O

In	O
other	O
words	O
,	O
I	O
need	O
to	O
find	O
the	O
indices	B-API
in	O
my	O
time	O
array	O
that	O
satisfy	O
that	O
condition	O
(	O
0-240	O
)	O
,	O
and	O
then	O
apply	O
those	O
indices	B-API
to	O
the	O
amplitude	O
array	O
in	O
a	O
way	O
that	O
outputs	O
the	O
mean	O
and	O
st	O
dev	O
.	O

Your	O
array	O
has	O
a	O
lot	O
more	O
zeros	B-API
than	O
ones	B-API
.	O

Also	O
,	O
the	O
algo	O
has	O
a	O
lot	O
of	O
matrices	O
manipulation	O
(	O
fft	B-API
,	O
filters	O
,	O
etc	O
.	O
)	O
,	O
so	O
using	O
numpy	O
/	O
scipy	O
should	O
result	O
in	O
faster	O
run	O
time	O
.	O

First	O
,	O
extract	O
the	O
inverse	O
indices	B-API
and	O
counts	O
of	O
each	O
unique	B-API
item	O
.	O

Essentially	O
I	O
want	O
the	O
code	O
to	O
go	O
through	O
the	O
list	O
of	O
indices	B-API
I	O
have	O
and	O
find	O
the	O
index	O
of	O
the	O
lowest	O
value	O
.	O

You	O
can	O
broadcast	B-API
that	O
into	O
an	O
array	O
using	O
expressions	O
,	O
for	O
example	O
#CODE	O

Sorry	O
,	O
my	O
question	O
more	O
specifically	O
was	O
how	O
I	O
can	O
get	O
the	O
indices	B-API
of	O
the	O
True	O
booleans	O
in	O
the	O
array	O
?	O

If	O
I	O
use	O
the	O
above	O
test	O
on	O
the	O
absolute	B-API
values	O
of	O
the	O
angles	O
to	O
be	O
tested	O
,	O
everything	O

`	O
np.arange	B-API
(	O
K	O
)	O
[	O
None	O
,	O
None	O
,	O
:]	O
+	O
k1	O
`	O
is	O
(	O
L	O
,	O
1	O
,	O
K	O
)	O
,	O
so	O
we	O
need	O
to	O
tile	B-API
it	O
#CODE	O

I	O
have	O
the	O
diagonal	B-API
elements	O
what	O
I	O
need	O
are	O
the	O
off	O
diagonal	B-API
ones	B-API

The	O
returned	O
gradient	B-API
hence	O
has	O

To	O
be	O
honest	O
,	O
I	O
think	O
the	O
`	O
masked_array	O
`	O
constructor	O
ought	O
to	O
broadcast	B-API
the	O
mask	O
against	O
the	O
array	O
internally	O
-	O
I	O
might	O
consider	O
making	O
a	O
pull	O
request	O
.	O

"	O
In	O
the	O
first	O
case	O
the	O
gradient	B-API
is	O
1	O
mV	O
/	O
ms	O
,	O
in	O
the	O
second	O
case	O
it	O
is	O
50	O
mV	O
/	O
ms	O
.	O

If	O
True	O
,	O
uses	O
the	O
old	O
behavior	O
from	O
Numeric	O
,	O
(	O
correlate	B-API
(	O
a	O
,	O
v	O
)	O
==	O
correlate	B-API
(	O
v	O
,	O
a	O
)	O
,	O
and	O
the	O
conjugate	O
is	O
not	O
taken	O
for	O
complex	O
arrays	O
)	O
.	O

Why	O
don't	O
you	O
just	O
compress	B-API
the	O
files	O
with	O
the	O
built-in	O
`	O
gzip	O
`	O
module	O
?	O

So	O
you	O
need	O
to	O
write	O
some	O
function	O
that	O
convert	O
a	O
poly	B-API
parameters	O
array	O
to	O
a	O
latex	O
string	O
,	O
here	O
is	O
an	O
example	O
:	O
#CODE	O

In	O
your	O
example	O
,	O
the	O
square	O
root	O
is	O
calculated	O
by	O
evaluating	O
the	O
the	O
module	O
and	O
the	O
argument	O
of	O
your	O
complex	O
number	O
(	O
essentially	O
via	O
the	O
log	B-API
function	O
,	O
which	O
returns	O
log	B-API
(	O
module	O
)	O
+	O
i	O
phase	O
)	O
.	O

I	O
am	O
trying	O
to	O
run	O
hstack	B-API
to	O
join	B-API
a	O
column	O
of	O
integer	O
values	O
to	O
a	O
list	O
of	O
columns	O
created	O
by	O
a	O
TF-IDF	O
(	O
so	O
I	O
can	O
eventually	O
use	O
all	O
of	O
these	O
columns	O
/	O
features	O
in	O
a	O
classifier	O
)	O
.	O

The	O
only	O
indices	B-API
in	O
my	O
code	O
are	O
"	O
index	O
"	O
,	O
which	O
is	O
an	O
integer	O
from	O
a	O
"	O
range	O
"	O
generator	O
;	O
and	O
"	O
id	O
"	O
,	O
which	O
is	O
pulled	O
from	O
a	O
list	O
of	O
integers	O
.	O

How	O
to	O
pass	O
these	O
`	O
norm	B-API
`	O
and	O
`	O
cmap	O
`	O
parameters	O
in	O
matplotlib	O
to	O
`	O
plt.show	O
`	O
or	O
`	O
imshow()	O
`	O
?	O

You	O
need	O
to	O
call	O
the	O
NumPy	O
array's	O
`	O
sum	B-API
`	O
method	O
,	O
not	O
the	O
plain	O
Python	O
builtin	O
`	O
sum	B-API
`	O
function	O
,	O
in	O
order	O
to	O
take	O
advantage	O
of	O
NumPy	O
:	O
#CODE	O

Forget	O
about	O
the	O
C	O
stack	B-API
,	O
numpy	O
objects	O
can't	O
use	O
it	O
.	O

If	O
the	O
sum	B-API
of	O
the	O
'	O
dot	B-API
'	O
becomes	O
too	O
large	O
for	O
the	O
`	O
dtype	B-API
`	O
,	O
it	O
can	O
be	O
negative	O
,	O
producing	O
a	O
`	O
nan	O
`	O
when	O
passed	O
through	O
`	O
sqrt	B-API
`	O
.	O

This	O
is	O
similar	O
to	O
those	O
Knapsack	O
and	O
subset	O
sum	B-API
problems	O
.	O

You	O
can	O
use	O
the	O
append	B-API
function	O
as	O
he	O
has	O
defined	O
.	O

This	O
can	O
be	O
particularly	O
tricky	O
when	O
trying	O
to	O
append	B-API
to	O
a	O
numpy	O
array	O
quickly	O
.	O

I	O
have	O
a	O
question	O
regarding	O
to	O
the	O
`	O
fft	B-API
`	O
and	O
`	O
ifft	B-API
`	O
functions	O
.	O

and	O
arrays	O
filled	O
with	O
zeros	B-API
:	O
#CODE	O

As	O
others	O
have	O
hinted	O
at	O
your	O
signals	O
must	O
have	O
a	O
large	O
nonzero	B-API
component	O
.	O

The	O
polynomial	B-API
results	O
will	O
still	O
expose	O
logarithmical	O
growth	O
(	O
since	O
`	O
log	B-API
x^n	O
=	O
n	O
*	O
log	B-API
x	O
`)	O
,	O
but	O
the	O
exponential	O
curve	O
will	O
transform	O
into	O
a	O
proper	O
straight	O
line	O
(	O
`	O
log	B-API
exp	B-API
(	O
x	O
)	O
=	O
x	O
`)	O
.	O

Or	O
,	O
better	O
just	O
directly	O
index	O
into	O
the	O
output	O
array	O
with	O
the	O
row	O
and	O
column	O
indices	B-API
-	O
#CODE	O

So	O
for	O
now	O
,	O
I	O
just	O
changed	O
the	O
max	B-API
(	O
z	O
)	O
to	O
a	O
number	O
that	O
I	O
know	O
is	O
the	O
max	B-API
(	O
1567	O
)	O
.	O

The	O
`	O
add	B-API
`	O
operation	O
does	O
not	O
do	O
the	O
same	O
thing	O
as	O
`	O
join	B-API
`	O
.	O

You	O
don't	O
specify	O
`	O
x	O
`	O
or	O
`	O
y	O
`	O
,	O
and	O
your	O
`	O
mat	B-API
[:	O
,	O
i+1	O
]`	O
indexing	O
will	O
not	O
work	O
with	O
a	O
structured	O
array	O
.	O

This	O
is	O
because	O
in	O
some	O
cases	O
it's	O
not	O
just	O
NaNs	O
and	O
1s	O
,	O
but	O
other	O
integers	O
,	O
which	O
gives	O
a	O
std	B-API
>	O
0	O
.	O
