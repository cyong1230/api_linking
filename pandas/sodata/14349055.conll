making	O
matplotlib	O
graphs	O
look	O
like	O
R	O
by	O
default	O
?	O

Is	O
there	O
a	O
way	O
to	O
make	O
`	O
matplotlib	O
`	O
behave	O
identically	O
to	O
R	O
,	O
or	O
almost	O
like	O
R	O
,	O
in	O
terms	O
of	O
plotting	O
defaults	O
?	O

For	O
example	O
R	O
treats	O
its	O
axes	O
pretty	O
differently	O
from	O
`	O
matplotlib	O
`	O
.	O

The	O
following	O
histogram	O

has	O
"	O
floating	O
axes	O
"	O
with	O
outward	O
ticks	O
,	O
such	O
that	O
there	O
are	O
no	O
inner	O
ticks	O
(	O
unlike	O
`	O
matplotlib	O
`)	O
and	O
the	O
axes	O
do	O
not	O
cross	O
"	O
near	O
"	O
the	O
origin	O
.	O

Also	O
,	O
the	O
histogram	O
can	O
"	O
spillover	O
"	O
to	O
values	O
that	O
are	O
not	O
marked	O
by	O
the	O
tick	O
-	O
e.g.	O
the	O
x-axis	O
ends	O
at	O
3	O
but	O
the	O
histograms	O
extends	O
slightly	O
beyond	O
it	O
.	O

How	O
can	O
this	O
be	O
achieved	O
automatically	O
for	O
all	O
histograms	O
in	O
`	O
matplotlib	O
`	O
?	O

Related	O
question	O
:	O
scatter	O
plots	O
and	O
line	O
plots	O
have	O
different	O
default	O
axes	O
settings	O
in	O
R	O
,	O
for	O
example	O
:	O

There	O
no	O
inner	O
ticks	O
again	O
and	O
the	O
ticks	O
face	O
outward	O
.	O

Also	O
,	O
the	O
ticks	O
start	O
slightly	O
after	O
the	O
origin	O
point	O
(	O
where	O
the	O
y	O
and	O
x	O
axes	O
cross	O
at	O
the	O
bottom	O
left	O
of	O
the	O
axes	O
)	O
and	O
the	O
ticks	O
end	O
slightly	O
before	O
the	O
axes	O
end	O
.	O

This	O
way	O
the	O
labels	O
of	O
the	O
lowest	O
x-axis	O
tick	O
and	O
lowest	O
y-axis	O
tick	O
can't	O
really	O
cross	O
,	O
because	O
there's	O
a	O
space	O
between	O
them	O
and	O
this	O
gives	O
the	O
plots	O
a	O
very	O
elegant	O
clean	O
look	O
.	O

Note	O
that	O
there's	O
also	O
considerably	O
more	O
space	O
between	O
the	O
axes	O
ticklabels	O
and	O
the	O
ticks	O
themselves	O
.	O

Also	O
,	O
by	O
default	O
there	O
are	O
no	O
ticks	O
on	O
the	O
non-labeled	O
x	O
or	O
y	O
axes	O
,	O
meaning	O
the	O
y-axis	O
on	O
the	O
left	O
that	O
is	O
parallel	O
to	O
the	O
labeled	O
y-axis	O
on	O
the	O
right	O
has	O
no	O
ticks	O
,	O
and	O
same	O
for	O
the	O
x-axis	O
,	O
again	O
removing	O
clutter	O
from	O
the	O
plots	O
.	O

Is	O
there	O
a	O
way	O
to	O
make	O
matplotlib	O
look	O
like	O
this	O
?	O

And	O
in	O
general	O
to	O
look	O
by	O
default	O
as	O
much	O
as	O
default	O
R	O
plots	O
?	O

I	O
like	O
`	O
matplotlib	O
`	O
a	O
lot	O
but	O
I	O
think	O
the	O
R	O
defaults	O
/	O
out-of-the-box	O
plotting	O
behavior	O
really	O
have	O
gotten	O
things	O
right	O
and	O
its	O
default	O
settings	O
rarely	O
lead	O
to	O
overlapping	O
tick	O
labels	O
,	O
clutter	O
or	O
squished	O
data	O
,	O
so	O
I	O
would	O
like	O
the	O
defaults	O
to	O
be	O
as	O
much	O
like	O
that	O
as	O
possible	O
.	O

I	O
would	O
check	O
out	O
Bokeh	O
which	O
aims	O
to	O
"	O
provide	O
a	O
compelling	O
Python	O
equivalent	O
of	O
ggplot	O
in	O
R	O
"	O
.	O

Example	O
here	O

EDIT	O
:	O
Also	O
check	O
out	O
Seaborn	O
,	O
which	O
attempts	O
to	O
reproduce	O
the	O
visual	O
style	O
and	O
syntax	O
of	O
ggplot2	O
.	O

Edit	O
1	O
year	O
later	O
:	O

With	O
`	O
seaborn	O
`	O
,	O
the	O
example	O
below	O
becomes	O
:	O

@CODE	O

Pretty	O
dang	O
easy	O
.	O

Original	O
post	O
:	O

This	O
blog	O
post	O
is	O
the	O
best	O
I've	O
seen	O
so	O
far	O
.	O

http://messymind.net/making-matplotlib-look-like-ggplot	O

It	O
doesn't	O
focus	O
on	O
your	O
standard	O
R	O
plots	O
like	O
you	O
see	O
in	O
most	O
of	O
the	O
"	O
getting	O
started	O
"	O
-type	O
examples	O
.	O

Instead	O
it	O
tries	O
to	O
emulate	O
the	O
style	O
of	O
ggplot2	O
,	O
which	O
seems	O
to	O
be	O
nearly	O
universally	O
heralded	O
as	O
stylish	O
and	O
well-designed	O
.	O

To	O
get	O
the	O
axis	O
spines	O
like	O
you	O
see	O
the	O
in	O
bar	O
plot	O
,	O
try	O
to	O
follow	O
one	O
of	O
the	O
first	O
few	O
examples	O
here	O
:	O
http://www.loria.fr/~rougier/coding/gallery	O

Lastly	O
,	O
to	O
get	O
the	O
axis	O
tick	O
marks	O
pointing	O
outward	O
,	O
you	O
can	O
edit	O
your	O
`	O
matplotlibrc	O
`	O
files	O
to	O
say	O
`	O
xtick.direction	O
:	O
out	O
`	O
and	O
`	O
ytick.direction	O
:	O
out	O
`	O
.	O

Combining	O
these	O
concepts	O
together	O
we	O
get	O
something	O
like	O
this	O
:	O

@CODE	O

The	O
position	O
of	O
the	O
spines	O
can	O
be	O
specified	O
a	O
number	O
of	O
ways	O
.	O

If	O
you	O
run	O
the	O
code	O
above	O
in	O
IPython	O
,	O
you	O
can	O
then	O
do	O
`axes.spines['bottom	O
'	O
]	O
.set_position	O
?	O

`	O
to	O
see	O
all	O
of	O
your	O
options	O
.	O

So	O
yeah	O
.	O

It's	O
not	O
exactly	O
trivial	O
,	O
but	O
you	O
can	O
get	O
close	O
.	O

#	O

#	O

#	O

#	O

#	O

#	O

EDIT	O
10	O
/	O
14	O
/	O
2013	O
:	O

For	O
information	O
,	O
ggplot	O
has	O
now	O
been	O
implemented	O
for	O
python	O
(	O
built	O
on	O
matplotlib	O
)	O
.	O

See	O
this	O
blog	O
or	O
go	O
directly	O
to	O
the	O
github	O
page	O
of	O
the	O
project	O
for	O
more	O
information	O
and	O
examples	O
.	O

#	O

#	O

#	O

#	O

#	O

#	O

To	O
my	O
knowledge	O
,	O
there	O
is	O
no	O
built-in	O
solution	O
in	O
matplotlib	O
that	O
will	O
directly	O
give	O
to	O
your	O
figures	O
a	O
similar	O
look	O
than	O
the	O
ones	O
made	O
with	O
R	O
.	O

Some	O
packages	O
,	O
like	O
mpltools	O
,	O
adds	O
support	O
for	O
stylesheets	O
using	O
Matplotlib	O
s	O
rc-parameters	O
,	O
and	O
can	O
help	O
you	O
to	O
obtain	O
a	O
ggplot	O
look	O
(	O
see	O
the	O
ggplot	O
style	O
for	O
an	O
example	O
)	O
.	O

However	O
,	O
since	O
everything	O
can	O
be	O
tweaked	O
in	O
matplotlib	O
,	O
it	O
might	O
be	O
easier	O
for	O
you	O
to	O
directly	O
develop	O
your	O
own	O
functions	O
to	O
achieve	O
exactly	O
what	O
you	O
want	O
.	O

As	O
an	O
example	O
,	O
below	O
is	O
a	O
snippet	O
that	O
will	O
allow	O
you	O
to	O
easily	O
customize	O
the	O
axes	O
of	O
any	O
matplotlib	O
plot	O
.	O

@CODE	O

EDIT	O
:	O
for	O
non	O
touching	O
spines	O
,	O
see	O
the	O
function	O
below	O
which	O
induces	O
a	O
10	O
pts	O
displacement	O
of	O
the	O
spines	O
(	O
taken	O
from	O
this	O
example	O
on	O
the	O
matplotlib	O
website	O
)	O
.	O

@CODE	O

For	O
example	O
,	O
the	O
code	O
and	O
the	O
two	O
plots	O
below	O
show	O
you	O
the	O
default	O
output	O
from	O
matplotib	O
(	O
on	O
the	O
left	O
)	O
,	O
and	O
the	O
output	O
when	O
the	O
functions	O
are	O
called	O
(	O
on	O
the	O
right	O
):	O

@CODE	O

Of	O
course	O
,	O
it	O
will	O
take	O
time	O
for	O
you	O
to	O
figure	O
out	O
which	O
parameters	O
have	O
to	O
be	O
tweaked	O
in	O
matplotlib	O
to	O
make	O
your	O
plots	O
look	O
exactly	O
like	O
the	O
R	O
ones	O
,	O
but	O
I	O
am	O
not	O
sure	O
there	O
are	O
other	O
options	O
right	O
now	O
.	O

Here's	O
a	O
blog	O
post	O
you	O
may	O
be	O
interested	O
to	O
read	O
:	O

Plotting	O
for	O
Pandas	O
GSoC2012	O

http://pandasplotting.blogspot.com	O

Decided	O
to	O
try	O
to	O
implement	O
a	O
ggplot2	O
type	O
plotting	O
interface	O
...	O

Not	O
yet	O
sure	O
how	O
much	O
of	O
the	O
ggplot2	O
functionality	O
to	O
implement	O
...	O

The	O
author	O
forked	O
pandas	O
and	O
built	O
what	O
looks	O
like	O
quite	O
a	O
lot	O
of	O
ggplot2-style	O
grammar	O
for	O
pandas	O
.	O

@CODE	O

The	O
pandas	O
fork	O
is	O
here	O
:	O
https://github.com/orbitfold/pandas	O

Seems	O
like	O
meat	O
of	O
the	O
code	O
to	O
make	O
the	O
R-influenced	O
graphics	O
is	O
in	O
a	O
file	O
called	O
`	O
rplot.py	O
`	O
which	O
can	O
be	O
found	O
in	O
a	O
branch	O
in	O
the	O
repo	O
.	O

@CODE	O

Link	O
to	O
the	O
branch	O
:	O

https://github.com/orbitfold/pandas/blob/rplot/pandas/tools/rplot.py	O

I	O
thought	O
this	O
was	O
really	O
cool	O
,	O
but	O
I	O
can't	O
figure	O
out	O
if	O
this	O
project	O
is	O
being	O
maintained	O
or	O
not	O
.	O

The	O
last	O
commit	O
was	O
a	O
while	O
ago	O
.	O

Setting	O
spines	O
in	O
matplotlibrc	O
explains	O
why	O
it	O
is	O
not	O
possible	O
to	O
simply	O
edit	O
Matplotlib	O
defaults	O
to	O
produce	O
R-style	O
histograms	O
.	O

For	O
scatter	O
plots	O
,	O

R	O
style	O
data-axis	O
buffer	O
in	O
matplotlib	O
and	O
In	O
matplotlib	O
,	O
how	O
do	O
you	O
draw	O
R-style	O
axis	O
ticks	O
that	O
point	O
outward	O
from	O
the	O
axes	O
?	O

show	O
some	O
defaults	O
that	O
can	O
be	O
changed	O
to	O
give	O
a	O
more	O
R-ish	O
look	O
.	O

Building	O
off	O
some	O
of	O
the	O
other	O
answers	O
,	O
the	O
following	O
function	O
does	O
a	O
decent	O
job	O
of	O
mimicking	O
R's	O
histogram	O
style	O
,	O
assuming	O
you've	O
called	O
`	O
`	O
on	O
your	O
`	O
Axes	O
`	O
instance	O
with	O
`facecolor='none	O
'`	O
.	O

@CODE	O

matplotlib	O
>	O
=	O
1.4	O
suports	O
styles	O
(	O
and	O
ggplot-style	O
is	O
build	O
in	O
):	O

@CODE	O

`	O
import	O
matplotlib.pyplot	O
as	O
plt	O

plt.style.use('ggplot	O
')`	O

do	O
something	O
plot	O
here	O
,	O
and	O
enjoy	O
it	O
