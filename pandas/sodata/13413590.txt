How to drop rows of Pandas dataframe whose value of certain column is NaN
I have a df : @CODE
Then I just want the records whose `EPS` is not `NaN`, that is, `df.drop(....)` will return the dataframe as below: @CODE
How to do that ?
dropna: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html
`df.dropna(subset = ['column1_name', 'column2_name', 'column3_name'])`
Don't `drop`. Just take rows where `EPS` is finite : @CODE
thanks. Good solution.
I'd recommend using `pandas.notnull` instead of `np.isfinite`
@WesMcKinney Does this not then disregard `0` values then as well, rather than just `NaN`?
@shootingstars The docs say that pandas.notnull is a direct replacement for np.isfinite. In this case, null does not mean zero.
Is there any advantage to indexing and copying over dropping?
This question is already resolved, but... 
...also consider the solution suggested by Wouter in his original comment . The ability to handle missing data, including `dropna()`, is built into pandas explicitly. Aside from potentially improved performance over doing it manually, these functions also come with a variety of options which may be useful. @CODE
There are also other options (See docs at http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html ), including dropping columns instead of rows. 
Pretty handy!
you can also use `df.dropna(subset = ['column_name'])`. Hope that saves at least one person the extra 5 seconds of 'what am I doing wrong'. Great answer, +1
@JamesTobin, I just spent 20 minutes to write a function for that! [The official documentation](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html) was very cryptic: "Labels along other axis to consider, e.g. if you are dropping rows these would be a list of columns to include". I was unable to understand, what they meant...
I know this has already been answered, but just for the sake of a purely pandas solution to this specific question as opposed to the general description from Aman (which was wonderful) and in case anyone else happens upon this: @CODE
Actually, the specific answer would be: `df.dropna(subset=['EPS'])` (based on the general description of Aman, of course this does also work)
`notnull` is also what Wes (author of Pandas) suggested in his comment on another answer.
For some reason none of the previously submitted answers worked for me. This basic solution did: @CODE
Though of course that will drop rows with negative numbers, too. So if you want those it's probably smart to add this after, too. @CODE
You could use dataframe method notnull or inverse of isnull , or numpy.isnan : @CODE
