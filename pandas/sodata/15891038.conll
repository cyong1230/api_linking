Pandas	O
:	O
change	O
data	O
type	O
of	O
columns	O

I	O
want	O
to	O
convert	O
a	O
table	O
,	O
represented	O
as	O
a	O
list	O
of	O
lists	O
,	O
into	O
a	O
Pandas	O
DataFrame	B-API
.	O

As	O
an	O
extremely	O
simplified	O
example	O
:	O

@CODE	O

What	O
is	O
the	O
best	O
way	O
to	O
convert	O
the	O
columns	O
to	O
the	O
appropriate	O
types	O
,	O
in	O
this	O
case	O
columns	O
2	O
and	O
3	O
into	O
floats	O
?	O

Is	O
there	O
a	O
way	O
to	O
specify	O
the	O
types	O
while	O
converting	O
to	O
DataFrame	B-API
?	O

Or	O
is	O
it	O
better	O
to	O
create	O
the	O
DataFrame	B-API
first	O
and	O
then	O
loop	O
through	O
the	O
columns	O
to	O
change	O
the	O
type	O
for	O
each	O
column	O
?	O

Ideally	O
I	O
would	O
like	O
to	O
do	O
this	O
in	O
a	O
dynamic	O
way	O
because	O
there	O
can	O
be	O
hundreds	O
of	O
columns	O
and	O
I	O
don't	O
want	O
to	O
specify	O
exactly	O
which	O
columns	O
are	O
of	O
which	O
type	O
.	O

All	O
I	O
can	O
guarantee	O
is	O
that	O
each	O
columns	O
contains	O
values	O
of	O
the	O
same	O
type	O
.	O

How	O
about	O
this	O
?	O

`	O
a	O
=	O
[[	O
'	O
a	O
'	O
,	O
'	O
1.2	O
'	O
,	O
'	O
4.2	O
'	O
]	O
,	O
[	O
'	O
b	O
'	O
,	O
'	O
70	O
'	O
,	O
'	O
0.03	O
'	O
]	O
,	O
[	O
'	O
x	O
'	O
,	O
'	O
5	O
'	O
,	O
'	O
0	O
'	O
]]	O

df	B-API
=	O
pd.DataFrame	O
(	O
a	O
,	O
columns=['one	O
'	O
,	O
'	O
two	O
'	O
,	O
'	O
three	O
'	O
]	O
)	O

df	B-API

Out[16	O
]:	O

one	O
two	O
three	O

0	O
a	O
1.2	O
4.2	O

1	O
b	O
70	O
0.03	O

2	O
x	O
5	O
0	O

df.dtypes	O

Out[17	O
]:	O

one	O
object	O

two	O
object	O

three	O
object	O

df[['two	O
'	O
,	O
'	O
three	O
'	O
]]	O
=	O
df[['two	O
'	O
,	O
'	O
three	O
'	O
]]	O
.astype	O
(	O
float	O
)	O

df.dtypes	O

Out[19	O
]:	O

one	O
object	O

two	O
float64	O

three	O
float64	O

`	O

As	O
mentioned	O
in	O
the	O
comments	O
above	O
,	O
`	O
convert_objects	B-API
`	O
can	O
be	O
used	O
to	O
coerce	O
the	O
`	O
object	O
`	O
columns	O
in	O
a	O
DataFrame	B-API
to	O
a	O
more	O
suitable	O
datatype	O
.	O

For	O
example	O
,	O
to	O
convert	O
columns	O
with	O
object	O
type	O
to	O
suitable	O
numeric	O
datatypes	O
,	O
use	O
:	O

@CODE	O

The	O
advantage	O
of	O
this	O
method	O
is	O
that	O
it	O
can	O
be	O
applied	O
to	O
whole	O
DataFrame	B-API
in	O
one	O
go	O
:	O
there's	O
no	O
need	O
to	O
select	O
columns	O
individually	O
and	O
use	O
`	O
astype	B-API
`	O
.	O

If	O
a	O
column	O
can't	O
be	O
converted	O
to	O
a	O
non-object	O
datatype	O
,	O
it	O
is	O
just	O
left	O
alone	O
.	O

For	O
example	O
,	O
the	O
method	O
will	O
to	O
coerce	O
the	O
columns	O
of	O
a	O
DataFrame	B-API
which	O
hold	O
numerical	O
strings	O
to	O
appropriate	O
numeric	O
datatypes	O
:	O

@CODE	O

Here	O
it	O
chooses	O
the	O
most	O
suitable	O
numeric	O
type	O
for	O
the	O
values	O
.	O

Column	O
`	O
a	O
`	O
could	O
not	O
be	O
converted	O
to	O
a	O
numeric	O
(	O
or	O
date	O
)	O
type	O
and	O
so	O
is	O
left	O
untouched	O
.	O

Column	O
`	O
b	O
`	O
contains	O
only	O
integers	O
and	O
so	O
is	O
converted	O
to	O
`	O
int64	O
`	O
type	O
.	O

Because	O
it	O
contains	O
floating	O
point	O
number	O
strings	O
,	O
the	O
values	O
in	O
column	O
`	O
c	O
`	O
are	O
cast	O
to	O
the	O
`	O
float64	O
`	O
datatype	O
.	O

This	O
method	O
returns	O
a	O
copy	O
of	O
the	O
DataFrame	B-API
.	O
