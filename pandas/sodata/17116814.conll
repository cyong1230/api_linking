pandas	O
:	O
How	O
do	O
I	O
split	O
text	O
in	O
a	O
column	O
into	O
multiple	O
rows	O
?	O

I'm	O
working	O
with	O
a	O
large	O
csv	O
file	O
and	O
the	O
next	O
to	O
last	O
column	O
has	O
a	O
string	O
of	O
text	O
that	O
I	O
want	O
to	O
split	O
by	O
a	O
specific	O
delimiter	O
.	O

I	O
was	O
wondering	O
if	O
there	O
is	O
a	O
simple	O
way	O
to	O
do	O
this	O
using	O
pandas	O
or	O
python	O
?	O

@CODE	O

I	O
want	O
to	O
split	O
by	O
the	O
space	O
(	O
'	O
')	O
and	O
then	O
the	O
colon	O
(	O
'	O
:	O
')	O
in	O
the	O
'	O
Seatblocks	O
'	O
column	O
,	O
but	O
each	O
cell	O
would	O
result	O
in	O
a	O
different	O
number	O
of	O
columns	O
.	O

I	O
have	O
a	O
function	O
to	O
rearrange	O
the	O
columns	O
so	O
the	O
Seatblocks	O
column	O
is	O
at	O
the	O
end	O
of	O
the	O
sheet	O
,	O
but	O
I'm	O
not	O
sure	O
what	O
to	O
do	O
from	O
there	O
.	O

I	O
can	O
do	O
it	O
in	O
excel	O
with	O
the	O
built	O
in	O
'	O
text-to-columns	O
'	O
function	O
and	O
a	O
quick	O
macro	O
,	O
but	O
my	O
dataset	O
has	O
too	O
many	O
records	O
for	O
excel	O
to	O
handle	O
.	O

Ultimately	O
,	O
I	O
want	O
to	O
take	O
records	O
such	O
John	O
Lennon's	O
and	O
create	O
multiple	O
lines	O
,	O
with	O
the	O
info	O
from	O
each	O
set	O
of	O
seats	O
on	O
a	O
separate	O
line	O
.	O

This	O
splits	O
the	O
Seatblocks	O
by	O
space	O
and	O
gives	O
each	O
its	O
own	O
row	O
.	O

@CODE	O

Or	O
,	O
to	O
give	O
each	O
colon-separated	O
string	O
in	O
its	O
own	O
column	O
:	O

@CODE	O

This	O
is	O
a	O
little	O
ugly	O
,	O
but	O
maybe	O
someone	O
will	O
chime	O
in	O
with	O
a	O
prettier	O
solution	O
.	O

Differently	O
from	O
Dan	O
,	O
I	O
consider	O
his	O
answer	O
quite	O
elegant	O
...	O
but	O
unfortunately	O
it	O
is	O
also	O
very	O
very	O
inefficient	O
.	O

So	O
,	O
since	O
the	O
question	O
mentioned	O
"	O
a	O
large	O
csv	O
file	O
"	O
,	O
let	O
me	O
suggest	O
to	O
try	O
in	O
a	O
shell	O
Dan's	O
solution	O
:	O

@CODE	O

...	O
compared	O
to	O
this	O
alternative	O
:	O

@CODE	O

...	O
and	O
this	O
:	O

@CODE	O

The	O
second	O
simply	O
refrains	O
from	O
allocating	O
100	O
000	O
Series	B-API
,	O
and	O
this	O
is	O
enough	O
to	O
make	O
it	O
around	O
10	O
times	O
faster	O
.	O

But	O
the	O
third	O
solution	O
,	O
which	O
somewhat	O
ironically	O
wastes	O
a	O
lot	O
of	O
calls	O
to	O
(	O
it	O
is	O
called	O
once	O
per	O
column	O
per	O
row	O
,	O
so	O
three	O
times	O
more	O
than	O
for	O
the	O
others	O
two	O
solutions	O
)	O
,	O
is	O
around	O
40	O
times	O
faster	O
than	O
the	O
first	O
,	O
because	O
it	O
even	O
avoids	O
to	O
instance	O
the	O
100	O
000	O
lists	O
.	O

And	O
yes	O
,	O
it	O
is	O
certainly	O
a	O
little	O
ugly	O
...	O

EDIT	O
:	O
this	O
answer	O
suggests	O
how	O
to	O
use	O
"	O
"	O
and	O
to	O
avoid	O
the	O
need	O
for	O
a	O
lambda	O
.	O

The	O
result	O
is	O
something	O
like	O

@CODE	O

which	O
is	O
even	O
more	O
efficient	O
than	O
the	O
third	O
solution	O
,	O
and	O
certainly	O
much	O
more	O
elegant	O
.	O

EDIT	O
:	O
the	O
even	O
simpler	O

@CODE	O

works	O
too	O
,	O
and	O
is	O
almost	O
as	O
efficient	O
.	O
