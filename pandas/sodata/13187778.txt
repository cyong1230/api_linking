Convert pandas dataframe to numpy array, preserving index
I am interested in knowing how to convert a pandas dataframe into a numpy array, including the index, and set the dtypes. 
dataframe: @CODE
convert df to array returns: @CODE
However, I would like: @CODE
(or similar) 
Any suggestions on how to accomplish this? (I don't know if I need 1D or 2D array at this point.) I've seen a few posts that touch on this, but nothing dealing specifically with the dataframe.index. 
I am writing the dataframe disk using to_csv (and reading it back in to create array) as a workaround, but would prefer something more eloquent than my new-to-pandas kludging.
You can use the `to_records` method, but have to play around a bit with the dtypes if they are not what you want from the get go. In my case, having copied your DF from a string, the index type is string (represented by an `object` dtype in pandas): @CODE
Converting the recarray dtype does not work for me, but one can do this in Pandas already: @CODE
Note that Pandas does not set the name of the index properly (to `ID`) in the exported record array (a bug?), so we profit from the type conversion to also correct for that. 
At the moment Pandas has only 8-byte integers, `i8`, and floats, `f8` (see this issue ).
I would just chain the DataFrame.reset_index() and DataFrame.values functions to get the Numpy representation of the dataframe, including the index: @CODE
To get the dtypes we'd need to transform this ndarray into a structured array using view : @CODE
Pandas has something built in... @CODE
Here is my approach to making a structure array from a pandas DataFrame. 
Create the data frame @CODE
Define function to make a numpy structure array (not a record array) from a pandas DataFrame. @CODE
Use `reset_index` to make a new data frame that includes the index as part of its data. Convert that data frame to a structure array. @CODE
