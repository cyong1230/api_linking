Why	O
do	O
you	O
say	O
that	O
reusing	O
plt.figure	B-API
will	O
lead	O
to	O
memory	O
issues	O
?	O

I	O
am	O
using	O
matplotlib.pyplot	B-API
to	O
create	O
histograms	O
.	O

I	O
corrected	O
this	O
using	O
the	O
`	O
set_position	B-API
`	O
command	O
.	O

`	O
np.asarray	B-API
(	O
Image.fromarray	O
(	O
image.astype	O
(	O
'	O
uint8	O
')	O
*255	O
)	O
.convert	B-API
(	O
'	O
L	O
'))	O
.astype	B-API
(	O
float	O
)	O
/	O
255	O
`	O

python	O
:	O
ImportError	O
:	O
No	O
module	O
named	O
patheffects	B-API

import	O
matplotlib.patheffects	B-API

`	O
plt.bar	B-API
(	O
left	O
,	O
height	O
,	O
width=	O
0.8	O
,	O
bottom=None	O
,	O
hold=None	O
,	O
**	O
kwargs	O
)`	O

I	O
typically	O
have	O
them	O
in	O
the	O
ax.plot	B-API
line	O
.	O

my	O
attempt	O
to	O
define	O
the	O
aspect	O
ratio	O
for	O
both	O
`	O
y	O
`	O
-axis	O
while	O
using	O
`	O
twinx	B-API
`	O
(	O
which	O
does	O
not	O
work	O
)	O

For	O
each	O
of	O
this	O
point	O
,	O
I	O
can	O
calculate	O
the	O
value	O
of	O
my	O
unordered	O
categorical	B-API
variable	O
X	O
.	O

You	O
can	O
achieve	O
it	O
using	O
the	O
`	O
ScalarFormatter	B-API
`	O
:	O
#CODE	O

@USER	O
how	O
is	O
hexbin	B-API
useful	O
here	O
?	O

Hmm	O
,	O
doesn't	O
look	O
like	O
there	O
is	O
anything	O
obvious	O
is	O
rcParams	B-API
or	O
the	O
matplotlibrc	O
file	O
.	O

What	O
you're	O
doing	O
is	O
aliasing	O
(	O
"	O
renaming	O
")	O
matplotlib.font_manager	B-API
to	O
FontProperties	B-API
so	O
calling	O
fontP	O
=	O
FontProperties()	B-API
is	O
actually	O
calling	O
matplotlib.font_manager	B-API
which	O
is	O
not	O
callable	O
.	O

I	O
think	O
changing	O
the	O
arrowstyle	B-API
will	O
help	O
here	O
.	O

plt.plot	B-API
(	O
x	O
,	O
z	O
)	O

`	O
plt.tight_layout	B-API
(	O
pad=	O
2.0	O
,	O
h_pad=	O
6.5	O
,	O
w_pad=	O
4.5	O
)`	O
gives	O
the	O
desired	O
result	O
(	O
Fig.3	O
)	O
.	O

Should	O
work	O
without	O
the	O
line	O
`	O
X	O
,	O
Y	O
=	O
np.meshgrid	B-API
(	O
X	O
,	O
Y	O
)`	O
.	O

O1	O
=	O
np.array	B-API
(	O
new_OI	O
)	O

There's	O
no	O
need	O
for	O
a	O
vector	O
representation	O
of	O
each	O
pixel	O
,	O
and	O
`	O
imshow	B-API
`	O
will	O
be	O
much	O
faster	O
.	O

So	O
definitely	O
not	O
in	O
an	O
equidistant	O
meshgrid	B-API
.	O

Inserted	O
after	O
pyplot.savefig()	B-API
and	O
the	O
problem	O
seems	O
to	O
be	O
solved	O
.	O

`	O
numpy.polyfit	B-API
(	O
x	O
,	O
y	O
,	O
deg	O
,	O
rcond=None	O
,	O
full=False	O
,	O
w=None	O
,	O
cov=False	O
)`	O

Simply	O
putting	O
in	O
:	O
`	O
bbox	O
=d	O
ict	O
(	O
facecolor=	O
'	O
blue	O
'	O
,	O
alpha=	O
0.5	O
)`	O
in	O
the	O
ax.text	B-API
statement	O
changes	O
the	O
color	O
.	O

ax.set_xticks	B-API
([	O
"	O
1975-01-01	O
"	O
,	O
"	O
1980-01-01	O
"	O
,	O
"	O
1985-01-01	O
"	O
,	O
"	O
1990-01-01	O
"	O
,	O
"	O
1995-01-01	O
"	O
,	O

Also	O
,	O
don't	O
mix	O
`	O
pyplot	B-API
`	O
with	O
guis	O
(	O
unless	O
you	O
are	O
explicitly	O
using	O
a	O
non-interactive	O
backend	O
)	O
.	O

FuncAnimation	B-API

`	O
x2	O
'	O
=	O
-mu	O
/	O
np.sqrt	B-API
(	O
x	O
**	O
2	O
+	O
y	O
**	O
2	O
+	O
z	O
**	O
2	O
)	O
*	O
x	O
`	O
,	O

matplotlib.pyplot.stem	B-API
(	O
*args	O
,	O
**	O
kwargs	O
)	O

I've	O
confirmed	O
that	O
this	O
works	O
for	O
`	O
plot()	B-API
`	O
as	O
well	O
as	O
`	O
imshow()	B-API
`	O
.	O

PCA	B-API
(	O
X	O
)	O
is	O
not	O
the	O
same	O
thing	O
as	O
PCA	B-API
(	O
X.T	O
)	O
.T	B-API

I	O
should	O
have	O
used	O
OffsetImage	B-API
and	O
AnnotationBbox	B-API
.	O

Using	O
GridSpec	B-API

Try	O
removing	O
that	O
argument	O
from	O
your	O
call	O
to	O
`	O
streamplot	B-API
`	O
.	O

Try	O
``	O
ax.text	B-API
(	O
0	O
,	O
0	O
,	O
'	O
whatever	O
')``	O
.	O

matplotlib	O
tripcolor	B-API
-	O
removing	O
edges	O

`	O
ax.xaxis.get_children()	O
[	O
1	O
]	O
.set_size	B-API
(	O
15	O
)`	O

I	O
have	O
tried	O
lots	O
of	O
different	O
combinations	O
of	O
the	O
ax.plot()	B-API
part	O
,	O
but	O
if	O
I	O
change	O
it	O
to	O
:	O
#CODE	O

but	O
i	O
want	O
to	O
keep	O
the	O
ytick	B-API
marks	O
only	O
on	O
the	O
left	O
hand	O
side	O
.	O
thank	O
you	O
.	O

fig	O
is	O
defined	O
as	O
:	O
`	O
fig	O
=	O
plt.figure()	B-API
`	O

We	O
used	O
the	O
same	O
method	O
,	O
but	O
I	O
somehow	O
missed	O
`	O
set_markeredgewidth	B-API
`	O
.	O

--->	O
29	O
import	O
matplotlib.colorbar	B-API

ax.plot	B-API
(	O
r.date	O
,	O
r.close	O
)	O

plt.plot()	B-API

The	O
`	O
.format	B-API
`	O
form	O
is	O
the	O
preferred	O
way	O
to	O
do	O
string	O
formatting	O
now	O
as	O
opposed	O
to	O
the	O
`	O
%	O
`	O
operator	O
.	O

`	O
GridSpec	B-API
`	O
works	O
for	O
me	O
(	O
`	O
matplotlib	O
`	O
v1.5.0	O
in	O
case	O
it	O
matters	O
):	O
#CODE	O

A	O
search	O
of	O
the	O
`	O
matplotlib.pyplot	B-API
`	O
API	O
documentation	O
does	O
not	O
reveal	O
anything	O
,	O
so	O
I'm	O
afraid	O
you'll	O
have	O
to	O
live	O
with	O
using	O
`	O
matplotlib.patches.Ellipse	B-API
`	O

for	O
why	O
`	O
LinearSegmentedColormap	B-API
`	O
shows	O
strange	O
color	O
,	O
I	O
think	O
this	O
link	O
would	O
be	O
helpful	O
.	O

I	O
did	O
so	O
both	O
in	O
the	O
Windows	O
shell	O
and	O
emacs	O
shell	O
and	O
the	O
same	O
PYTHONPATH	O
is	O
used	O
.	O
doing	O
the	O
rcParams	B-API
both	O
return	O
TkAgg	O
.	O

However	O
,	O
the	O
savefig()	B-API
output	O
is	O
too	O
zoomed	O
out	O
,	O
too	O
general	O
.	O

plt.imshow	B-API
(	O
Xt	O
[	O
0	O
,	O
:]	O
.reshape	B-API
(	O
105,105	O
)	O
.T	B-API
,	O
interpolation=	O
'	O
nearest	O
'	O
,	O
cmap=	O
cm.Greys_r	O
)	O
and	O
it	O
gives	O
me	O
the	O
correct	O
flipped	O
output	O
.	O

See	O
[	O
`	O
matplotlib.pyplot.contourf	B-API
`]	O
(	O
#URL	O
)	O
for	O
example	O
.	O

Why	O
pyplot	B-API
(	O
matplotlib	O
)	O
is	O
joining	O
points	O
randomly	O
?	O

x	O
=	O
np.array	B-API
([	O
1	O
,	O
3	O
,	O
4	O
])	O
,	O
([	O
1	O
,	O
2	O
])	O

`	O
np.arange	B-API
`	O
doc	O

plt.colorbar	B-API
(	O
cs	O
)	O

`	O
tick_params	B-API
`	O
should	O
do	O
it	O
.	O

I	O
have	O
experiemented	O
with	O
turning	O
interactivity	O
on	O
and	O
off	O
via	O
`	O
plt.ioff()	B-API
`	O
,	O
but	O
to	O
no	O
avail	O
.	O

don't	O
do	O
`	O
plt.xticks	B-API
...	O

thx	O
!	O
but	O
in	O
the	O
end	O
this	O
worked	O
:	O
`	O
ax	O
[	O
1	O
]	O
.bar	B-API
(	O
bins	O
[:	O
-1	O
]	O
,	O
1	O
.	O
*hist	O
/	O
N	O
,	O
np.diff	B-API
(	O
bins	O
)	O
,	O
log=True	O
)`	O

For	O
example	O
`	O
griddata	B-API
`	O
,	O
`	O
Rbf	O
`	O
,	O
...	O

It	O
sounds	O
like	O
you	O
would	O
rather	O
have	O
an	O
`	O
axhspan	B-API
`	O
or	O
`	O
axvspan	B-API
`	O
.	O

matplotlib	O
:	O
plt.isinteractive()	B-API
returns	O
0	O
instead	O
of	O
True	O
or	O
False	O
after	O
plt.ion()	B-API
is	O
called	O
,	O
when	O
the	O
script	O
is	O
being	O
run	O
in	O
a	O
terminal	O
?	O

matplotlib	O
FuncAnimation	B-API
input	O

@USER	O
Do	O
I	O
need	O
to	O
pass	O
anything	O
additional	O
to	O
`	O
ColorbarBase()	B-API
`	O
?	O

In	O
some	O
other	O
code	O
,	O
I	O
used	O
the	O
OpenCV	O
`	O
SaveImage	O
`	O
on	O
a	O
single	O
frame	O
to	O
provide	O
a	O
reference	O
for	O
what	O
I	O
would	O
expect	O
from	O
`	O
imshow	B-API
`	O
.	O

AxesSubplot	O
has	O
no	O
attribute	O
hist2d	B-API
-	O
Matplotlib	O

fig	O
=	O
plt.figure()	B-API

customize	O
ticks	O
for	O
AxesImage	B-API
?	O

In	O
addition	O
,	O
"	O
changing	O
plt.figure	B-API
(	O
i	O
)"	O
is	O
not	O
correct	O
.	O

I	O
tried	O
it	O
out	O
.	O
linecollection	B-API
does	O
not	O
appear	O
to	O
work	O
in	O
3D	O
.	O

You	O
can	O
verify	O
it	O
by	O
calling	O
`	O
plt.xlim()	B-API
`	O
both	O
before	O
and	O
after	O
the	O
`	O
pandas.plot()	O
`	O
call	O
.	O

Did	O
you	O
try	O
calling	O
`	O
plt.show()	B-API
`	O
?	O

Edit	O
:	O
My	O
original	O
answer	O
used	O
`	O
ax.scatter	B-API
`	O
.	O

The	O
helper	O
functions	O
date2num()	B-API
,	O
num2date()	B-API
and	O
drange()	B-API
are	O
used	O
to	O
facilitate	O
easy	O
conversion	O
to	O
and	O
from	O
datetime	O
and	O
numeric	O
ranges	O
.	O

Here's	O
an	O
example	O
of	O
how	O
you	O
can	O
display	O
multiple	O
plots	O
side-by-side	O
below	O
a	O
larger	O
one	O
using	O
Gridspec	B-API
:	O
#CODE	O

I	O
only	O
just	O
discovered	O
the	O
awesome	O
that	O
is	O
`	O
matplotlib.mlab.psd()	B-API
`	O
,	O
but	O
I	O
am	O
having	O
one	O
issue	O
,	O
that	O
is	O
:	O
how	O
can	O
I	O
change	O
the	O
frequency	O
range	O
used	O
by	O
the	O
method	O
?	O

Python	O
Matlplotlib	O
errorbar	B-API
:	O
some	O
errors	O
disappear	O

@USER	O
It	O
says	O
:	O
font_manager	B-API
attribute	O
not	O
found	O
o_O	O
.	O

Documentation	O
of	O
legacy	O
`	O
subplot()	B-API
`	O
is	O
[	O
here	O
]	O
(	O
#URL	O
)	O
and	O
`	O
subplots()	B-API
`	O
is	O
[	O
here	O
]	O
(	O
#URL	O
)	O
.	O

I	O
am	O
not	O
completely	O
sure	O
if	O
this	O
is	O
the	O
kind	O
of	O
thing	O
you're	O
looking	O
for	O
,	O
but	O
`	O
legend()	B-API
`	O
inside	O
`	O
matplotlib.pyplot	B-API
`	O
may	O
be	O
able	O
to	O
help	O
you	O
out	O
.	O

Is	O
the	O
PCA	B-API
stuff	O
really	O
relevant	O
?	O

Seaborns	O
clustermap	O
doesn't	O
work	O
with	O
plt.tight_layout()	B-API
.	O

fig	O
=	O
plt.figure	B-API
(	O
**figprops	O
)	O
.	O

From	O
your	O
remark	O
that	O
`	O
datetime	O
(	O
2009	O
,	O
10	O
,	O
7	O
,	O
0	O
)	O
.strftime	B-API
(	O
'	O
%Hz%d%b	O
')`	O
gave	O
the	O
right	O
string	O
I	O
would've	O
thought	O
it	O
worked	O
.	O

yerr	O
=	O
np.array	B-API
([	O
])	O

ax	O
=	O
fig.add_subplot	B-API
(	O
111	O
);	O

plt.subplots	B-API
:	O

(	O
It's	O
not	O
the	O
edgecolor	O
option	O
in	O
pcolormesh	B-API
)	O
#CODE	O

`	O
plt.xlabel	B-API
(	O
u'Wavelength	O
(	O
\u03bc	O
m	O
)')`	O

You	O
may	O
see	O
that	O
how	O
`	O
.ix	B-API
`	O
was	O
used	O
for	O
selecting	O
an	O
interval	O
.	O

I	O
am	O
running	O
the	O
tutorial	O
for	O
pylearn2	O
and	O
I'm	O
getting	O
some	O
errors	O
when	O
it	O
imports	O
`	O
matplotlib.pyplot	B-API
`	O
.	O

then	O
a	O
call	O
to	O
`	O
fig.get_size_inches()	B-API
`	O
gives	O
`	O
[	O
6	O
,	O
7.475	O
]`	O
.	O

I	O
am	O
experiencing	O
the	O
same	O
problem	O
as	O
described	O
in	O
import	O
matplotlib.pyplot	B-API
hangs	O
after	O
updating	O
my	O
matplotlib	O
version	O
`	O
import	O
matplotlib.pyplot	B-API
as	O
plt	O
`	O
hangs	O
while	O
executing	O
`	O
fc-list	O
`	O
.	O

Using	O
`	O
pcolor	B-API
`	O
from	O
matplotlib	O
I	O
am	O
unable	O
to	O
do	O
it	O
because	O
my	O
pc	O
goes	O
easily	O
out	O
of	O
memory	O
(	O
more	O
than	O
8G	O
)	O
..	O

+	O
"	O
plt.plot	B-API
([	O
"	O
+	O
d.x1	O
+	O
"	O
,	O
"	O
+	O
d.x2	O
+	O
"]	O
,	O
[	O
"	O
+	O
d.y1	O
+	O
"	O
,	O
"	O
+	O
d.y2	O
+	O
"]	O
,	O
'	O
k-	O
')	O
\n	O
"	O

I	O
am	O
trying	O
to	O
import	O
Pylab	O
using	O
the	O
`	O
import	O
matplotlib.pyplot	B-API
as	O
plt	O
`	O
.	O

The	O
plt.subplots_adjust	B-API
method	O
:	O
#CODE	O

for	O
i	O
,	O
j	O
in	O
np.where	B-API
(	O
significant	O
):	O
print	O
i	O
,	O
j	O

ax	O
=	O
fig.add_subplot	B-API
(	O
111	O
,	O
projection=	O
'	O
3d	O
')	O

matplotlib.pyplot	B-API
does	O
savefig()	B-API
but	O
not	O
show()	B-API
in	O
python3	O
but	O
works	O
in	O
2.7	O

In	O
this	O
case	O
,	O
pcolor	B-API
and	O
pcolormesh	B-API
will	O
produce	O
the	O
same	O
result	O
.	O

From	O
the	O
documentation	O
of	O
`	O
pyplot.errorbar()	B-API
`	O
:	O

Tkinter	O
and	O
pyplot	B-API
running	O
out	O
of	O
memory	O

You've	O
already	O
created	O
`	O
ax	O
`	O
with	O
`	O
plt.subplots	B-API
`	O
so	O
don't	O
you	O
just	O
need	O
to	O
pass	O
`	O
ax=ax	O
`	O
to	O
`	O
merged2.fcast.plot	O
`	O
instead	O
of	O
setting	O
`	O
ax=	O
...	O

You	O
also	O
should	O
not	O
import	O
pylab	O
,	O
you	O
should	O
do	O
`	O
import	O
matplotlib.pyplot	B-API
as	O
plt	O
`	O

Alright	O
I	O
got	O
it	O
to	O
work	O
by	O
using	O
plt.minorticks_on()	B-API
and	O
changing	O
the	O
range	O
of	O
x	O
to	O
x	O
=	O
np.arange	B-API
(	O
0	O
,	O
361	O
,	O
50	O
,	O
dtype	B-API
=	O
int	O
)	O
....	O

You	O
can	O
control	O
the	O
ratio	O
of	O
the	O
height	O
/	O
width	O
with	O
`	O
ax.set_aspect	B-API
(	O
number	O
)`	O
.	O

What	O
about	O
plt.title	B-API
?	O

Is	O
there	O
a	O
way	O
to	O
darken	O
or	O
make	O
smoother	O
the	O
HSV	B-API
colours	O
so	O
they	O
look	O
more	O
like	O
this	O

plt.plot	B-API
(	O
arr	O
[	O
'	O
lapse_time	O
']	O
,	O
arr	O
[	O
'	O
contact_angle	O
'])	O

We	O
are	O
looking	O
for	O
some	O
`	O
.line	B-API
`	O
objects	O
and	O
there	O
are	O
two	O
.	O

My	O
`	O
rcParams	B-API
`	O
are	O
not	O
read	O
.	O

Now	O
,	O
it	O
says	O
`	O
get_data	B-API
`	O
is	O
not	O
defined	O
...	O
after	O
I	O
move	O
`	O
my_plot	O
`	O
before	O
the	O
loop	O

Xaxis	B-API
interval	O
y1	O
(	O
y2	O
)	O
ax2	O
:	O
(	O
-	O
100000.0	O
,	O
800000.0	O
)	O
(	O
wrong	O
)	O

Then	O
define	O
a	O
method	O
`	O
show()	B-API
`	O
that	O
calls	O
`	O
plt.show()	B-API
`	O
.	O

`	O
plt.setp	B-API
(	O
plt.gca()	B-API
,	O
'	O
yticklabels	O
'	O
,	O
ylabels	O
)`	O

matplotlib.get_backend()	B-API
MacOSX	O

#	O
matplotlib.use	B-API
(	O
'	O
tkagg	O
')	O
;	O

From	O
the	O
`	O
savefig()	B-API
`	O
docs	O
,	O
#CODE	O

You	O
might	O
also	O
want	O
to	O
look	O
into	O
[	O
`	O
numpy.vectorize	B-API
`]	O
(	O
#URL	O
)	O
.	O

'	O
and	O
'	O
plt.figure()	B-API
;	O
for	O
result	O
in	O
results	O
:	O
plt.clf()	B-API
...	O

Python	O
,	O
matplotlib	O
pyplot	B-API
show()	B-API
not	O
blocking	O

According	O
to	O
the	O
docs	O
`	O
numpy.loadtxt	B-API
`	O
is	O

What	O
is	O
ravel()	B-API
?	O

`	O
plot()	B-API
`	O
in	O
`	O
pandas	O
`	O
are	O
build	O
on	O
`	O
matplotlib	O
`	O
.	O

`	O
plt.colorbar()	B-API
`	O
?	O

from	O
matplotlib.ticker	B-API
import	O
LinearLocator	B-API
,	O
FormatStrFormatter	B-API

Is	O
matplotlib.pyplot.hist()	B-API
what	O
you	O
are	O
looking	O
for	O
?	O

File	O
"	O
/	O
usr	O
/	O
lib	O
/	O
python2.7	O
/	O
dist-packages	O
/	O
pandas	O
/	O
core	O
/	O
generic.py	O
"	O
,	O
line	O
2018	O
,	O
in	O
astype	B-API

Perhaps	O
you	O
should	O
be	O
calling	O
`	O
axvline	B-API
`	O
on	O
`	O
ax2	O
`	O
instead	O
of	O
calling	O
the	O
`	O
pyplot	B-API
`	O
method	O
?	O

(	O
`	O
np.all	B-API
(	O
np.diff	B-API
(	O
lats	O
,	O
axis=0	O
)	O
>	O
0	O
))`	O
,	O
similar	O
fro	O
`	O
lons	O
`)	O

The	O
problem	O
is	O
'	O
cause	O
my	O
np.mgrid	B-API
should	O
vary	O
from	O
-1	O
to	O
1	O
and	O
have	O
the	O
self.width	O
and	O
self.height	O
.	O

awesome	O
.	O
and	O
thanks	O
for	O
the	O
np.transpose	B-API
tip	O
,	O
too	O
.	O

And	O
using	O
`	O
set_bad	B-API
`	O
,	O
`	O
set_under	B-API
`	O
and	O
`	O
set_over	B-API
`	O
is	O
not	O
a	O
very	O
good	O
option	O
as	O
I	O
would	O
like	O
to	O
have	O
a	O
possibility	O
to	O
mark	O
different	O
pixels	O
with	O
different	O
colours	O
,	O
and	O
this	O
limits	O
their	O
number	O
to	O
3	O
.	O

@USER	O
numpy's	O
`	O
memmap	B-API
`	O
will	O
probably	O
not	O
be	O
useful	O
for	O
you	O
.	O

How	O
about	O
using	O
`	O
interpolate()	B-API
`	O
:	O
#CODE	O

cb.ax.set_major_formatter	O
(	O
ticker.FuncFormatter	B-API
(	O
myfmt	O
))	O

special	O
method	O
`	O
__call__()	B-API
`	O
is	O
a	O
good	O
approach	O
for	O
such	O

`	O
plt.tight_layout()	B-API
`	O
might	O
do	O
it	O
.	O

Unfortunately	O
,	O
I	O
don't	O
think	O
you	O
can	O
simply	O
do	O
np.minimum	B-API
(	O
array1	O
,	O
array2	O
,	O
array3	O
)	O
like	O
to	O
have	O
above	O
,	O
so	O
I	O
think	O
you	O
need	O
to	O
nest	O
the	O
np.minimum	B-API
calls	O
.	O

Using	O
`	O
set_offsets	B-API
`	O
doesn't	O
seem	O
to	O
behave	O
as	O
I	O
expect	O
it	O
to	O
.	O

Does	O
the	O
import	O
of	O
Axes3D	O
do	O
something	O
behind	O
the	O
scenes	O
to	O
alter	O
the	O
import	O
of	O
pyplot	B-API
?	O

`	O
get_color()	B-API
`	O
just	O
returns	O
the	O
color	O
attribute	O
from	O
a	O
line	O
.	O

plt.tight_layout()	B-API
`	O

(	O
Now	O
I	O
see	O
:	O
`	O
linspace	B-API
`	O
is	O
even	O
mentioned	O
in	O
`	O
arange	B-API
`'	O
s	O
docstring	O
...	O
)	O

By	O
default	O
`	O
animation.MovieWriter	B-API
`	O
uses	O
a	O
`	O
subprocess.PIPE	O
`	O
to	O
feed	O
the	O
frames	O
to	O
the	O
writer	O
.	O

With	O
your	O
`	O
matplotlibrc	O
`	O
file	O
,	O
the	O
variables	O
`	O
mp.rcParams	O
[	O
'	O
lines.linestyle	O
']`	O
and	O
`	O
mp.rcParams	O
[	O
'	O
axes.grid	B-API
']`	O
are	O
correctly	O
specified	O
and	O
this	O
works	O
as	O
expected	O
...	O

pyplot	B-API
interface	O

(	O
and	O
`	O
set_yticklabels	B-API
`	O
for	O
the	O
y-axis	O
)	O
