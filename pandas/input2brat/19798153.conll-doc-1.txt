Difference between map , applymap and apply methods in Pandas
Can you tell me when to use these vectorization methods with basic examples ?
I see that ` map ` is a ` Series ` method whereas the rest are ` DataFrame ` methods .
I got confused about ` apply ` and ` applymap ` methods though .
Why do we have two methods for applying a function to a DataFrame ?
Again , simple examples which illustrate the usage would be great !
Thanks !
Straight from Wes McKinney's Python for Data Analysis book , pg .
132 ( I highly recommended this book ):
Another frequent operation is applying a function on 1D arrays to each column or row .
DataFrame s apply method does exactly this :
@CODE
Many of the most common array statistics ( like sum and mean ) are DataFrame methods ,
so using apply is not necessary .
Element-wise Python functions can be used , too .
Suppose you wanted to compute a formatted string from each floating point value in frame .
You can do this with applymap :
@CODE
The reason for the name applymap is that Series has a map method for applying an element-wise function :
@CODE
Summing up , ` apply ` works on a row / column basis of a DataFrame , ` applymap ` works element-wise on a DataFrame , and ` map ` works element-wise on a Series .
@jeremiahbuddha mentioned that apply works on row / columns , while applymap works element-wise .
But it seems you can still use apply for element-wise computation ....
@CODE
Adding to the other answers , in a ` Series ` there are also map and apply .
Apply can make a DataFrame out of a series ; however , map will just put a series in every cell of another series , which is probably not what you want .
@CODE
Also if I had a function with side effects , such as " connect to a web server " , I'd probably use ` apply ` just for the sake of clarity .
@CODE
` Map ` can use not only a function , but also a dictionary or another series .
Let's say you want to manipulate permutations .
Take
@CODE
The square of this permutation is
@CODE
You can compute it using ` map ` .
Not sure if self-application is documented , but it works in ` 0.15.1 ` .
@CODE
