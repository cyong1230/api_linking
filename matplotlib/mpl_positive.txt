Using Matplotlib's imshow chokes on anything above 10fps .
` plt.figure ( figsize =( 20 , 10 ))`
Similarly , you can run ` fig.set_dpi ( 100 )` .
I keep trying things like ` matplotlib.figure ` and ` matplotlib.figure.Figure `
Using ` draw() ` : #CODE
The ` show() ` documentation says :
Let us know if matplotlib.pyplot.imshow works for you .
There was no ` get_sample_data ` , however a ` get_example_data ` in ` / usr / lib / pymodules / python2.6 / matplotlib / __init__.py ` which didn't really work .
Using " fft.rfft ( v )" to compute real-values only results in a 1.3GB RSS .
Thanks for the pointer to the rfftn functions ; yes those do the job nicely .
As David's answer indicates , ` scipy.fftpack.rfft ` supports this : ` scipy.fftpack.rfft ( v.astype ( np.float32 )) .dtype ` returns ` float32 ` .
From the docs , matplotlib.pyplot.twinx ( ax=None )
The pyplot page is very long , and I was not able to see the entry for close() while scrolling .
I was searching for something like clean() clear() or flush() .
The pyplot tutorial does mention clf() in the " multiple figures " section .
+1 for ` semilogy() ` .
There is also [ semilogx ] ( #URL ) .
Matplotlib has ` semilogy() ` .
` pyplot.semilogy() ` is more direct .
No I'm talking about the bars that are generated by Axes.bar()
How to modify a NumPy.recarray using its two views
non-tuple sequence object , an ndarray
A better solution for converting coordinates is using the ` extent ` keyword when using imshow .
Try the ` subplots_adjust ` API :
subplots_adjust ( *args , ** kwargs )
fig.subplots_adjust ( left=None , bottom=None , right=None , wspace=None , hspace=None )
If I then call plt.close() and then carry on , it behaves in exactly the same way , ie hangs .
Note that I'm not using plot() ; but bar() .
I think the correct command is `` .set_size_inches `` without the `` fig ``
What does that fig.add_subplot ( 111 ) indicate ?
From what I could piece together , the setp command should work , but " reversed " returns an iterator .
Maybe the setp command suggested above .
I think changing ` plt.figure ( i )` to ` plt.subplot ( 4 , 4 , i+1 )` should work .
In addition , " changing plt.figure ( i )" is not correct .
The formatting is done via the argument passed to add_subplot .
If you opt for this framework , ` imshow ` will do what you need , here is an example : #CODE
imshow ( a , cmap=myblue , interpolation= ' nearest ')
Not using show() and matplotlib alone .
I'll look into NonUniformImage anyway , thanks for the tip I wasn't aware of it .
PS : I looks to me like thrope's response ( matplotlib.image.NonUniformImage ) can actually do what you want , in a simpler way that the " manual " method described here !
` ax.set_axisbelow ( True )` still works .
I am using matplotlib.pyplot with python 2.5 .
You need to call ` show() ` or ` savefig() ` .
Otherwise , you need to explicitly invoke the ` show() ` command
pieWedgesCollection [ 0 ] [ 0 ] .set_linewidth ( 0 )
Showing up a bit late for the party but I encountered this problem and didn't want to alter my rcParams .
You can read more about using the matplotlib.font_manager here :
I want to keep the range of the Y-axis constant and I am trying to do it via " plt.axis ([ 0,500,0,180 ])" .
/ images / plot{ 0:03 d} .png " .format ( i )`
Vertical xtick labels on top , not bottom
don't forget about show() !
pylab.gca() .tick_top()
This is also what ` matshow ` does .
Nevertheless , ` tick_top ` is good to know !
Try : ` ax.hist ( ( X , Y , Z ) )`
I'm using pyplot .
It seems like there should already be a way to do this without writing my own " binning " method and using imshow .
Is ` matplotlib.pyplot.hist ` what you're looking for ?
PyPlot reverse Y-Axis
` plt.ylim ( plt.ylim() [: : -1 ])` worked for me .
Then call draw() .
For example with the the default GTK , you call gobject.idle_add ( animate ); plt.show() .
You will also need to change plt.grid ( True ) to ax1.grid ( True )
You need to do an explicit ` show() ` .
On Mac OS X with the regular Python shell , I don't have to do show() ( or draw() , for that matter ): plot() opens a new window .
draw() doesn't work for me , but pylab.ion() works .
If you are starting ipython with the ` -- pylab ` option , you shouldn't need to call ` show() ` or ` draw() ` .Try this : #CODE
ax = plt.gca ( projection= ' 3d ') , ax.axes.get_zaxis() .set_visible ( False ) gives `' Axes3DSubplot ' object has no attribute ' get_zaxis '`
@USER In your case this method won't work , not even ` get_xaxis() .set_visible ( False )` .
The object has a set_zorder method .
can you please explain the parameters of fill_between() method ?
Since you are trying to be very complete why not turn that into ` stackplot ( x , yn , colorlist )` and file a feature request bug upstream ?
Also , you can adjust these options on a script by script basis by using the matplotlib.rcParams dict ( #URL ) , might be easier than maintaining separate config files .
( I'm not sure why it works for doug but no combination of rcParams works for me on version 0.99.1.1-r1 . )
What the toggle_axisline does is simply to make the xaxis and yaxis
The docstring of pyplot.subplot doesn't talk about it .
Here is an example comparing pyploy.hist and numpy.histogram .
after a ` plot() ` , possibly followed by #CODE
` show() ` does not block your system
AttributeError : ' AxesSubplot ' object has no attribute ' get_frame '
Did you call draw() before ?
I found it : subplots_adjust .
pyplot.clf()
I'd forgotten the ` clf() ` call ...
+1 pyplot.close() released the memory in a loop I had and prevented Python from crashing .
Answer from ninjasmith worked for me too - ` pyplot.close() ` enabled my loops to work .
because pyplot maintains internal references until ` close() ` is called .
@USER : doesn't ` plt.savefig ( ' filename.png ')` work ?
I guess I do not fully understand that ` imshow() ` is on the same category of functions as ` scatter() ` .
This is exactly what I'm trying to do , but matplotlib.figure seems a module , not a class .
Here is the offical link why ` matplotlib.pyplot ` is prefered : #URL
With Matplotlib prior to version 1.0.1 , ` show() ` should only be called once per program , even if it seems to work within certain environments ( some backends , on some platforms , etc . ) .
PS : now , with Matplotlib version 1.0.1 + , ` show() ` can be called multiple times ( with most backends ) .
` plt.show() ` shows both .
@USER , the ax.get_xgridlines() only returns the major gridlines .
Matplotlib subplots_adjust hspace so titles and xlabels don't overlap ?
I am using imshow() in matplotlib like so : #CODE
You can display and interact with figures without using ` plt.show() ` .
I suspect that you call figure.show instead of plt.show()
show()
leg = ax.legend()
res = ax.imshow ( im , norm= mpl.colors.LogNorm() )
Setting ` axes.linewidth ` without changing the ` rcParams ` global dict
There are related functions in Matplotlib ( csv2rec ) but Matplotlib is actually standardizing on loadtxt .
' loadtxt ' accepts either a file or a file descriptor .
There are a lot of questions about matplotlib , pylab , pyplot , ipython , so I'm sorry if you're sick of seeing this asked .
for kicks tried ` show() ` for ` ** `
I had the same problem using the QT4Agg backend on Windows , I believe it is related to this [ github issue ] ( #URL ) , using pyplot.pause() fixed it .
Note the pause() statement following draw() followed by ioff() and show() .
The method ` ax.imshow ` :
I would like to do something like plt.colorbar ( ax.image , ax=ax ) .
` plt.bar ([ 1 , 2 ] , [ 4 , 5 ])
plt.xlabel ( " My x label ")
Actually , np.histogram won't do what he needs , unfortunately .
Edit : Ok so it's not the GIL but show() .
[ show() ] ( #URL ) , as the doc says , is supposed to be used only once in your script .
Maybe sticking the .show() in another thread would be sufficient ?
It seems like the draw() method can circumvent the need for show() .
The only reason left for .show() in the script is to let it do the blocking part so that the images don't disapear when the script reaches its end .
show() doesn't redraw anymore
+1 for the ` .use ` to specify the backend .
Important note : .use needs to be called before pyplot is imported .
Here's a quick hack that uses a barchart ( axes.barh ) to simulate striping .
Call ` plot() ` , then ` ylim() ` and then ` savefig() ` .
The functions of interest are ` set_autoscale_on ` , ` set_autoscalex_on ` , and ` set_autoscaley_on ` .
Did you try to specify ' \t ' as the delimiter to genfromtxt ?
I didn't realize sharex could be passed to add_subplot ...
I love the little plt.text trick !
- so you need to iterate for plt.text ?
It looks like matplotlib respects these settings as rcParams : #CODE
This means rcParams is not a solution because you want to avoid global settings .
If you don't want to change the spacing globally ( by editing your rcParams ) , and want a cleaner approach , try this :
` ax.tick_params ( axis= ' both ' , which= ' major ' , pad=15 )`
` ax.tick_params ( axis= ' x ' , which= ' major ' , pad=15 )`
Surely I must be abusing pyplot .
I like ` add_axes ` for its control .
Does AutoDateFormatter do what you want ?
Unfortunately , my problem with the AutoDateFormatter is that it won't let you custom-format various levels .
( Hat tip to EOL for reminding me about ` cumsum `)
I'd like their yaxis to be aligned and their boxes to be aligned .
For my purpose could it be ` matplotlib.ticker ` of help ?
` rotation ` is also sometimes useful : ` plt.xticks ( range ( 5 ) , [ " some " , " words " , " as " , " x " , " ticks "] , rotation=45 )`
Documentation for ` savefig() ` .
@USER Now that's what ` xticks() ` from ` matplotlib.pyplot ` is there for .
matplotlib.transforms.Affine2D() .scale ( kms_to_deltafreq , 1 . ) .translate ( deltafreq_to_freq , 1 )
I have Helvetica in the afm directory of mpl-data , and when matplotlib initiates it reads it and outputs : #CODE
Have you tried the cumulative=True argument to pyplot.hist ?
Still , that imposes binning ; see Dave's answer using np.sort .
I only simplified the code a little bit , using linspace .
Then , we should've used linspace with ` endpoint = False ` , right ?
autoscale_view ( True , True , True ) fixed the issue .
don't know from which version , but since Matplotlib 1.0 setMajorFormatter is set_major_formatter .
See also #URL which suggests using [ ` ScalarFormatter ( useOffset=False )`] ( #URL ) .
` matplotlib.pyplot.switch_backend ( ' cairo.png ')`
( I know that the switch_backend functionality is experimental )
and I have also tried ` matplotlib.use ( " cairo.png ")` but this leads to import problems as the ` matplotlib.use ( " cairo.png ")` statement should come before importing ` matplotlib.pyplot ` .
However , updating the canvas with canvas.get_tk_widget() doesn't do the trick I assume because of the command before it that re-plots pcolor() .
Also , i will be using self.a.plot() as well but it seems to be the exact scenario as contour()
If anyone can see that I m missing something with ` fill_between() ` please let me know .
Like by using ` masked_where() ` ?
` ax.scatter ( x , y , z , marker= ' o ')`
fig is defined as : ` fig = plt.figure() `
Notice that there ` xs ` , ` ys ` , ` zs ` are ndarrays of floats .
If you're using matplotlib > = 1.0.0 , look into using GridSpec .
This tip finally made me able to perform the import of pyplot .
It seems to offer more control than subplot()
The parameters specified in ` matplotlibrc ` are validated , and then stored in a dict called ` rcParams ` .
I'm pretty sure this did work in the past , so I'm thinking it may be a Windows issue or something related to ` ion() ` .
Think the QTAgg problems are related to this [ github issue ] ( #URL ) , using pause() with pylab instead of draw() works , also show() shouldn't be needed .
As soon as I assigned the return value of ` animation.FuncAnimation() ` to a value , everything worked .
calling time.sleep() or plt.pause() causes flicker on the graph window when using blitting , but I got good results by simply calling the event loop explicitely : #CODE
Make sure you call ` matplotlib.use ` BEFORE importing anything else from ` matplotlib ` ( e.g. ` matplotlib.pyplot `)
The problem lies with ` pyplot.clf() `
( returned by imshow() ) .
or in one call : ` ax.set_xticklabels ( labels , rotation=45 )` : #URL
Thanks , I realized there might be more people who can read ` matplotlib ` + ` pyplot ` better than ` matplotlib ` + ` wx `
plot_date is great for more complex cases , but setting up what you need can be easily accomplished without it .
in your ~ / .matplotlib / matplotlibrc instead of using ` matplotlib.use ( ... )` .
If I call plt.imshow ( i ) prior to calling plt.show() , then everything works perfectly .
If I call plt.show() prior to calling
If I call plt.imshow ( i ) prior to
calling plt.show() , then everything
calling plt.show() .
pass in an additional argument to add_subplot , projection= ' 3d '
matplotlib matshow labels
I'm trying to do a heatmap with matshow .
( I'm not quite sure exactly why this is . I've almost never used matshow , though . )
Another very useful method is ` plt.margins ( ... )` / ` ax.margins() ` .
If I wanted the limits to be tighter , I could call ` plt.axis ( ' tight ')` after the call to ` plt.barh ` , which would give :
Alternative form for ` add_subplot ( 111 )` is ` add_subplot ( 1 , 1 , 1 )` .
Documentation of legacy ` subplot() ` is [ here ] ( #URL ) and ` subplots() ` is [ here ] ( #URL ) .
Have you tried ` set_units ` ?
You have to subclass ` ScalarFormatter ` to do what you need ...
Subclassing the ScalarFormatter works great !
Here is an example for both xaxis and yaxis : #CODE
Gonzalo's solution started working for me after having added ` set_scientific ( False )` : #CODE
I combined my idea using the new spine.set_position() capability with Amro's suggestion to expand the bounds slightly .
The following works with only with matplotlib 1.0 or later , as it relies on the new spine.set_bounds() call .
` axvspan ` is a much better option than ` fill_between ` in this case .
customize ticks for AxesImage ?
You can access this with ` gca() ` , if you're using the ` pylab ` interface , or ` matplotlib.pyplot.gca ` if you're accessing things through pyplot .
I tried both ` plt.ylim (( 25,250 ))` and ` plt.ylim ( ymax = 250 , ymin = 25 )` .
I am using the pdf backend ( ` matplotlib.use ( ' PDF ')`) .
Are you sure that the output file is indeed updated with ` plt.savefig() ` ?
` x1 , x2 , y1 , y2 = plt.axis()
plt.axis (( x1 , x 2,25,250 ))`
: class : ` matplotlib.figure.Figure `
it works , but the call is ' gray() ' , isn't it ?
plt.plot ( 0 , 0 , ' o ' , markersize=10 , markerfacecolor= ' none ' , markeredgewidth=1 , markeredgecolor= ' black ')
If you are using matplotlib.pyplot the
fig.set_figwidth and fig.set_figheigh
` self.fig = plt.figure ( figsize =( 5 , 5 ))`
( Also , the code doesn't run as-is , and you should look into ` meshgrid ` rather than looping through to generate your x y grids . )
Far exceeds the [ ` mlab.griddata ` documentation ] ( #URL ) which is almost cryptic in comparison .
In my case ` np.sum ( n )` returned approx ` 7.2767 ` .
i think you need normed=True as well in plt.hist .
The documentation for the pyplot API is excellent : #URL , and there's a huge gallery of examples : #URL , as well as numerous other examples that aren't in the gallery : #URL There's also a fairly detailed introductory tutorial : #URL
You can do ` plt.rc ( ...
It seems set_yscale still does not work in 3D .
ax.w_zaxis.set_major_locator ( MultipleLocator ( 10 ))
ax.w_zaxis.set_minor_locator ( MultipleLocator ( 2 ))
The more specific problem I am having is that matplotlibs ' wx backend uses the wx.CURSOR_CROSS for zooming on imshow plots , which I am using to display images that are mostly black .
( -10 for the imshow doc : " MxN float arrays * may * be normalised " and for norm=None )
plt.margins ( 0 , 0.02 )
The code is fine when commenting out plt.ion() , but then nothing is shown .
However , the problem still seems to be on plt.ion() , as commenting it out produces no errors .
One way to automatically do this is the ` bbox_inches= ' tight '` kwarg to ` plt.savefig ` .
( ` plt.savefig() ` will not work in that case . )
` tight_layout ` did the job well !
( and ` set_yticklabels ` for the y-axis )
i.e. : ` fig.suptitle ( ' whatever ')` ( ` f.suptitle ... ` in your example code above ) .
This is different I think with respect to np.histogramdd .
What about trying pyplot.hexbin ?
or using plot() #CODE
You can also do it like this with pyplot : #CODE
This is equivalent to ` [ label.set_visible ( False ) for label in ax.get_xticklabels() ]` , for whatever it's worth .
so I used your command like this : `` plt.setp ( ax2.get_yticklabels() , visible=True )`` .
The above only shows the most recent ` scatter() `
You can just do ` plt.plot ( x , y , ' r- ' , alpha= 0.7 )` .
files , we recommend numpy.savetxt .
we recommend numpy.save , and its analog numpy.load , which are
The above ` PicklingError ` only occurs if you call ` plt.show() ` before doing the pickle .
matplotlib MemoryError on pcolorfast
` matplotlib.cbook.report_memory() ` my
I have a graph with some line segments ( LineCollection ) and some points .
PS : I tried ` color_bar.set_alpha ( 1 ); draw() ` , but this did not do anything
Oh , ` draw_all ` .
Matplotlib plot_date keeping times in UTC even with custom Timezone
The bug is in ` matplotlib.axes.Axes.xaxis_date ` ( file " axes.py " , line 2679 ) .
facecolor / set_facecolor ?
Or I need to write my own event using ` matplotlib.text.Annotation ` ?
Does this work for 2D images shown by ` imshow ` ?
Updating to the latest version of mplot3d and change the calls to ax.contour ( X , Y , Z , levels =[ y ] , zdir= ' y ') will hopefully help .
` ax.xaxis.set_major_locator ( MultipleLocator ( 1 ))`
What you're doing is aliasing ( " renaming ") matplotlib.font_manager to FontProperties so calling fontP = FontProperties() is actually calling matplotlib.font_manager which is not callable .
@USER I'm not sure but perhaps try calling ` plt.tight_layout() ` ?
If anyone is having issues with this , note that tight_layout() will cause issues !
You can also try ` figlegend ` .
` fig.set_size_inches ( ... )` takes care of the resizing you need .
We just chain ` legend() ` call after the ` plot() ` .
` fig.savefig ( ' image_output.png ' , bbox_extra_artists =( lgd , ) , bbox_inches= ' tight ')`
Is there some trick involved to make the matplotlib.rc call work in web apps ?
Here's a comparison of the plots produced after applying a PCA to the iris dataset :
ax.tick_params ( axis= ' x ' , colors= ' red ')
This will be done with a FuncFormatter , I guess .
Y = np.reshape ( Y , ( 41 , 21 ))
W = np.reshape ( W , ( 41 , 21 ))
be xs or ys )
That's what plt.show() does .
PW = numpy.loadtxt ( " . / learning.dat ")
Note that ` FontProperties ` is in fact ` matplotlib.font_manager.FontProperties ` - took me a bit to track that down .
@USER Pass ` frameon=False ` to ` AnnotationBbox() `
Even if I have the command " plt.minorticks_on " for both sub-plots , they are not appearing on both the sub-plots .
Do you call the ` show() ` method inside a terminal or application that has access to a graphical environment ?
import matplotlib.pyplot as mp
The window can be whatever you want ( e.g Kaiser with alpha 8) .
See the matplotlib plot() docs and look for the ` color ` keyword argument .
_from matplotlib.pyplot import cm_
` plt.plot ( a , ' b . ')` will be _much_ faster than the default ` plt.plot ( a , ' b- ')` .
This is because there is still another reference to the ` Line2D ` object that the reference in ` wr ` points to .
I guess tick_params was added to matplotlib recently : #URL
set_clip_on ( False ) is a great tip .
Changing Amplitude & Frequency of numpy.sin ( wt ) in pylab
` gui.w() .get ( " figureMain ")` is my personal wault for globaly used object .
I would begin with the matplotlib.path class .
In addition , Matplotlib includes a package called delauney , which as you might have guessed is for tesselating a surface using delaunay triangulation .
I thought ` show() ` did that already .
You can create as many figures as you want , show() each of them and they will remain displayed while your code keeps running .
tried your example with plt.ion() .
Doesn't work for me , plt.show() is still blocking it .
I'm assuming that your intention is to consume the ` x ` , ` y ` and ` fmt ` in your ` mplot ` routine and then pass the remaining parameters to ` plt.plot ` .
I don't believe that this is actually what you want ( I can see that ` plt.plot ` wants to receive ` x ` , ` y ` and ` fmt ` and so they should not be consumed ) .
using just a " string " in the numpy dtype generates segfault .
You can control the output image's pixel dimensions with ` fig.set_size_inches ` and ` plt.savefig `' s ` dpi ` parameter : #CODE
` xfmt = matplotlib.dates.DateFormatter ( ' %H : %M : %S : %f ')
I want ` plt.subplot ( 122 )` to be half as wide as ` plt.subplot ( 121 )` .
You can also adjust the height ratio using a similar option in GridSpec
I don't have access to import matplotlib.gridspec as gridspec .
Is the issue that you're using an older version of matplotlib that doesn't support GridSpec ?
This can be accomplished with ` subplots_adjust `
:) Ah , I'd never noticed this useful bit in the documentation before : " If items() , keys() , values() , iteritems() , iterkeys() , and itervalues() are called with no intervening modifications to the dictionary , the lists will directly correspond .
One would think that ` ax.axis ( " off ")` , ` ax.xaxis.visible ( False )` , ` ax.xaxis.set_alpha ( 0.0 )` would do something noticeable .
I also tried some of the obvious stuff like ` ax.axis ( " off ")` but with no luck .
@USER : Change `' point{0} ' .format ( i )` to `' point{0} ' .format ( i+1 )` .
Or , you could change the ` range ` : ` [ ' point{0} ' .format ( i ) for i in range ( N )]` to ` [ ' point{0} ' .format ( i ) for i in range ( 1 , N+1 )]` .
Matplotlib pyplot show() doesn't work once closed
A long standing request is to support multiple calls to show() .
As @USER suggests in his answer , try using ` numpy.loadtxt ` .
Hm , you could try ` set_axis_bgcolor ` .
those or ` matshow ` .
Why is there a " .T " on the end ?
I've marked this as the correct answer , but I prefer to change " X = np.arange ( 0 , 16.67 , vima )" into " X = np.arange ( 0.000001 , 16.67 , vima )" instead of adding " Z = np.nan_to_num ( Z )" .
Normalize() is unnecessary here and produces unwanted results .
It sounds like you would rather have an ` axhspan ` or ` axvspan ` .
` fig.colorbar ( cax=cax )` and ` cax.cla() `
" on_mappable_changed " works for me ( despite the ominous warning that it " ... should not be called manually . ") #CODE
python : ImportError : No module named patheffects
import matplotlib.patheffects
( For others trying to help : ` patheffects ` is a module )
either from matplotlib import patheffects or import matplotlib.patheffects are working for me in winXP
` import matplotlib.patheffects ` works perfectly well for me .
Is there an easy way to do this in PyPlot ?
Oops , sorry , should have used ` np.linspace ` .
plt.savefig ( sys.stdout , format= ' png ') - Writes it to stdout .
plt.show() / plt.draw() does nothing when executed from command line
I was hoping ` imsave ` had a " return " kind of option .
matplotlib.artist.Artist.set_zorder()
Zero-value colour in matplotlib hexbin
` hexbin ( x , y , mincnt=1 )` should do the trick .
and ` h = hexbin ( x , y , gridsize=10 , mincnt=1 )` gives ,
Generally speaking , you're better off using matplotlib's mathtext rendering for things like greek symbols .
do ` matplotlib.pyplot.xlabel ( r'Sarcomere Length ( $\mu m$ )')` instead .
Using ` ax.set_aspect ` : #CODE
Matplotlib.pyplot on OS X with 64-bit Python from Python.org
` matplotlib.pyplot.contour() ` allows complex-valued input arrays .
I see some examples of matplotlib.pyplot used , but when integrating matplotlib with wxpython i often see matplotlib.figure like #CODE
Can matplotlib.pyplot be used in building a wx app ?
Pyplot is the Matlab-like state-machine API , matplotlib.figure.Figure is part of the object-oriented API .
How can I modify the labels and the leaf length before they are passed to ` pyplot ` ?
Iterator should implement method ` next() ` , which will yield elements or ` raise StopIteration ` is there are no more elements .
The ` coeff ` lists are converted to ` ndarray ` when the object is instantiated .
This fails with ` errorbar ` plots .
This solution also works with ` errorbar ` plots , while the accepted one fails ( showing a line and its errorbars separately , and none of them with the right label ) .
Normally with ` genfromtxt ` it should work .
You are probably better off calling ` ax.bar ` multiple times ( one for each plane ) .
I.e. make it transparent with plot()
This answer refers to numpy.histogram , rather than pylab.hist
Python Headless MatplotLib / Pyplot
Nothing else touches pyplot .
It appears you can also do plt.savefig ( buf , format= " png " , facecolor= " white ") or fig.savefig() .
matplotlib show() doesn't work twice
You should not be using .show to display it .
Moreover , why the example I posted on the top works with multiple show() ?
The problem is the final show() that can be called only once .
By the way , using only draw() without show() doesn't display anything .
I was able to resolve my problem recently , if you're still interested in changing the behaviour of show() , try this :
A long standing request is to support multiple calls to show() .
plt.ion()
I've tried to reposition the labels " manually " by applying transforms or by calling set_y() , but no avail .
Setting it after the fact doesn't do anything , on xaxis or w_xaxis .
You can define the perimeter and perform a Delaunay triangulation .
Thanks , ` tricontourf ` is exactly what I needed .
IIRC , You should be able call fig.show() multiple times .
@USER : Sorry ; I updated the answer with the correct call to ` draw() ` .
I got it figured , changing ` ax.set_ylim ( bottom=0 )` to ` ax.set_ylim ( ymin=0 )` works like a charm , without the need for a call to ` .draw() ` .
In new scipy versions , things like griddata would be useful , but currently I only have scipy 0.8 .
Sure enough , ` ma ` is found in ` numpy.ma ` not ` numpy.core.ma ` ; verified via ` import numpy.ma ` .
Transparent axes.axhline in matplotlib ?
That's very strange , for me I have to ` ax.axhline ( .4 , xmin=0 , xmax=10 , linewidth= 0.3 , color =( 0 , 0 , 0 ) , alpha= 0.75 )` .
graphing milliseconds in python matplotlib.dates
It appears that matplotlib's TickHelper RRuleLocator only has a SecondLocator .
Getting the circumcentres from a delaunay triangulation generated using matplotlib
Triangulation ( x , y )
I don't understand what this call does , but apparently it can not be used with imshow() .
For example , you were trying to unpack a single value ( ` im1 , = ax.imshow ( im )`) giving you the ` TypeError ` you mentioned in your question ( as it should ) .
According to the documentation , ` imshow ` returns a ` matplotlib.image.AxesImage ' object .
Program hangs when using " matplotlib.mlab.griddata "
zi = griddata ( x , y , z , xi , yi )
` griddata ` uses delauney triangulation by default .
The result of this call into ` cs.collections [ 0 ] .get_paths() ` is : #CODE
provided for them by iter_segments() .
@ Chinmay : ` from pyplot import * ` has to be pylab , I think
I guess you want ` pcolor ` , as shown here .
How would I make that work with pcolor then ?
You might for instance want to prompt the user for some input in a terminal after updating the graph , which cannot be done with the blocking ` show() ` .
Given ` ax = plt.subplot() ` :
` ax.bar() [ 0 ]` can be passed to ` plt.legend() ` .
Passing legend= " stuff " to ` ax.bar3d() ` and than calling ` ax.legend() ` raises #CODE
this works great with scatter() too , thank you
Here's a link to DateFormatter .
figtext
pyplot.show() fails to produce graph , causes IDLE to restart
So pyplot.savefig() works as expected .
But then I invoked pyplot.show() , and you can see that the interpreter has restarted .
As per @USER ' s suggestion , I added plt.show() to the script and ran it from Terminal .
I have added the ax.set_aspect but the graph gets trimmed off .
norm_conf can be made much simpler : row_sums = np.sum ( conf_arr , axis=1 ); norm_conf = ( conf_arr.T / row_sums ) .T
I am using hist() in matplotlib.pyplot
You might want to mention ` plt.step ` #URL in this particular case .
@USER .F .
I think this would be a great functionality to have included in the matplotlib.colors.Normalize .
I wasn't aware of np.lexsort() .
matplotlib gets funny about using plt.show() .
I know about ` plot_date() ` but is there a ` bar_date() ` out there ?
Is matplotlib.pyplot.hist() what you are looking for ?
Combining plt.plot ( x , y ) with plt.boxplot()
That is useful to know that each instance has it's own .savefig method
b ) throw the entire string into plot()
Is it possible to have multiple PyPlot windows ?
Basically , is PyPlot limited to one instance / window ?
Just as a side note , instead of calling ` datetime.date.fromordinal ( int ( xmin ))` , you can just call ` matplotlib.dates.num2date ( xmin )` .
fig = figure()
fig.show()
However , the documentation on figure.show() is as far as I can tell virtually non-existent .
However , figure.show() seems to be doing what I want .
Without the pyplot.show() , the figures are being recalled and saved properly .
I don't know if this is part of the intention of pyplot.show() but it seems to be what is happening .
I don't know if it is a factor , but I am importing a package called pylab which I presume is giving me pyplot , but I don't really know .
From the documentation , whether or not the drawing elements are destroyed from ` show() ` depends on the backend , and the version of matplotlib .
How to avoid line color repetition in matplotlib.pyplot ?
setting color range in matplotlib patchcollection
Anything in matplotlib that has a colormap has the ` get_clim ` and ` set_clim ` methods .
Haven't tried doing anything with things like np.array ( ..., dtype= np.int16 ) yet though ( I think np arrays default to double ) .
plt.colorbar() wants a mappable object , like the CircleCollection that plt.scatter() returns .
I'd like to create different figures in Python using ` matplotlib.pyplot ` .
I tried inserting this before the show() : #CODE
In your snippet you call plt.axes() several times .
As far as axes() is used in your snippet , gca() does the same thing .
as far as axes() , draw() and plot() go , pylab and matplotlib.pyplot are the same .
axes.xmargin / ymargin rcParam behaves differently than pyplot.margins() #2298
Basically , ` imshow ` seems to be doing this :
@USER - That's not how a ` ScalarMappable ` ( what imshow returns ) work in matplotlib .
However , doing draw() in the following code does not do anything : #CODE
@USER K : the goal is to have the program wait for the user to type enter , so ` show() ` is precluded .
I have a much older version of matplotlib installed which have some problems with ` ion() ` .
Beside this , matplotlib had also some problems with ` draw() ` on Windows .
In particular , ` pyplot .
A better documentation for ` draw() ` , ` show() ` and friends can also be found in the same branch .
Would it be better for you to do ` lattice_components = numpy.modf ( lattice_components ) [ 0 ]` ?
Didn't know about modf , good suggestion .
I made an edit to the " numpy.all ( lower_bounds .. )" to account for the correct dimension .
Is it possible in pyplot ?
` arange ` doesn't accept lists though .
here is the polyfit example I am following : #CODE
` arange ` generates lists ( well , numpy arrays ); type ` help ( np.arange )` for the details .
placed inside the wedge .
Using this basic example below , how can I display each numerical value on top of its wedge ?
( python ) matplotlib pyplot show() .. blocking or not ?
if anyone else is interested in changing the behaviour of ` show() ` , read on for how you can do it :
A long standing request is to support multiple calls to show() .
That line must be before you call ` plt.bar ` .
` axes.set_ylim ( 1.1 *lowerLimit , 1.1 *upperLimit )`
Although It is not documented , I attempted ` get_ylim() ` and it worked , so I was able to scale up the limits and re-apply them with ` set_ylim() ` so I have a decent workaround for now , but it would be nice if I there were a better way .
Documentation : ` get_ylim() `
Perhaps ax.axhline would have been more direct , but I think the technique you have illustrated is valuable for everybody reading this .
ax.plot ( r.date , r.close )
You can make this a one-liner : ` ax.bbox.union ([ label.get_window_extent() for label in ax.get_xticklabels() ])` .
date2num , ValueError : ordinal must be > = 1
For line plots , you can deal with the ` Line2D ` objects themselves : #CODE
( This is what ` imshow ` does by default )
Option 1 - pyplot.text #CODE
` hsv ` is the " rainbow " colormap you were referring to .
Just do something like this ( using ` numpy.percentile ` instead of normalizing things by hand ): #CODE
I know the general usage of plotfile : #CODE
I don't see the advantages of plotfile , myself : as soon as you want to do anything interesting it's probably easier to work with the usual directives .
Check out the ` matplotlib.pyplot.plot ` documentation .
reset_axis = plt.axes ([ 0.4 , 0.15 , 0.1 , 0.04 ])
plt.show()
ISTM ` ax.set_xticklabels ([ n ] , rotation= ' vertical ')` probably isn't what you want to do because I don't think n is what you think it is .
I'll reask the question more specifically to just target the xtick issue - #URL
The important part is the ' extent ' argument of ' imshow ' .
` fig , ax = plt.subplots ( figsize =( 32 , 34 ))` If it's not , perhaps it's a bug ?
Using ` draw() ` and ` ion() ` calls has no effect .
there is not need for show() nor matplotlib import .
I tried ` matplotlib.pyplot.rgrids ([ ] , [ ])` , but it doesn't work .
pcolormesh() .
` plt.setp ` is a " matlab-ism " , and an explicit loop is probably much more pythonic .
Should be ` get_ticklabels ` not ` get_major_ticks `
Perhaps you are looking for plt.annotate ?
What's wrong with ` plt.annotate() ` ?
How to change offsets of matplotlib LineCollection after creation
Using ` set_offsets ` doesn't seem to behave as I expect it to .
It looks like ` lines._paths ` gets generated in ` LineCollection() .__init__ ` using the offsets you provide .
Something similar might be done to correct the set_offsets method of LineCollection but I don't understand the details of the class well enough to risk it .
You are forcing the limits to be ( startPosition , startPosition+1000 ) and ( miny-50 , miny+50 ) in your ` draw() ` method .
I just discovered pcolormesh() , but I'm getting an AttributeError : ravel .
pcolormesh() is much faster than pcolor() .
Small mistake here : the method for changing the label position is ` set_label_position ` .
matplotlib.use ( " WXAgg ")
from matplotlib.ticker import MultipleLocator `
There , x is the actual width of the picture , got with shape() command ( I don't exactly understand how ... there is quite a lot scaling and stuff in the code I'm modifying ) .
I'm having a problem with the ` plt.text() ` method in matplotlib and I am hoping someone can help me .
` plt.text ( 2 , 30 , slope , fontsize=15 )` # displays : 0.82785632403515463
` plt.text ( 2 , 30 , r'slope = ' , fontsize=15 )` # displays : slope
or just ` plt.text ( 2 , 30 , r'slope = ' +str ( slope ) , fontsize=15 )`
... what I have understood below comments and documentations , contourf() corresponds plot() .
So set_major_locator should work ?
There are a ton of other Locators in matplotlib.ticker ...
@USER You need to instantiate a ScalarMappable .
I found that subplots_adjust ( hspace = 0.001 ) is what ended up working for me .
Try using ` plt.tight_layout `
The plt.subplots_adjust method : #CODE
You could try the subplot_tool() #CODE
I figured iterating through the mappings ( returned by boxplot() ) would be messy .
Should have known about that setp() method - looks very handy !
It raises an AttributeError with message "' Line2D ' object has no attribute ' set_facecolor '" .
Already answered my own question about FuncFormatter so no worries on that .
Instead of this you are giving the return value of ` hexbin ` to this keyword argument , which is an instance of a ` LocatablePolyCollection ` .
import matplotlib.pyplot not working
If it were not , then the scalar mappable would be defined with ` m = cm.ScalarMappable ( cmap= surf.cmap , norm= surf.norm )` .
If they are , you might look into ` plot_date() ` and its cousins .
PS : Its convenient to import ` matplotlib.pyplot ` with #CODE
numpy / scipy can read and write matlab .mat files
Edit : Thanks to @USER , I fixed the ` plt.subplot ` call line .
I don't have ` set_ticks() ` , but I do have ` set_xticks() ` and ` set_yticks() ` .
Assuming I have imported matplotlib correctly , and I have my own functions ' new_image() ' and ' new_rect() ' , here's some example code that fails to work because of the blocking effect of the show() function's call to the GUI mainloop : #CODE
Also note that I have tried replacing the plt.show() command with a plt.draw() command , and then adding the plt.show() outside of the for-loop .
If nothing is happening when you call show() , then you're missing av interactive backend in your matplotlib install .
Alternatively , you could do ` plt.setp ( plt.xticks() [ 1 ] , rotation=30 )` ( or various other ways of doing the same thing ) .
Thanks a lot .. figure.autofmt_xdate helps when rotation value is omitted ..
matplotlib.use ( ' cairo.ps ')
Could you try using mathtext somewhere else ?
@USER - It should work regardless of whether you're using actual ` tex ` ( which is what the ` usetex ` option sets ) or matplotlib's built-in mathtext renderer , which is what is used by default .
@USER No need to import pylab , but I think that you need to configure Matplotlib as much as possible before actually importing pylab or pyplot ... suerte !
I think it has something to do with the MaxNLocator ( which i used to decrease the number of ticks ) .
But I suggest using a CSV file and ` numpy.loadtxt ` if possible , because it should be much faster .
The easiest is to just call ` plt.axis ( ' tight ')` before resizing the x-axis with ` plt.xlim ` .
to issue colorbars with relative colormap , call after the imshow() : #CODE
Just out of curiousity , why do you have ` gcf() .subplots_adjust ` rather than ` plt.subplots_adjust ` ?
` plt.gca() .tight_layout() ` triggers an ` AttributeError : ' AxesSubplot ' object has no attribute ' tight_layout '`
Now I have a problem with the show() method , but it does not matter .
I need to include some PyPlot Figures onto a Tkinter GUI ( using Python 2.6 ) .
The interesting functions are ginput , waitforbuttonpress .
I need the bins to be equally spaced in log10 .
note that ` np.logspace ( 0.1 , 1.0 ,... )` will create a range from ` 10** 0.1 ` to ` 10** 1.0 ` , not from ` 0.1 ` to ` 1.0 `
is there anyone with same versions as mine can confirm the problem ? by the way , i found the more usual way to print the backend is , duh , ` matplotlib.get_backend() `
Hope this helps .?
thanks again for the answer . switching from GTKAgg to TkAgg backend resolved the issue . out of curiousity , do you know if it is strictly allowed to call draw() from within the worker thread ?
add_subplot() method does not .
You can call set_markevery ( 3 ) or set_xdata() set_ydata() to change the number of marks .
i.e. ` imshow ( my_array , cmap= mpl.cm.jet , norm= mpl.colors.LogNorm )`
Based on the picture you provided , I think plot() satisfied your requirement .
fig.subplots_adjust ( bottom= 0.06 )
imshow for 3D ?
Is there a way of telling pyplot.text() a location like you can with pyplot.legend() ?
Your code works for me with numpy 1.6.0 and scipy 0.9.0 ( after moving the linspace import to numpy from scipy.interpolate ) , after adding a scatterplot :
Works with ` suptitle ` .
#URL UserWarning : This call to matplotlib.use() has no effect
matplotlib.use() must be called * before * pylab , matplotlib.pyplot ,
` In [ 3 ]: matplotlib.get_backend()
I've confirmed that this works for ` plot() ` as well as ` imshow() ` .
add_subplot uses the old geometry to access it again .
Judging by the ` get_geometry ` output this is successful .
Also presumably you can change it passing a ` matplotlib.font_manager.FontProperties ` instance but this I don't know how to do .
You don't have to worry about ` fig.clf() ` or ` plt.close() ` or ` del a , b ` or ` gc.collect() ` .
Problem importing matplotlib.mlab and .pyplot in python 2.7 on Mac OSX 10.6
A related issue : If I try to call matplotlib.pyplot.hist() it doesn't work and gives me an AttributeError saying matplotlib has no attribute ' pyplot ' , but this is listed in the matplotlib documentation .
chartHandler [ 0 ] .plot ( range ( 0,100 ) )
chartHandler [ 5 ] .plot ( range ( 500,700 ) )
Unless you are talking about something that I haven't dealt with in ` matplotlib ` yet , I think that what you are looking for is ` figure.add_subplot() ` .
You should be able to capture the return from each ` figure.add_subplot() ` and operate on each individually from then on , kind of like this : #CODE
I don't really know why , but the problem seems to go away if you declare ` matplotlib.use ( backend )` before importing ` pyplot ` : #CODE
:) however I don't much like the solution with matplotlib.use because it causes complications if matplotlib.pyplot has already been imported in an interactive session
` plt.ion() ` somehow fixes the delay issue for me .
pyplot.plot ( xs , ys )
pyplot.show()
set_data and autoscale_view matplotlib
And axes.autoscale_view ( True , True , True ) / axes.set_autoscale_on ( True ) are not doing what they are supposed to .
From the matplotlib docs for autoscale_view :
Erase previously drawn content from a pyplot drawing
The command is ` clf() ` .
Store and reload matplotlib.pyplot object
# matplotlib.use ( ' tkagg ') ;
import matplotlib.pyplot as plt ;
fig = plt.figure() ;
ax = fig.add_subplot ( 111 );
ax.plot ( range ( 10 ));
plt.show() ;
plt.draw() ;
So in the non-GUI thread I do commands like ` line.set_ydata ` , ` ax.set_ylim ` , and other things that might need to be updated .
( ` ax.set_axis_off() `) Good to know there is an easy way !
Maybe that was what I was remembering working , rather than ` ax.set_visible ( False )` .
ax = plt.gca ( projection= ' 3d ')
` ax.set_axis_off() ` and ` set_axis_on() ` is now supported ( 1.4.1 )
There's also a ones_like() , very handy
You can manually reproject it and display it with imshow , but it's more of a pain than it's worth , in most cases .
`` for line in ax.get_lines() + ax.get_legend() .get_lines() : ``
And : ` csv2rec ` has a ` converterd ` argument : #URL
It looks like hexbin is what you're looking for , so you're on the right track .
The " thresholding wether to display a hexagon or not " part seems like the mincnt parameter in hexbin .
@USER - You want ` ax.set_xlim ( .. )` , rather than ` ax.xlim ` .
In your case , ` ax.plot ( r.run , r.function1 , ' o ' , color= ' whatever ')` would make more sense .
Also , you want ` ax.set_xlim ` , not ` ax.xlim ` to adjust the xaxis limits .
ax.autoscale ( enable=False , axis= ' both ')
( e.g. ` ax.axis ([ xmin , xmax , ymin , ymax ])`)
If ` start ` and ` stop ` are not 0 and 1 respectively , after you do ` reg_index = np.linspace ( start , stop , 257 )` , you can no longer assume that value 129 is the midpoint of the original cmap , therefore the entire rescaling makes no sense whenever you crop .
I am using ` matplotlib.mlab.griddata ` with ` mpl_toolkits.natgrid ` installed .
More than likely , griddata is way too hard .
But for some unknown reason , calling ` set_extent ` alone does not do the job .
I modified the $HOME / .matplotlib / matplotlib.rc changing ` backend : TKAgg ` to ` backend : WXAgg ` .
maybe what you need is pyplot.imshow() ?
` imshow ` will be much faster .
Note that the indexing in pcolor is slightly different than imshow , though you may not need to worry about it depending on how you used pcolor .
As a note for future googlers , there is also ` pcolormesh ` and ` pcolorfast ` .
The documentation for ` pcolormesh ` states that :
pcolormesh is similar to pcolor() , but uses a different mechanism and
returns a different object ; pcolor returns a PolyCollection but
pcolormesh returns a QuadMesh .
matplotlib cla() issue
from matplotlib.collections import LineCollection
from matplotlib.font_manager import FontProperties
You can turn it off using ` plt.ioff() ` .
Oh , I figured it works with matplotlib.pyplot.jet()
Yes , I did not forget calling the pyplot.show() .
Neither plt.draw nor plt.show give a reponse for Gt4Agg , - until I make a KeyboardInterrupt and the window is very briefly shown .
I have a numpy recarray with several integer columns and some string columns .
If a ' findobj ' equivalent doesn't exist in matplotlib , then I'd like to see how to do this differently .
There is a findobj method is matplotlib too : #CODE
No , ` plt.figure ` and ` plt.legend ` do not accept the ` gid ` parameter .
Then you don't need rely on ` matplotlib `' s ` findobj ` either .
For each of this point , I can calculate the value of my unordered categorical variable X .
As for imshow , I haven't tried it yet , I was wondering if there might be a smarter way to do it .
Well , I have tried imshow , it does work .
what does the docs say about the output of np.histogram2d ???
mhh , if the line plt.contour ( X , Y , Z ) is replaced with his :
plt.contour ( X , Y , Z [ 0 ]) the previous error-message disappears , because we are getting now the 2D-histogramm that we want ( which is stores in Z [ 0 ]) .
But the output of X , Y = np.meshgrid ( x , y )
` matplotlib.pyplot.get_fignums() ` does nearly the same thing without the additional import .
It seems you cannot achieve this with the ` pyplot.hist ` shortcut .
Two of those are related and therefor I have created them using the the pyplot.subplot .
You can control the positions and dimensions with subplots_adjust : #URL
We used the same method , but I somehow missed ` set_markeredgewidth ` .
It seems to me that the ` capsize ` argument of ` errorbar() ` is equivalent to the ` cap.set_markersize() ` , so the latter could be removed , no ?
` matplotlib.get_backend() ` is the usual way ( what's not easy about that ? ) .
if you want to change the backend , you can do it with ` matplotlib.use ` or setting in the matplotlibrc file , ` matplotlib.matplotlib_fname() ` will tell you the config file location .
Make pyplot faster than gnuplot
@USER : gnuplot is a specialized tool written in C , while pyplot is Python-based . matplotlib / numpy / Python is more versatile than gnuplot , but I would not assume it is faster than gnuplot in the domain of what gnuplot does .
I also thought that most of the " famous " packages interface with compiled versions of the functions , so that loadtxt or genfromtxt would call some C program themselves to read the file into memory .
Pyplot / Matplotlib : How to access figures opened by another interpreter ?
I am using ` matplotlib.pyplot ` ( with Eclipse on Windows ) .
Controlling the tracker when using twinx
AFAIK , the tracker always follows ` ax2 ` when using ` twinx ` .
I have several ( 27 ) images represented in 2D arrays that I am viewing with imshow() .
With matplotlib version 0.99 .?
plt.scatter ( xstart , y , s=100 , c=color , marker= ' x ' , lw=2 , edgecolor=color )
The answer from @USER refers to ` pyplot.hist ` .
The signature for ` pyplot.hexbin ` is a bit different : #CODE
Check out the pyplot documentation .
I noticed that the newer version of Scipy also has griddata , does anyone know if this can handle large irregular grids ?
I tried the new scipy griddata and it works great , thanks !
` tick_params ` was added in matplotlib ` 1.0.0 ` .
Do you close() your figures ?
Here is the code for hist() #CODE
( Also , don't call ` newax = plt.axes() ` and then call ` fig.add_subplot ( newax )` You're doing the same thing twice . )
Edit : With newer ( > = 1.2 , I think ? ) versions of matplotlib , you can accomplish the same thing as the example below by using the ` label ` kwarg to fig.add_subplot .
But the plt.axes() returning the same object was a surprise -- I thought that's what plt.gca() is for .
You can do that with ` axes.set_aspect ` .
If so , that has nothing to do with antialiasing , that's just the interpolation algorithm used by ` imshow ` .
pcolor in matplotlib
I am using pcolor in matplotlib .
` dir ( prop )` shows set_edgecolor , set_edgecolors , set_linestyle , set_linestyles - why so many variations on the same thing ?
But with ` pyplot.scatter ` , not present .
matplotlib.rc : discussed here ; changes globally , not locally .
plt.setp ( ax.spines.values() , color=color );
plt.setp ([ ax.get_xticklines() , ax.get_yticklines() ] , color=color )`)
Instead I have to ` set_color ` the labels individually .
( I'm also using ` plt.subplots ` here , which is only in > = 1.0 , as well . ) #CODE
( x [: , np.newaxis ] , y [: , np.newaxis ])) ,
File " C :\ software\Python26\lib\ site-packages \numpy\core\ shape_base.py " , line 270 , in hstack
Could they be combined with imshow and pcolormesh ?
rx , ry , rz = 1 / np.sqrt ( coef ) Should be rx , ry , rz = 1 / np.sqrt ( coefs )
radii = np.sqrt ( s ) .
@USER - You can specify ` interpolation= ' nearest '` when using ` imshow ` if you don't want interpolation .
Or just pass the ` vmin ` and ` vmax ` kwargs to ` imshow ` .
There are multiple ways , but the simplest is just to specify the ` vmin ` and ` vmax ` kwargs to ` imshow ` .
This is what ` matplotlib.pyplot.scatter ` is for .
Somehow , in the past , I called plt.gray() method I guess .
Pyplot - Label Plots
The code ends with ` plt.show() ` , for instance .
Using Matlab's Hexbin to Create Heatmap
I've had a play with set_xlim and transforms.Bbox , but can't seem to manage it .
matplotlib savefig() plots different from show()
My environment is Ubuntu and the backend for ` show() ` is ` Qt4Agg ` .
` plt.annotate ` makes this much easier than ` plt.text ` .
It appears ` pylab.mgrid ` is the same as ` numpy.mgrid ` .
Please tell us what object ` mgrid ` is : ` print repr ( mgrid )` for a small example .
mgrid is : #URL
@USER .C .Leit o : The specifics of how to vectorize a particular piece of code depend on the specifics of the code .
` pd.scatter_matrix ( df ); plt.show() ` .
pts.Arrow draws nothing , and plt.arrow draws a line but no arrowhead .
These procedures generate the pyplot figures .
I made the mistake of using show() to display each of the matplotlib figures .
xs = np.random.random_sample ( 100 ) *40 - 20
ys = np.random.random_sample ( 100 ) *40 - 20
zs = np.random.random_sample ( 100 ) *40 - 20
a = self.axes.scatter ( xs , ys , zs , c= ' r ' , marker= ' o ')
a = self.axes.scatter ( xs , ys , zs , c= ' r ' , marker= ' o ')
Could anyone have some ideas how to utilize the hist() in matplotlib to tackle this problem ?
If bins is an integer , bins + 1 bin edges will be returned , consistent with numpy.histogram() for numpy version > = 1.3 , and with the new = True argument in earlier versions .
Thank you for teaching me np.histogram ...
As everyone's said , what you did should work , but ` ax.axis ` might be another route to try for a workaround .
you should try with figaspect .
My ' original answer ' below is overkill , as it does something similar to ` axes.set_aspect() ` .
The code provided below in the ' original answer ' provides a starting off point for an explicitly controlled aspect ratio , but it seems to be ignored once an imshow is called .
The only thing I needed was ` from matplotlib.dates import DateFormatter `
@USER Well , as stated in above comment , I don't think ` DateFormatter ` is actually needed so I removed it from the code .
PS : The pyplot equivalent of ` pylab.figure() ` is ` matplotlib.pyplot.figure() ` .
Is there a good way to do this using matplotlib.figure.Figure instead of pylab ??
@USER : Yes , but that would be ` matplotlib.pyplot.figure() ` .
( Something more like what imshow produces ) .
plt.savefig ( ' img.eps ' , orientation= ' landscape ')
The same equation was copied and pasted from octave into python with ' ^ ' replaced with ' ** ' , ' acos ' replaced with ' arccos ' , and ' asin ' replaced with ' arcsin ' .
You have to decide whether you want to treat ` x ` as ` int ` or as a ` numpy.array ` .
I think using np.where is even better .
There is one more option which wasn't mentioned here -- using ` np.choose ` .
Based on the docs , I'm pretty sure ` mass ` doesn't belong there in the ` hist() ` call ...
@USER diagnosed it right : you were providing the wrong variable to the hist() call .
" set_dashes " above is a link to documentation .
I am noticing an unexplained behaviour when comparing scipy's ( 0.9.0 ) and matplotlib's ( 1.0.1 ) Delaunay triangulation routines .
My points are UTM coordinates stored in ` numpy.array ([[ easting , northing ] , [ easting , northing ] , [ easting , northing ]])` .
I already tried using ` subplots_adjust() ` , with quite the opposite result than I wanted .
Here you have the functions you need ( I only colored yaxis ): #CODE
I got it , just pass facecolor= ' black ' , to the savefig() func .
it can be dragged manually very fast and without needing to make draw() or canvas.blit() .
` scaling = np.array ([ getattr ( ax , ' get_{}lim ' .format ( dim )) ( ) for dim in ' xyz ']) ; ax.auto_scale_xyz ( * [[ np.min ( scaling ) , np.max ( scaling )]] *3 )`
You can control the aspect ratio with ` ax.set_aspect ` : #CODE
You want ` imshow ` rather than ` pcolor ` .
Maybe , ` pcolor ` takes only 1D or 2D arrays as the color arguments .
Is there a way to make it work for ` pcolor ` ?
Here is an updated ` plotData ` method , which uses ` numpy.linalg.lstsq ` to do linear regression and ` numpy.corrcoef ` to calculate Pearson's R : #CODE
It is very hard to see how things are changing after one calls ` add_patch ` , but they are .
Is there a special reason to import ` pyplot as PL ` ?.
Before importing pyplot or anything , go : #CODE
May be you want ` pyplot.grid ` ?
Alternatively it might better to do ` ax.scatter ( x , y )` and ` ax.grid ( True )` .
pyplot interface
` pyplot ` is a module that collects a couple of functions that allow matplotlib to be used in a functional manner .
I here assume that ` pyplot ` has been imported as ` import matplotlib.pyplot as plt ` .
` plt.close() ` closes a window , which will be the current window , if not specified otherwise .
If no argument is given to ` close() ` , the currently active window will be closed .
` fig.clear() ` is a synonym for ` fig.clf() `
The correct syntax is : ` plt.close ( fig )` .
The thing that you import with ` import matplotlib.pyplot `` ** is not pylab** .
That is pyplot .
@USER : you're right I confused pylab with pyplot .
matplotlib plt.show() only selected objects
I have several ` plt.plot ` instances and I wanted to only ` plt.show() ` certain objects .
I understand how to display matplotlib plots on-screen using the pyplot interface ( I think ! ) .
I want to avoid packages like ` PyPNG ` or ` scipy.misc.imsave ` , they are sometimes problematic ( they do not always install well , only basic ` savefig() ` for me
matplotlib.pyplot issue python
I'm experiencing a problem with matplotlib , to be more precise with pyplot .
Ultimately , it was one of the following that allowed me to import matplotlib.pyplot on Python 2.7.6 on OSX 10.6 ( with X11 and XQuartz installed previously , perhaps outdated ):
See axhline and axvline in the matplotlib module .
No , I have not tried using plt.show() .
@USER If you have plt.ion() , show() should call draw() implicitly .
But only works with nDim = 4
I have made a version that uses axes.annotate() instead of axes.arrow() .
You could manually adjust the spacing using ` plt.subplots_adjust ( top= 0.85 )` : #CODE
Some alternatives to using ` fig.subplots_adjust ( top= 0.85 )` :
If you read the thread , there is a solution to your problem involving ` GridSpec ` .
Using GridSpec #CODE
Casting ` fig.tight_layout ( rect =[ 0 , 0.03 , 1 , 0.95 ])` also works .
Just throw a call to this after your ` savefig() ` call .
However , without a display , the call to ` matplotlib.use ` is not effective , since the display has already been chosen .
Then ` import matplotlib.pyplot ` and proceed .
Try adding the kw argrument to ` plt.contourf ( ... )` call : either ` lw=0 ` or ` ls=None ` .
Could it be this : raw_line = last_received [ 1 :] .split ( ' ') .pop ( 0 ) is the culprit ?
Are you still using this : raw_line = last_received [ 1 :] .split ( ' ') .pop ( 0 ) ?
This could be updated to point to [ ` matplotlib.pyplot.streamplot `] ( #URL ) which is an improved version , its history [ here ] ( #URL )
The events that onmove receive will have attributes of ` x ` and ` y ` which will be the ( x , y ) in device ( pixel ) coordinates
How to rotate the xlabels while adding another yaxis ?
Here's one way to do it while still using plt.plot() .
( It doesn't seem that there is a trivial solution for this issue ; except for using a linecollection )
Maybe you can check matplotlib.patches #CODE
I needed multiple diagrams and a yaxis with labels on the ticks so I rewrote it like so #CODE
Prevent anti-aliasing for imshow in matplotlib
This is done with the ` Axes.set_color_cycle ` method .
` plt.plot ( range ( 10 ) , linestyle= ' -- ' , marker= ' o ' , color= ' b ')`
` plt.plot ( range ( 10 ) , ' -- bo ')`
For some reason your ` diffs ` variable is a numpy ndarray .
like ` pyplot.plot ( x , y , color= ??? )` or ` h = pyplot.plot ( x , y )` and do something with ` h ` .
` plt.plot ( x , y , ' ro- ' , alpha= 0.3 )`
To do this you might try ` matplotlib.colors ` , and in particular ` matplotlib.colors.LinearSegmentedColormap.from_list ` ( #URL )
does figure() work ?
For convenience : see ` numpy.cumsum ` .
the LineCollection method is a great deal faster in my hands .
I've added my solution using pcolormesh
For those using older versions of matplotlib , change ax = fig.add_subplot ( 111 , projection= ' 3d ') to ax = Axes3D ( fig ) .
Without that import , add_subplot ( 111 , projection= ' 3d ') will fail , saying that the projection ' 3d ' is not recognized .
Not only did you answer the question clearly and completely but I completely missed the matplotlib.pyplot.table documentation .
If you change the ` interval ` parameter in the ` ArtistAnimation ` it should change the framerate .
Python and plot() : how to limit the number of x-axis ticks ( labels )
gives ' AxesSubplot ' object has no attribute ' locator_params '
plt.savefig ( " temp.png ")
plt.imshow ( img , cmap=theCM , alpha=None )
Or closer to your picture ( here I eliminated ` set_smart_bounds ` because in win7 seems not to have effect for the example ): #CODE
Python / Gridspec height_ratio issue
You switched rows and columns in your Gridspec statement : #CODE
I added this after the ` ax.bar ` .
Did you try what I mentioned in my ( updated ) answer with the ` plt.ylim ` ?
I am using pyplot to generate graphs for the same .
Th problem is that FuncAnimation is using generators if I am not mistaken , but , how can I make it work ?
class matplotlib.animation.FuncAnimation ( fig , func , frames=None ,
@USER .F .Sebastian : Thanks for the suggestion .
How to hatch PolyCollection instance ?
Is it possible to hatch PolyCollection instance ?
I want to hath a PolyCollection returned from fill_betweenx .
Embedding matplotlib in pyqt4 using imshow
In fact , ` pylab.figure ` , that is actually the one defined in the pyplot module : #CODE
` pyplot.figure ` implements a couple of additional methods , one of them ` show() ` : #CODE
Do not create a new ` Line2D ` for every mouse move .
A ` Line2D ` can have more than 2 points .
Drawing one ` Line2D ` with thousands of points will surely be faster than instantiating and drawing thousands of ` Line2D ` s .
Actually , this just also makes is choppy and off the mark when you stop moving the mouse :/ Perhaps using Line2D is just not a good solution for this .
I don't think there's an easy way to do this , but you could probably do it yourself using several ` broken_barh ` .
Thanks for the simpler plt.plot ( v [ 0 ] , v [ 1 ]) syntax .
The advantage of doing it this way is that there are fewer calls to ` plt.plot ` .
This should be significantly faster than methods that make O ( N**2 ) calls to ` plt.plot ` .
The only problem is that ` plt.plot ( x , y )` expects ` x ` to be a sequence of ` x ` -values , and ` y ` to be a sequence of ` y ` -values .
I haven't used itertools before so some of the syntax in the plt.plot call is unfamiliar to me .
Is this similar to nditer ?
I'm using linspace to produce evenly spaced bars and this only kind of works and I'm not sure exactly why .
ind = arange ( 10 )
show() `
And here is 3 way comparison of above lists through pprint :
then ` i ` will refer to ` matplotlib.text ` .
You can also control the ` dpi ` in the call to ` plt.savefig ` .
` matplotlib.pylab ` combines pyplot with numpy into a single namespace .
The problem is that ` cm.get_cmap() ` only is able to retrieve my custom colormap if I am in the same program .
As soon as I attempt to call for my custom colormap from a separate script , ` cm.get_cmap() ` returns None .
Are you creating individual figures ? or are you using the procedural interface through pyplot : plt.plot() , plt.savefig() , etc ?
Yes , I'm using the procedural interface through pyplot .
plt.clf()
fig.savefig ( fname )`
I was using some definition as fig = plt.figure() that I got off the matplotlib website , and it was having some unintended consequences .
No personal experience , but maybe set_view_interval() or set_data_interval() from here ?
btw : apparently you have to ` import matplotlib.font_manager ` to make things happen ;-)
Also , the arguments specified are the defaults , so ` matplotlib.font_manager.findSystemFonts() ` returns the same thing .
The documentation recommends get_fontconfig_fonts() :
import matplotlib.pyplot as plt #CODE
So I may have answered it , though I'm not sure if it's really The Right Way : ` sca ( axHistx ); xlabel() `
set_xlabel() should make it centered by default .
Try the ` imshow ` parameter ` origin=lower ` .
import matplotlib.pyplot as plt File " matplotlib\ pyplot.pyc " , line 95 , in File " matplotlib\ backends__init__.pyc " , line
In [ 229 ]: fig.savefig ( ' test0.png ' , dpi=600 )
In [ 230 ]: fig.get_size_inches()
matplotlib 1.1.1 has added ` figure.tight_layout() ` ( doc ) that will do this for you .
So you are passing the reference to y when you execute ax.plot .
See [ ` matplotlib.pyplot.contourf `] ( #URL ) for example .
+1 As a side note , though , ` histogram2d ` is inefficient for large numbers of points .
Note that ` plt.plot() ` has a return value .
Does the whole thing run in 15s or just the call to histogram2d ?
I guess a call to ` unique() ` would help here .
Try ` ax.plot ( zip ( *data ) [: ] [ 0 ] , zip ( *data ) [: ] [ 1 ] , color= " red " , lw=2 )`
` pylab ` is simply an aggregation of the matplotlib.pyplot and numpy namespaces ( as well as a few others ) jinto a single namespace .
Therefore , it doesn't matter whether or not you import it with ` pylab ` or with ` matplotlib.pyplot ` .
Python doesn't care exactly what ` mgrid ` returns , it will just try to unpack it to two items .
` meshgrid ` takes two arrays and tiles them in a similar way to ` mgrid ` .
` meshgrid ` actually happens to return a tuple of 2 , 5x5 2D arrays , but that distinction doesn't matter .
I don't really understand what mgrid generates .
` xx , yy = np.mgrid [: 10 , : 10 ]` is the same as ` x , y = np.arange ( 10 ) , np.arange ( 10 ); xx , yy = np.meshgrid ( x , y )`
You didn't ask this ... but you should vectorize this code .
Just like log10 , except log2 ...
` FormatStrFormatter ` does the same thing .
` ax.scatter ( z , y , z , c= scalarMap.to_rgba ( cs ))` should be ` ax.scatter ( x , y , z , c= scalarMap.to_rgba ( cs ))`
from matplotlib.mlab import griddata #CODE
` pcolormesh ` does exactly what you want , and will be much faster .
` pcolormesh ` defaults to no antiailsing for performance reasons , as the mesh " cells " are often vertical , and look good without antialiasing .
How about fill_between() ?
Should I be using Fixedlocator for this ?
parameter setting in the call to ` plt.plot ` :
` plt.hlines ( y , range ( 1 , 5 ) , range ( 2 , 6 ))`
So in the example above , it would be : ` plt.step ( x , y , where= ' post ')`
I found a solution in a matplotlib gallery example , using the class ` matplotlib.collections.LineCollection ` ( link here ) .
just because you dropped " draw() " and replaced it with " ax.draw_artist " ?
I was seeing the same thing that memyself was seeing in #URL until I moved the background capture * below * the fig.show() .
If I comment out the line ` col = np.arange ( 30 )
Some googling shows me workarounds such as adding ` bbox_extra_artists =[ leg.legendPatch ]` or ` bbox_extra_artists =[ leg ]` to ` savefig() ` , but neither worked .
I hope future versions of savefig() will support border calculation similar to pyplot.show() .
I tried the snippet you posted and got this exception : ax.xaxis.set_minor_locator ( ticker.AutoMinorLocator ( n=2 ))
In some other code , I used the OpenCV ` SaveImage ` on a single frame to provide a reference for what I would expect from ` imshow ` .
Have you tried ` plt.plot ( xdata = [ 1 ] , ydata = [ 1 ] , color = ' red ' , marker = ' o ')` ?
Try passing ` aspect= " auto "` to ` imshow ` .
That's the ` vmin ` and ` vmax ` kwargs to ` imshow ` .
Call ` plt.savefig ( ' tessstttyyy.png ' , dpi=100 )` before you call ` plt.show() `
File " C :\ Python27\lib\ site-packages \matplotlib\ colors.py " , line 565 , in __call__
but i want to keep the ytick marks only on the left hand side . thank you .
I have tried the suggestions proposed in other questions such as adding plt.ion() but that doesn't work either .
The ` numpy.load ` routine is for loading pickled ` .npy ` or ` .npz ` binary files , which can be created using ` numpy.save ` and ` numpy.savez ` , respectively .
There's also ` numpy.fromiter ` , which is nice if you're running into memory problems .
Don't call ` plt.plot ` once for each point .
calls to ` plt.plot ` .
What effect are you trying to achieve with ` plt.ion ` and ` plt.draw ` ?
On the strftime page I see ( #URL ) there is no such directive .
" In other words , the ` strftime() ` for your platform may not support ` %l ` .
According to MSDN , their ` strftime() ` accepts ` % #I ` for this purpose .
Matplotlib pcolor
See also , its slightly more sophisticated cousin ` numpy.genfromtxt `
Documentation : pyplot.xticks
Emacs Python-inferior shell not showing prompt after matplotlib show() command
matplotlib.pyplot.show ( *args , ** kw )
` >>> plt.ion() `
` >>> plt.plot ( x , psi ** 2 )`
Just do ` print matplotlib.rcParams [ ' backend ']` .
I did so both in the Windows shell and emacs shell and the same PYTHONPATH is used . doing the rcParams both return TkAgg .
I understand using matplotlib.pyplot ' s imshow gives me a nice sketch that can be used to visualize matrices .
In particular , if you modify your ` imshow ` call to #CODE
You might be looking for numpy.loadtxt
Note that there is NO white border directly after calling imshow only .
( It's cleaner to just do ` limits = axes.axis() ` before and ` axes.axis ( limits )` after , though . )
` plot_date ` accepts , for example , ` marker ` and ` color ` .
but is there a way to do it that doesn't involve a separate call to matplotlib.pyplot.plot for each line segment ?
Looking for twinx and twiny ?
You could also have used ` fig , ( ax1 , ax2 ) = plt.subplots ( 2 )` instead of constructing ` fig ` , ` ax1 ` , ` ax2 ` separately .
plt.plot #CODE
Line2D method #CODE
+1 for ` plt.plot ([ 1 , 2 ] , [ 1 , 2 ] , color= ' k ' , marker= ' o ')`
You need to generate the meshgrid .
I ' ll try to meshgrid elsewhere
numpy.exp() did it ; thanks
Using kwarg ` projection= ' 3d '` in the call ` fig.add_subplot ` will be unavailable without this import .
Here's mtaplotlib delaunay triangulation ( interpolation ) , it converts 1d x , y , z into something compliant ( ? ):
from matplotlib.ticker import LinearLocator , FormatStrFormatter
import matplotlib.pyplot as plt
Thanks for a great answer , ` np.histogram2d ` is very helpful .
The docs for pcolormesh say :
listed in the documentation , ( e.g. ` pcolor ` accepts ` PolyCollection ` kwargs , while
` pcolormesh ` accepts ` QuadMesh ` kwargs ) I haven't formed an opinion about when to
I think you're after ` plt.axis ([ xmin , xmax , ymin , ymax ])` : #CODE
how to import matplotlib.pyplot
Try importing ` matplotlib.pylab ` , as it is alias for ` pyplot ` .
` ax = fig.add_subplot ( 211 )`
` #ax .xaxis .set_minor_formatter ( dayFormatter )`
Macros are not supported by matplotlib's mathtext , you'd have to edit mathtext.py .
fig.set_size_inches ( XX , YY )
fig.savefig ( ' filename ')
z = np.random.randn ( 10 )
plt.legend ([ p1a , ( p1a , p1b )] , [ " Attr A " , " Attr A+B "])
Matplotlib python show() returns immediately
using ` plt.show ( block=True )` did it for me .
` ion() ` and ` ioff() ` should do the same but the above is on matplotlib's level , not just pyplot or pylab .
This works for me although I'm ( later ) importing pyplot separately and never call matplotlib as such again .
Thanks for pointing me in the direction of ax.set_color_cycle() .
Hello , could you clarify what is the line ` plt.plot ( x [ below ] , y1 [ below ] , ' b -- ')` does ?
The line that removes the white border is ` plt.Axes ( fig , [ 0 , 0 , 1 , 1 ])` .
Combining the methods from the question ( { fig.axes.get_xaxis() .set_visible ( False ) & fig.axes.get_yaxis() .set_visible ( False ) } with { plt.axis ( ' off ') } ) fixed the problem for me .
It says that this now only works with a ScalarFormatter .
Just call legend() with labelspacing parameter , here is an example : #CODE
how to install GridSpec Matplotlib module
I had something similar with the ArtistAnimation ...
plt.plot()
plt.show() `
@USER : Why are you calling ` plt.plot ` with no arguments ?
@ Adam Bernier Oh sorry typo it should have been `` plt.plot ( pf , qf )
plt.show() ``
As mentioned , ` cumsum ` from ` numpy ` works well .
_Technically_ the normalization should be ` Y / = np.trapz ( Y , X )` but since we are using equally spaced steps they are essentially the same thing .
The easiest and most readable is to just explicitly call ` ax.axis ( ' tight ')` , i.m.o .
Placing ` ax.autoscale ( False )` after ` ax.countourf ` but before ` ax.plot ` is [ another option ] ( #URL ) .
I've tried putting it before and after the call to ` ax.plot ` and before and after the call to ` ax.contourf ` .
Sounds like it's actually complaining about ` yticks() ` to me , which is kinda odd ...
It's possible that pylint is complaining about ` plt.yticks ` .
python matplotlib imshow() custom tickmarks
Edit : as Yann mentions in a comment , you may also be interested in ` plt.yticks() `
Result ( using ` plt.xticks ( ticks , fontsize=9 )`) :
or ` plt.gca() .set_xticks ( ticks )`
+1 - Also , my guess is the OP was looking for both ` set_xticks ` and ` set_yticks `
If you're on OSX and using the OSX backend , you'll need to change ` blit=True ` to ` blit=False ` in the ` FuncAnimation ` initialization below .
@USER , your ` matplotlib.use ( ' TkAgg ')` trick didn't work for me ( on Yosemite with Python 2.7 and Python 3.3 ) I have ` blit=False ` specified , and @USER Kington's original code still doesn't work .
My guess is that you imported pyplot like this #CODE
from matplotlib.pyplot import *
It looks like you are simply calling ` get_cmap ` wrong .
For example : ` plt.pcolormesh ( ter_x , ter_y , masked_height.data , cmap =p lt.get_cmap ( ' terrain '))`
You probably want to move your ` plt.ylabel ` calls outside of your loops .
PS I'm not entirely sure that my way of inserting Nans in the xs , ys arrays is the fastest , but it probably doesn't really matter .
( instead of ` show() `) .
Another option is turning off the clipping of the line , using the ` clip_on ` keyword : ` plt.plot ( xx , yy , ' o ' , clip_on=False )` :
Matplotlib mathtext does not understand basic delimiters with right / left
When using ` \left ` and ` \right ` in matplotlib with mathtext parsing , it doesn't recognize useful delimiters .
In fact , if I turn on TeX processing with ` matplotlib.rcParams [ ' text.usetex '] = True ` , then these examples both work .
Given coordinates of ` [ 1 , 5 , 7 , 3 , 5 , 10 , 3 , 6 , 8] ` for ` matplotlib.pyplot ` , how do I highlight or colour different segments of the line .
If you don't want to have dots then comment the command ` plt.scatter ( x , y , c=z , s=20 )` .
This works fine except for elements in ` hist2d ` that are zero .
1e-6 may be too small , but plt.fill_between ( x , y , 1 , color= ' 0.8 ') works fine !
I ended up discovering the numpy.histogram as you suggested and it did the job perfectly !
matplotlib auto yaxis
You could subclass ` ArtistAnimation ` and overwrite the _step - method , e.g. : #CODE
Excessive memory usage in Matplotlib imshow
( application with imshow commented out used 60mb of memory , vs 206 with it ) The problem gets worse as images are displayed in multiple figures as each one uses an additional 200m of memory .
I had a slightly similar problem and I solved it by using ` draw() ` instead of ` show() ` and deleting the imshow object .
For example : ` self.im =imshow ( your_data )` , ` draw() ` , ` del self.im ` .
When it goes to jpg files , imshow() is using PIL if installed .
Why doesn't pyplot.show() work ?
I started with Matplotlib 0.99 and realized that I really need the new feature of " triplot " in the newer versions .
` pyplot.show() ` did work in the old version of matplotlib 0.99 .
2.Or define your backend inside your matplotlibrc file ( as given by matplotlib.matplotlib_fname() ): #CODE
What you are describing sounds like ` imshow ` to me .
By using matshow() , keyword arguments are passed to imshow() .
matshow() sets defaults for origin , interpolation ( = ' nearest ' ) , and aspect .
Just call ` fig.tight_layout() ` as you normally would .
Passing pyplot points as arguments
Let me try using scatter() not plot()
So you can call ` fig = plt.figure() ` then ` fig.savefig ( ... )` .
@USER In ` plt.savefig ` you can change the dpi , see the link in the answer .
@USER you can call ` plt.ioff() ` which should disable interactiveness in ` matplotlib.pyplot ` commands .
` plt.ioff() `
` plt.ion() `
For starters : do you call ` figure.show ` ?
In general , I'd suggest not using ` from pyplot import * ` .
You can do this more simply using ` plot() ` instead of ` plot_date() ` .
` plt.imshow ( g , cmap= " Greys ")` would do the same thing .
customize the display using a strftime formatting string
matplotlib : custom projection for hemisphere / wedge
Try using ` plt.ion() `
Defining a discrete colormap for imshow in matplotlib
for why ` LinearSegmentedColormap ` shows strange color , I think this link would be helpful .
I think it should be ` numpy.add ( ... )` .
So l is an object of type line2D .
So calling ` plt.scatter ( iris.field ( 0 ) , iris.field ( 1 ) , c= iris.field ( 4 ) , cmap= ' RdYlGn ' , norm=norm )` fails .
If you want a more concise call , ` plt.plot ( x , y , ' o ')` will do the same thing as ` plt.plot ( x , y , linestyle= ' none ' , marker= ' o ')` .
With ` ion() ` , the ` show() ` command is no longer needed .
just call ` adjust_y_axis ` as above before ` plt.show() ` .
@USER : You might try calling ` plt.clf() ` after your call to ` plt.savefig() ` .
The wxPython demo has an example of PyPlot .
from numpy.lib import add_newdoc
figlegend may be what you're looking for : #URL
` figlegend ` , as sugested by Evert , seems to be a much better solution ;)
` matpy ` : Access MATLAB in various ways : create variables , access .mat files , direct interface to MATLAB engine ( requires MATLAB be installed ) .
I had to make only one minor adjustment to it : ` idx =( numpy.abs ( xvalues- )) .argmin() ` .
using plt.plot ( x , y1 , x , y2 ) produces this graph
The threshold is defined during the pcolormesh : #CODE
I saw an example on scipy docs with meshgrid .
( i.e. ` im = plt.imshow() ` and then ` im.set_data ( new_data )`)
Basically , figure.colorbar() is good for both images , as long as their are not with too different scales .
I don't know why your line2D is not appearing .
I added to my code before plt.show() the following and everything is showing : #CODE
ax.add_line ( l1 ) }
However , I came here with another issue : not every ` numpy.ndarray ` of type ` uint8 ` can be displayed .
` red = frame [: , : , 0 ] .copy() ` fixed that .
Without importing numpy , they type returned is ` numpy.ndarray ` .
Otherwise , you'll need to re-implement its ` view_limits ` method if you want autoscaling .
import matplotlib.pyplot as plt
Can you try doing ` plt.savefig ( ' filename ')` and seeing if the PNG comes out correctly as well ?
fig = plt.figure ( **figprops ) .
File " C :\ Python32\lib\ site-packages \matplotlib\ mlab.py " , line 2656 , in rec2csv
matplotlib draw() freezes window
Rather than ` fig.add_subplot ( 111 )` followed by ` fig.add_subplot ( 212 )`
` markersize ` can be a kwarg to ` plot() ` , or you can abbreviate as ` ms ` .
One of these is plt.subplots_adjust ( wspace=0 , hspace=0 ) .
@USER : you can do subplots_adjust() using this approach .
How to maximize a plt.show() window using Python
I then call savefig() as required with an increased DPI per silvado's answer .
section = np.arange ( -1 , 1 , 1 / 20 . )
Looks like ` set_rasterization_zorder ` is the way to go .
@USER : Although ` np.all ` and ` np.any ` are capable of short-circuiting , the argument passed to it is evaluated before ` np.all ` or ` np.any ` has a chance to short-circuit .
Instead of using suggested code above , simply using a ` numpy.logical_and ( a , b )` would work .
Yes , ` numpy.logical_and ( cond1 , cond2 )` works perfectly .
I've tried using plt.draw() , but nothing happens with that command .
` set_xlim ` and ` set_ylim ` are arguably a more readable way of doing it .
@USER I also only have mpl version 1.0.1 , and i think ` tight_layout() ` is for 1.1 + .
' mpl_toolkits.axisartist ' , ' matplotlib.sphinxext ' , ' matplotlib.tri ' ,
fig.savefig ( ' samplefigure ' , bbox_extra_artists =( lgd , ) , bbox= ' tight ')
What does ` ax.grid ( ' on ')` do ?
` ion() ` and ` draw() ` won't block in Python .
-> Setting savefig.dpi directly with matplotlib.rcParams [ ' savefig.dpi '] = 80 .
Overlay imshow plots in matplotlib
import matplotlib.pyplot as plt
plt.show()
` norm.pdf ` can work on a ` numpy.array ` .
So , you can write ` plt.plot ( range , norm.pdf ( range , 0 , 2 ))` .
import matplotlib.pyplot as plt
plt.plot ([ 1 , 2 , 3 ])
plt.ylabel ( ' some numbers ')
plt.show()
from dateutil.rrule import rrule , MO , TU , WE , TH , FR , SA , SU , YEARLY , \
Apparently , with the ` imshow() ` command the window that pops up still has the TKinter logo , and not my app one .
so when I press ` show() ` the window has the icon I want .
What does .shape [ ] do in " for i in range ( Y.shape [ 0 ])" ?
This program uses numpy , scipy , matplotlib.pyplot , and cvxopt .
Try with the ` clf() ` command of matplotlib
I don't want to call errorbar 1600 times ...
Found another solution that may be working more reliably than ` set_xlim ` : #CODE
` counts = np.array ([ 0 , 125 ,..., 0 ] , dtype= np.float )` and then ` counts [ counts == 0 ] = 1e-7 ` .
Check out the ` matplotlib.units ` documentation for more information .
For example , replacing get_color with a different generator : #CODE
Here is the code of xticks() : #CODE
As an example of using ` cla() ` : #CODE
Just specify ` aspect= ' auto '` to ` imshow ` .
When I try to capture the instance of a Line2D class on the canvas in the line #CODE
Something like ` ax.xaxis.set_major_locator ( MaxNLocator ( 4 ))` but globally
Try putting the ` np.genfromtxt ` line inside the try block .
I think ` tight_layout ` was added in 1.1 , though it might have been 1.0 .
The line ` ax.set_ylim ( 0 )` does the trick .
Just is case somebody asks ( like I did ) , this is also possible when one uses subplot2grid .
I am using the ` pyplot ` api which is recommended for programming ( see : #URL ) #CODE
Try using ` ax = Axes3D ( fig )` instead of ` add_subplot ( 2 , 1 , 1 , projection= ' 3d ')` .
For me using [ this ] ( #URL ) demo code , but replacing ' fig.gca ( projection= ' 3d ')' for ` Axes3d ( fig )` and then adding ` ax.view_init ( 20 , -120 )` , it works fine .
For me changing ` update_line.background = canvas.copy_from_bbox ( ax.bbox )` to ` update_line.background = canvas.copy_from_bbox ( ax.get_figure() .bbox )` and ` canvas.blit ( ax.bbox )` to ` canvas.blit ( ax.clipbox )` made it work .
Maybe easier via ax.text ( ... ): #CODE
Useful for those of us still on matplotlib 0.99 without gridspec !
Link to [ Gridspec ] ( #URL )
` np.histogram2d ` works also , no need to import ` scipy `
But ` plt.axvline ( x=span2Stop , lw= ' 0.3 ' , c= ' 0.5 ')` causes a broken pdfmark in the exported pdf if included in latex as a pdf .
I have weird behaviour of matplotlib.pyplot .
But if I substitute plt.scatter by plt.plot , then it plots it .
Oh , bar() is a graphing tool ?
Have you tried using ` subplots_adjust() ` ?
Though I don't really understand this ` ax.plot ([ 1 , 2 , 3 ] , [ 5 , 6 , 7 ] , ' gs- ')` but gives me the correct output
As far as ` ax.plot ` is concerned , see here : #URL
Btw , note that artists Matplotlib 1.2.1 documentation : class matplotlib.patches.Rectangle states that there is
` figure.suptitle ` returns a ` matplotlib.text.Text ` instance .
plt.subplots() opens multiple windows
Alternatives to matplotlib.pyplot.annotate ?
Methods on that object include ` set_xlabel ` and ` set_ylabel ` , as described by Chris .
Matplotlib and Pyplot.close() not releasing memory ?
What you could try is explicitly using the del operator on pyplot objects once you're done with them .
have you tried ` plt.clf() ` ?
` plt.clf() ` doesn't help .
I didn't know about gca() .
@USER : If you are talking about matplotlib , then no , csv2rec takes a filename or file-like object , not a string .
@USER : The ` with ` block implicitly ` close() ` s the file , even if an exception occurs within the block .
pyplot.errorbar : #CODE
Scattered x , y , z via python's matplotlib.pyplot.contourf
X , Y = np.meshgrid ( xi , yi )`
` numpy.interp ` does little help here , while both linear and nn interpolaton of
` zi = matplotlib.mlab.griddata ( x , y , z , xi , yi , interp= " linear ")`
X , Y = np.meshgrid ( xi , yi )`
_ ` zi = matplotlib.mlab.griddata ( x , y , z , xi , yi , interp= " linear ") _
Let's check what ** numpy.interp ** and even more straight for the case ** matplotlib.mlab.griddata ** can do here ..
` xi = np.linspace ( 0,10,300 ); yi = np.linspace ( 0,6,300 )` .
Give it a go without that line and see if the ` plt.text ` call still works .
Well , if you have four columns , you'd need to unpack things into four variables ( e.g. ` x , y , z , mag = np.loadtxt ( ' data.txt ') .T `)
That is what imshow in matplotlib would do .
I encounter the problem that xtick labels intercept one with each other .
The whole plt.figure routine should look something like this : #CODE
` pcolor ` is slower , but will handle arbitrary meshes .
" matplotlib does not support Python 3 " - as a matter of fact it does , I just installed it from the github repository mentioned by @USER .F .Sebastian .
from matplotlib import pyplot as plt
from matplotlib.colors import is_color_like
import matplotlib.cbook as cbook
from matplotlib import pyplot as plt
python pyplot annotations
For example , in a log10 scale : [ 2 ,
These keyword arguments are different to ` Axes.set_ylim ` , which accepts the keyword arguments ` bottom ` and ` top ` .
Edit : fixed keyword argument to ` set_xlim ` based on Chris's suggestion .
The keyword arguments to ` Axes.set_xlim ` are ` left ` and ` right ` .
Matplotlib imshow - Displaying different colours
I was wondering whether this feature has been built-in via specgram which I believe isn't the case .
If not , then the best possible way to implement this using specgram or via matplotlib .
@USER That doesn't work with specgram plots .
See for example the functions ` plot_specgram ` and ` specgram ` in [ this ] ( #URL ) script for example .
You can run ` plt.close() ` to free up the allocation , however there has been some discussion that this method has lead to memory leaks in the past .
Why do you say that reusing plt.figure will lead to memory issues ?
If you run plt.close() won't that free up the memory ?
@USER Yes calling ` plt.close() ` will free up the allocated memory .
@USER - good point about finish() .
` pcolor() ` works too .
plt.xticks ( 1 ) File " / usr / lib / pymodules / python2.6 / matplotlib / pyplot.py " , line 998 , in
locs = ax.set_xticks ( args [ 0 ]) File " / usr / lib / pymodules / python2.6 / matplotlib / axes.py " , line 2064 , in
set_xticks
set_ticks
I have tried lots of different combinations of the ax.plot() part , but if I change it to : #CODE
( I'm using matplotlib.path )
ax.autoscale() worked with the combination of removing the transformation .
What does the c underscore expression ` c_ ` do exactly ?
Try running ` c_ ?
c_ ?
( Notice that this was ` subplots() ` not the plain ` subplot() `) .
It has some weird behavior if you run it after e.g. legend() .
x = randn ( 10 , 10 )
imshow ( x )
` ax.set_yticklabels ([ 1.4 , 1.6 , 1.8 ] , va= " bottom ")`
after your ` set_yticks ` call .
ax.set_autoscale_on ( True ) doesn't seem to work .
setp ( l.get_texts() , fontsize=12 )
setp ( l.get_title() , fontsize=12 )
ret = ax.set_ylim ( *args , ** kwargs ) File " C :\ Python27\lib\ site-packages \matplotlib\ axes.py " , line 2642 , in
set_ylim
if ( not np.isfinite ( vmin )) or ( not np.isfinite ( vmax )): NotImplementedError : Not implemented for this type
Is the only way to do it using matplotlib.patches with draw_artist or something similar ?
Just noticed that you were looking for something in matplotlib.pyplot .
A search of the ` matplotlib.pyplot ` API documentation does not reveal anything , so I'm afraid you'll have to live with using ` matplotlib.patches.Ellipse `
I would've expected pyplot to include some basic shape-plotting functionality , but I suppose one can't have everything !
See Chris's response above for a link to ` matplotlib.patches.Ellipse ` .
` np.random.randn ` is a psuedo-random number generator .
As @USER states in he's answer ( see post ) using animation.FuncAnimation was the way for me .
try ` plt.plot ( X , Y , marker= ' o ' , markeredgewidth=0 )`
with ` plt.savefig() ` : , with ` im.save() ` :
` import matplotlib.pyplot as plt `
` fig = plt.figure ( figsize =p lt.figaspect ( 0.75 ))`
` ax2 = fig.add_subplot ( 111 )`
` plt.draw() `
The colormap is defined by the ` cmap ` argument in ` ax.imshow() ` .
Notice the ` plt.cla() ` call .
I know I can manually change the limits using ` pyplot.ylim ( ... )` , but I don't know what to change them to .
The approrpiate methods are axes.relim() and ax.autoscale_view() method .
Try pyplot.setp .
File " / usr / lib64 / python2.7 / site-packages / matplotlib / pyplot.py " , line 183 , in setp
File " / usr / lib64 / python2.7 / site-packages / matplotlib / artist.py " , line 1199 , in setp
AttributeError : ' datetime.datetime ' object has no attribute ' set_rotation '
zh is a Line2D object : #CODE
zh is a line2D object . see edit .
Their ` get_visible() ` attribute is True .
The traceback is telling you that ` arange ( l , r )` is not the same length as ` projection ` .
And I intend the ` arange ` to generate the limits for ` projection `
ret = ax.barh ( bottom , width , height , left , ** kwargs )
return date2num ( value )
else : return np.asarray ([ _to_ordinalf ( val ) for val in d ])
Gridspec : #URL
I have read trough the Matplotlib documentation on text() and annotate() to no avail .
plt.xticks ( size=size )
The method Axes.relim() looks like a good candidate .
There could be optional arguments to Axes.relim() that specify a window in x or y .
` date2num ` expects ` datetime ` objects .
matplotlib.dates.date2num ( d ): d is either a datetime instance or a sequence of datetimes .
So If you do matplotlib.use ( ' Qt4Agg ') right after importing matplotlib , and let pyplot spawn a window .
I have never tried this , ` fig.set_size_inches ( w , h )` should do the trick .
The ` .format ` form is the preferred way to do string formatting now as opposed to the ` % ` operator .
Is the easiest solution subclassing LogNorm ?
Since 1.3 matplotlib has a SymLogNorm .
You can call legend() only once : #CODE
Closing pyplot windows
What I found on the subject of closing pyplot windows is that it really probably shouldn't be done using pyplot .
` par_plot ` is a handle to the line2D instance .
The ` par_plot.set_ydata ( y_data )` changes the ydata property of the Line2D object with the handle ` par_plot ` .
Ja , python isn't really supposed to be used with plt.ion() .
to read csv by loadtxt() , you just past the filename : ` np.loadtxt ( etf+ ' .csv ' , dtype= ... )`
TypeError : __init__() got an unexpected keyword argument ' dtype '
The matplot commands show() and savfig() don't seem to be suited to the task either .
Did you try removing NaNs from ` a.types_pivot [ ' video '] .values ` ?
Apparently that type overrides ` __mul__ ` ( and ` __rmul__ `) such that ` m*sequence ` returns ` int ( m ) *sequence ` .
` set_title() ` doesn't work for tables , do you know of some way to do it ?
You can do a waterfall in matplotlib using the PolyCollection class .
That is an object being returned from pylab after using the " imshow " command .
Here we are setting both the xtick locations and labels .
* axis.set_ticklabels ` does .
Or , for that matter , numpy.genfromtxt .
Move plt.xticks ( rotation=70 ) to right before the two avail_plot calls , eg #CODE
I am currently having some difficulty with the interpolation produced by griddata in matplotlib .
That is because the range of xaxis yaxis doesn't change to new data's range , change your refreshFigure as following : #CODE
Try ` plt.savefig ( " figure.png " , bbox_inches= " tight ")` .
You can adjust that using plt.xlim() and plt.ylim() as described above .
accessing / segmenting columns in a numpy recarray
I bring this into a numpy recarray using csv2rec .
Try ` ListedColormap ` with ` BoundaryNorm ` .
setting colours in matplotlab pcolor
Imshow assumes equidistant x and y coordinates .
Pcolor also works for non equidistant and non rectilinear coordinates .
Try ` plt.xlim ([ 1 , 2**14 ])` instead .
@USER : sure , but ` plot_date ` doesn't know anything about datetime64 as far as I know ( you also mention this in your question ) .
-1 as I don't think , that ` plot_date ` directly supports numpy datetime64 arrays ( up to now ) .
Matplotlib refers to these as xtick labels .
matplotlib.colors.Colormap.set_under ( cmap , color =( 0.4667 , 0 , 0.5333 ))
` from matplotlib import pyplot as plt
from numpy import arange , meshgrid
from matplotlib.colors import Colormap
x , y = arange ( -10 , 10 ) , arange ( -10 , 10 )
Colormap.set_under ( cmap , color= ' k ')
cs = plt.contourf ( x , y , z , clevs , cmap=cmap )
plt.colorbar ( cs )
plt.show() `
pyplot zooming in
to your code before ` plt.show() `
You need to call matplotlib.use before importing pyplot .
` tick_params ` should do it .
I haven't used basemap , but it looks like what you want is the scatter() method :
Which takes the same parameters as the matplotlib.pyplot.scatter method :
x , y , z = np.loadtxt ( " fit3.dat " , unpack=True )
Doing the same for yaxis and zaxis is pretty straightforward
File " / sdss / ups / prd / numpy / v1_6_1 / Linux / lib / python2.7 / sitepackages / numpy / lib / npyio.py " , line 794 , in loadtxt
matplotlib.pyplot and matplotlib.pylab ?
Matplotlib is the whole package ; pylab is a module in matplotlib that gets installed alongside matplotlib ; and matplotlib.pyplot is a module in matplotlib .
@USER What , then , if not pyplot , for scripting ?
using show() and close() from matplotlib
Matplotlib ion() and subprocesses
( numpy arrays can be transposed with .T by the way i.e. ` y.T `) .
X = [ x for x in np.arange ( .8 , 1.2 , .05 )]
X = np.arange ( .8 , 1.2 , .05 )
The arrays of x and y are those created by numpy.meshgrid .
As far as I know and have read , ` pyplot.imshow() ` is the best way to accomplish this .
Another question is whether you are flexible about using pcolor instead of imshow .
I think pcolor is fine .
` pcolormesh ` looks like a faster way to do the same thing .
" pcolormesh uses a QuadMesh , a faster generalization of pcolor , but
` pcolormesh ` seems to be a nice alternative .
I have added ` pcolormesh ` in my edited answer .
There's also ` pcolorfast ` , which I haven't tried
This is better than ` pcolor() ` and ` pcolormesh() ` because
I am generating a pyplot using the following code : #CODE
Matplotlib Figure() ( Case Sensitive ) Does not have attribute figlegend
( If i imported like ` from matplotlib import pyplot as plt `)
The code for figlegend : #CODE
I was wondering if you ever tried pcolor instead of histogram_2d ?
In this case , pcolor and pcolormesh will produce the same result .
I did not know about ` histogram2d ` .
I see there's also ` hexbin ` .
python pyplot connecting points
I added ` self.axes.add_artist ( line )` and ` self.axes.add_artist ( vertex )` and ` self.axes.add_artist ( polyline.label )` under each draw_artist call .
Actually , because you are doing ` axes.plot ` you don't need to ` add_artist ` .
Sphere is easy you just have a Vector ` .center ` and ` .diameter ` .
The most useful comes from parametric equation , you have a direction in Vector ` .direction ` and some staring point ` .center ` .
We assume that ` .direction ` is unit length , and ` .center ` is the nearest point on line from ( 0 , 0 ) .
Try using ` matplotlib.pyplot.ticklabel_format ` : #CODE
class matplotlib.ticker.ScalarFormatter ( useOffset=True ,
useMathText=False , useLocale=None ) Bases : matplotlib.ticker.Formatter
Gtk , Qt4 , WxPython etc .?
The ` autofmt_xdate() ` call is particularly useful for making the x-axis labels readable .
Pandas xaxis auto-format issue
I am not so interested in the counts within each hexbin .
I am using matplotlib.pyplot.hexbin
I don't really understand what it means to " write the imshow() method " , so I guess that means that I didn't write it .
Sorry , I meant " did you create the imshow() method yourself or are you using one that already existed " .
I suspect the problem is that ` LineCollection ` will not do what you want .
That's why i need to include the close() command or something similar .
Are you doing other things , like adding callbacks etc .?
` fig.delaxes ( ax )
File " / usr / lib / pymodules / python2.7 / matplotlib / figure.py " , line 619 , in delaxes
Stack.remove ( self , self._entry_from_axes ( a )) File " / usr / lib / pymodules / python2.7 / matplotlib / figure.py " , line 72 , in _entry_from_axes ind , k = dict ([( a , ( ind , k )) for ( k , ( ind , a )) in self._elements ]) [ e ] KeyError : `
There is a class matplotlib.axes.AxesSubplot , but the module matplotlib.axes has no attribute AxesSubplot
To summarize , there is a class ` matplotlib.axes.AxesSubplot ` , but the module ` matplotlib.axes ` has no attribute ` AxesSubplot ` .
Look in ` matplotlib.axes._subplot_classes ` : you should see ` { matplotlib.axes.Axes : matplotlib.axes.AxesSubplot } ` .
I am trying to download the same to run matplotlib.animation .
But without a separate download how come matplotlib.animation is fine ?
I'm using the imshow task form matplotlib .
Although ` loadtxt ` has lots of options , often you need finer control than it gives .
I did have plt.show() in my original code .
It seems the obvious solution to this lies in FuncAnimation , but that really just confuses me way too much .
But the equivalent ` ravel() ` is better , as it is meant specifically to indicate a conversion to 1D .
Adding ` ravel ` as another alternative for future searchers .
` arr1d = np.ravel ( arr2d )`
` arr1d = np.reshape ( arr2d , -1 )`
You can pass just ` left ` or ` right ` to ` set_xlim ` : #CODE
I used this instead : plt.gca() .set_ylim ( ymin=0 )
Hi Drew , No , I just copied the output of plt.hist ( ... ) .
Try changing the line ` ax.plot ( xs = x , y , z , xdir= ' x ')` with ` ax.plot ( xs = x , ys-y , zs=z , xdir= ' x ')`
Note that you can reproduce a meshgrid by yourself once you know how a meshgrid is built .
Try using ` ion ` from ` matplotlib.pyplot ` : #CODE
I took out ion() and it worked well !
imshow did the job , thank you !
I had a friend run the size() command in MatLab for this code and he came up with these shapes for the arrays #CODE
Adding hexbin plots together
How can I display a np.array with pylab.imshow()
the np.array that results from this loop has 4383 rows and 6 columns .
Before the ' plt.show() ' .
Issue with csv2rec and polyfit
Docs for matplotlib.finance
plt.plot ( x , y , ' ko ' , marker=r ' $\downarrow$ ' , markersize=20 )
How about just changing the y-axis limits using ` matplotlib.pyplot.ylim ( ymax= 7.5 )` .
before the ` show() ` .
The documentation of Line2d can be found here .
This works great ... until I have a suptitle which gets ignored by it .
( ` plt.savefig() ` will not work in that case . )
thank's i'm thinking matplotlib.dates.drange ( dstart , dend , delta ) is what i need
` numpy.polyfit ( x , y , deg , rcond=None , full=False , w=None , cov=False )`
Try using ` numpy.linspace ` as shown in my edit .
A bug in axvline of matplotlib ?
From the documentation in ` help ( axvline )` :
you change them , eg . with the : meth : ` set_ylim ` command .
` coll [ 1 ] .set_color ( " r ") # this does not work , coll not indexable this way `
Probably you need to call ` plt.draw ` before ( or instead of ) ` fig.show ` .
You can calculate this very quick by using broadcasting of ndarray : #CODE
To resolve that problem just call ` plt.show() ` once after your loop .
But after moving the plt.show() method to after the loop ...
The drawnow ( makeFig ) line can be replaced with a makeFig() ; plt.draw() sequence and it still works OK .
In my code , I import matplotlib using ` from matplotlib.pyplot import * ` .
In numpy , it's overloaded to operate as logical not on boolean arrays ( e.g. ` ~ np.array ( False ) == True `) , but this isn't the case for anything else .
is plt.bar ( x , y , color= " None ") what you want ?
show() has stopped working in pylab .
It's still a bit strange , because I'd still expect ` get_position() ` to return the proper coordinates .
plot_date
for i1 in arange ( 1,100 0 ):
draw()
waitforbuttonpress ( timeout= 0.5 )
Yes , I tried the _interactive mode_ ( I'm not sure what it is ) , with the ` ion() ` command .
python - downscale output of pyplot.specgram
How can I downscale the output of specgram maintaining the same input ?
I have a program that opens two windows : one is a pygame window while the other is a pyplot window which records the interactions being represented on the pygame window .
If I were you I would just call ` ax.contour() ` and ` fig.canvas.draw() ` .
I think this could be done most simply by doing ` y_mean = [ np.mean ( y ) for i in x ]`
` get_view_interval() ` is ?
` yLimits = matplotlib.pyplot.yticks ( get_view_interval() )` ?
Disable the output of matplotlib pyplot
own using matplotlib.colors.LinearSegmentedColormap .
I tried setting the limits with a call to ax.set_ylim ( 90 , 0 ) but this results in a LinAlgError exception being thrown .
interpolation with matplotlib pcolor
no , ` pcolor ` doesn't do interpolation .
You can try ` NonUniformImage ` or even ` imshow ` instead .
The pcolormesh had an interesting result but it seemed almost too fuzzy .
` ax = fig.add_subplot ( 111 ); `
` ax.set_rasterization_zorder ( 1 ); `
` ax.plot ( ts [ 0 ] , ys.T , color= ' r ' , lw= 0.5 , alpha= 0.5 , zorder=0 )`
Actually , you can do it a lot easier with ` plt.plot ( M.T )` - as in the answer below .
plt.xticks ([ 0,24,48,72,96,120 ] , [ 0,24,48,72,96,120 ])
Removing just one layer in pyplot
It's not that good of an idea , though , as this option is notably slower than giving an explicit ` dtype ` .
You have a typo ; it's supposed to be ` ax.set_xticks ( xinterval )` , without the ` = ` .
No need for the ` set_xticklabels ` command .
How to force color mapping to a dynamic range larger than the particular input to imshow in matplotlib
I have points on a X , Y meshgrid .
Instead of ` plt.show() ` , from within your callback call ` plt.draw() ` .
@USER , would this approach work for frames which include fill_between() and vlines() or is this only suitable for plot() ?
` using ` plt.xticks ([ " True "])`
See the documentation for set_xticklabels .
To do this , I used matplotlib and a barh .
It is quite different than ` np.mean ( rgb , -1 )` .
why ` .convert ( ' LA ')` ?
Yet another rgb_to_gray : ` np.dot ( rgb [: , : , : 3 ] , [ .299 , .587 , .114 ] )`
Otherwise you will have to do it by hand with ` subplots_adjust ` .
Also look into ` GridSpec `
It should be ` fig.colorbar ` instead of ` axes.colorbar `
If you are starting ` ipython ` with the ` -- pylab ` option , you shouldn't need to call ` show() ` or ` draw() ` .
And then just ` plt.draw() ` in your loop .
` fig.show() ` seems not to , however the buttons probably will not work like this ( I didn't try ) .
What about the plt.ion() option ?
import matplotlib.pyplot as plt
` matplotlib.pyplot.scatter ([ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , color =[ ' red ' , ' green ' , ' blue '])`
But axvspan worked like a charm .
Does numpy hist2d do what you want ?
Specifically in the third argument of : plt.plot ( x , y , ' k , ')
An alternative is to try ` imshow ` .
From [ this website ] ( #URL ) I see that it is ` arctan ( y ) /( x )` , but you are using ` arctan2 ` .
You may notice that ` arctan ` takes a single parameter .
Matplotlib , mathtext findfont issue in py2exe app
You've done a good job of finding what appears to be the root problem ( ` findfont ` not working ) .
There seem to be many ways to do this manually but I need to do this using ` numpy.where() ` .
It seems like the result returned by griddata is transposed - it gives the x-axis along the columns and y-axis along the rows : #CODE
Could you explain this bitwise_and and how this works , please ?
However , Paul H ' s answer points to the submodule called gridspec which might make the above easier .
How do I tell imshow the same thing ?
The quick answer is ` fig.subplots_adjust ` , setting hspace to a larger value .
mlab.griddata bug ?
g = scipy.mgrid [ 0:10 + 0.70135 : 0.70135 ]; g = np.sort ( g );
g = np.hstack ( ( -g [: : -1 ] , g [ 1 :]) )
g = np.hstack ( ( -g [: : -1 ] , g ) ) return g
They don't seem to be ticks , since the ` ax1.get_yaxis() .set_ticks ([ ])` statement does not affect them .
According to the documentation , there's an experimental ` block ` parameter you can pass to ` plt.show() ` .
matplotlib using twinx and twiny together ( like twinxy )
Can I have both twinx and twiny together ( i.e. something like twinxy ) ?
I'm trying something with OffsetImage as suggested here : #URL
If you want to keep the for loop , you can arrange your plots with ` subplot2grid ` , which allows for a ` colspan ` parameter : #CODE
Do not call ` plt.polar ` once for every point .
Nor for the ` xaxis ` and ` yaxis ` , while the latter variants do work for for two dimensional plots .
I can generate a hexbin diagram like this ( code taken from #URL ) #CODE
In ipython notebook , I just do ` setp ( gca() .get_legend() .get_texts() , fontsize= ' small ')` .
ret = gca() .legend ( *args , ** kwargs )
a = arccos ( ( a1 * a2 ) / ( |a1| * |a2| ) )
matplotlib imshow editing x-axis
Try replacing ` plt.plot ` call with a ` print ` that outputs ` i ` and parameters you pass to ` plt.plot ` .
Matplotlib imshow adjacent images with anomalous whitespace - is there a way to correct it ?
set_dashes ( ls )
alias for set_linestyle
set_linestyle ( ls )
How to maximize a plt.show() window using Python
Try using ' Figure.set_size_inches ' method , with the extra keyword argument ` forward=True ` .
And I see that ` axes.titlesize ` does not affect ` suptitle ` .
I'm using plt.scatter , and None fails to work
Note that according to this [ SO note ] ( #URL ) , one should not import pyplot when embedding .
cax1 = plt.axes ( axisbg= ' none ' , frameon=False )
and later plt.draw() if needed .
plt is matplotlib.pyplot ( which I think is also visible via pylab . * )
What does matplotlib ` imshow ( interpolation= ' nearest ')` do ?
matplotlib.use() must be called * before * pylab , matplotlib.pyplot ,
On the other hand , addressing the ` cells ` directly works : try ` cells [ 0 ] .set_width ( 0.5 )` .
I have tried calling ` fig.savefig ( savefile , bbox_inches=0 ` , but to no avail .
It added persistent traces until I added plt.clf() .
from matplotlib.pyplot import *
I used import matplotlib.pyplot as plt
You are not using the same ` colormap ` in ` imshow ` and ` cbar ` .
Surely , there is a simpler way then the zip vstack zip method below .
` np.vstack ` along ` axis=0 `
` np.hstack ` along ` axis=1 `
` np.dstack ` along ` axis=2 `
In your case , the ` np.hstack ` looks what you want .
before plt.savefig
I have made a line graph in python with pyplot / matplotlib : #CODE
How do I make pyplot do that ?
` pyplot.xticks ( np.arange ( 0 , 26 ) , string.lowercase )` works !
I've used ` plt.xticks ( range ( 26 ) , [ chr ( 97 + x ) for x in xrange ( 26 )])` below .
Closely related question : #URL and a great solution : ` pyplot.locator_params ( nbins=4 )`
For example ` matplotlib.dates.AutoDateLocator() `
A tiny adjustment : usually ` ax.get_xticklabels() [ 1 :: 2 ]` are the labels to be hidden .
It may be because you fit with a linear fit ` polyval ( xdata , ydata , 1 )` .
And does it even looks okay in an ordinary ` plt.plot ( ... )`
Then define a method ` show() ` that calls ` plt.show() ` .
` imshow ( A , ylabel=lambda i : freqs [ i ] , xlabel=lambda j : j / 44100 )`
If I removed ' plt.ion() ' statement , then it worked just fine .
So , it works as you expect if you leave out ` plt.ion() ` ?
You could have just called ` draw() ` .
Looks like pause() does in fact call draw() , which means if you're using pause() Don't Call draw() as there's no need to call it twice .
` plt.minorticks_on() `
I am trying to import Pylab using the ` import matplotlib.pyplot as plt ` .
So you can just do ` pyplot.xticks ([ 0.001 , 0.0033 , 0.0066 , 0.01 , 0.033 , 0.066 , 0.1 , 0.33 ])` .
Chart barh matplotlib - overlap bars
I'm new user of matplotlib and I have a problem with chart barh : overlap bars .
This doesn't seem to work well in combination with ` tight_layout ` ..
@USER yes , ` tight_layout ` still doesn't seem to play nicely with non-standard placements .
This also works for ` plt.suptitle() ` , but not ( yet ) for ` plt.xlabel() ` , etc .
appending / joining two recarrays created by mlab.csv2rec ( file )
The recarray has several fields for example : #CODE
Check the numpy meshgrid and the plot_surface methods
You could automate this using ` FuncFormatter ` and a string formatting to make sure that your labels and ticks stay synced .
Could you tell me more about ` FuncFormatter ` ?
imshow ( img , cmap= cm.gray ) shows a white for 128 value
Seems to be a problem with ipdb ... the following statement works : ipdb > for i in np.ndindex ( *sh ): print i
For me , ` [ i for i in np.ndindex ( * ( ))]` is ` [( )]` , while for you , it is ` [( 0 , )]` .
I just checked -- the code for ` np.ndindex ` is the same for versions 1.5.1 and 1.6.2 .
The definition for ` ndindex ` should look like [ this ] ( #URL ) .
If you type ` np.ndindex ??
@USER .F .Sebastian : that's a good idea .
It may also be worth considering ` numpy.logspace ` for creating ` w ` .
Matplotlib imshow() stretch to " fit width "
attribute ' set_color ( " b ")'
So another solution is to switch your backend , for example with ` matplotlib.use ( ' TkAgg ')` .
Using ion() from pylab causes matplotlib to hang
Fortunately , I found a workaround using pcolormesh() .
pcolormesh() plots a quadrilateral mesh and allows you to specify the corner coordinates .
Did you try ax.set_ticks ?
Am I doing something wrong here , or is this some kind of bug in genfromtxt ?
I've tried a few things with ` Line2D() ` resulting in nothing but confusion on my part .
Using ` vlines ` : #CODE
Minor correction , the code above should read ` x = np.arange ( 1 , 101 )` .
plt.axvline ( x , color= ' r ')
What's the correct usage of matplotlib.mlab.normpdf() ?
But now I thought about just using ` pyplot.table ` which seems to be very easy .
I think PolyCollection is the key .
I found a way that worked fine until I tried using twiny() .
The ` get_majorticklabels ` functions will work out if you ' ll need ` label1 ` or ` label2 ` and simplifies your script : #CODE
OK , Camera position is the wrong way of thinking concerning the .dist value .
Its equivalent here would be with ` numpy.linspace ` : #CODE
This way you can specify the x and y location of the errorbar .
But this is a bit like doing the x-axis using ax.annotate , possible but not ideal .
I got this to work using matplotlib's hexbin the following way : #CODE
Sure , you can call the .text method on the ax , given the code above it would become :
ax.plot ( Ss , Az , color= ' green ' , marker= ' s ' , markersize=5 )
ax.text ( Ss , Az , PRN , color= ' red ' , size=15 )`
I would recommend using the OO interface to ` matplotlib ` rather than the ` pyplot ` interface for anything programmatic .
BufferRegion is cleared by a call to clf()
( as far as I know , plt is alias of matplotlib.pyplot , but I don't know the alias for the matplotlib itself )
The ` tick_params ` method is very useful for stuff like this .
PolyCollection doesn't work
I have a problem with PolyCollection matplotlib when I work with python 2.5 .
You didn't give a value to the ` delimiter ` parameter . therefore , ` np.genfromtxt ` uses the default ` None ` and try to separate the fields using spaces .
I have been trying to follow the interpolation / pcolor example I linked to , but have been unsuccessful .
Python - Matplotlib FuncAnimation - Mac - Not returning points
As you can see , the xlabels ( despite being rotated w ` fig.autofmt_xdate() ` are overlapping to the point of illegibility .
Can you ` print ` ( debug ) ` legp ` and ` leg ` before calling ` legend() ` ?
Just using line's ` set_ydata ` .
If you wanted to make 400 separate figures ` set_ydata ` would be useful , but I don't immediately see it would be useful in this case .
From there , you just want the ` get_clim ` method of the ScalarMappable object .
` from pylab import * ` already does a ` from numpy import * ` and a ` from pyplot import * ` behind the scenes .
e.g. I can do it with the pyplot interface using : #CODE
PS : what kind of an object is returned by get_current_fig_manager() anyway ?
` np.range() ` doesn't exist , I used ` np.arange() ` instead .
I got AttributeError : ' NoneType ' object has no attribute ' autoscale_None '
I think it messed up matshow() somehow
I moved pl.figure() before matshow .
If I called show() and savefig() .
I added ` plt.tight_layout() ` before ` savefig() ` , and it solved the trimming issue I had .
It sounds like you want ` numpy.polyval ` ?
I think you're just wanting ` numpy.polyval ` ?
` and then ` plt.show() ` ?
I just read an introduction to ` subplot2grid ` #URL
line 2 , in import matplotlib.pyplot as plt
" but nothing plots " -- you're using ` plt.show() ` ?
Yes I am using plt.show() .
@USER .Squig on typing " import matplotlib.pyplot as plt " in python command prompt
I am using matplotlib.pyplot
Using figtext in python
I tried ` help ( figtext )` but the instructions returned were too vague .
You might have to do this yourself via plt.xlim and plt.ylim .
Actually I made some progress here , using draw() and ion() as well , but setting matplotlib.use ( ' GTKAgg ') .
if it wasn't just the ` plt.hold ( true )` that was missing .
The volume_overlay3 did not work for me .
Does the matplotlib.pyplot.bar no longer support the 2xN arrays for yerr ?
` stem() got an unexpected keyword argument ' bottom '`
I have a similar issue - nothing shows up when I plt.show() .
matplotlib savefig() blank - show() isn't
I think you're just missing the ` extent =( left , right , bottom , top )` keyword argument in ` plt.imshow ` .
Matplotlib subplots_adjust hspace so titles and xlabels dont overlap ?
MathTextParser : Fit output to figsize
I am using ` MathTextParser ` to depict some equations in Qt .
Besides : In comparison to e.g. numpy / scipy the docs of matplotlib seem inscrutable to me for some reason , thus if somebody could comment on how ` to_rgba ` and ` figimage ` exactly work i'd be grateful , too ..
e.g. concerning to_rgba : what means the following quote elucidating depth ?
Try hexbin .
when animation.FuncAnimation() is called and it will work .
It looks like np.unique with the ` return_inverse ` option fits the bill .
` np.unique ` returns a 2-tuple .
As said , you do not need to import pyplot .
@USER if you launch without ` inline ` , figures only appear in a separate interactive window and only when you ` show() ` ( eg : just ` -- pylab ` on the ipython command line or ` from pylab import * ` within your notebook ) .
You need ` matplotlib.pyplot.xticks ` .
To see more about rcParams , check #URL
Making matplotlib's date2num and num2date perfect inverses
I don't know what timezone ` date2num ` expects ( if it is not always utc ; the code might fail ) .
There are matplotlib.dates.epoch2num() / num2epoch functions that do exactly that : #CODE
` ravel() ` did the trick !
By the way , ` pylab ` is okay for interactive sessions , but ` pyplot ` is recommend for scripts .
What should I to import ` matplotlib.pyplot ` correctly ?
Specifying colours when using matplotlib's pcolormesh
`` plt.pcolormesh ( X , Y , Z , cmap =p lt.cm.Spectral )``
I had thought about a colormap , but I didn't know about matplotlib.colors.ListedColormap .
Let's investigate ` ax.contour ` .
The print statement shows that ` ax.contour ` can accept 2D inputs .
` ax.contour ` expects 2D arrays .
The method you're looking for is ` Axes.set_xticklabels ` : #CODE
Displaying bins correctly with pyplot
Hey , ' x = np.linspace ( -2 , 2 , 60 )
Call matplotlib.use ( ... ) to specify a different display back-end , for example rendering to pdf file , before importing pyplot , e.g .
` import matplotlib.pyplot as plt `
Ax2 then bins these points to a meshgrid and displays the density .
It's ` plt.setp ` ( Also see ` getp `) .
` setp ` and ` getp ` are " matlab-isms " , so a lot of people feel that they are " unpythonic " and shouldn't be used unless absolutely necessary .
` setp ` is still very useful , though .
It automatically operates on sequences of artists , so you can do things like ` plt.setp ([ ax1 , ax2 , ax3 ] , ** parameters )` .
` setp ` and ` getp ` are quite handy .
A matplotlib.colors.Colormap instance , eg .
Imshow : extent and aspect
I have some issues with the FuncAnimation fonction of MatPlotLib .
I read that FuncAnimation can deal with that problem but I did not manage to have it working with results in lists or arrays .
And here is my try of making turn the FuncAnimation with the previous code ( big fail ) :
fig = plt.figure()
window = fig.add_subplot ( 111 )
anim = animation.FuncAnimation ( fig , animate , init_func=init ,
plt.show()
how to exit from a pyplot loop ?
I have a python program using pyplot ( #URL ) , in which simply a matplotlib is created with some stuff in it .
So it appears that I am still in the pyplot loop !
1 ) do you have ` plt.ion() ` ?
Pyplot tutorial appears to recommend ` ax.set_xxx() ` functions , but also mentions ` .setp ( xxx =) ` .
` ax.set_xlim ( 4 )` and ` ax.set ( xlim=4 )` are ultimately the same thing , so do what you like .
The various setter functions are mostly one-liners , as well , but exist to allow for the introspective ` setp ` to work .
Custom ticks autoscaled when using imshow ?
Either by using ` set_ticklabels ` or some other way ?
` set_xticklabels ` actually expects a sequence of strings : #CODE
ax.annotate
You can then adjust the displayed frequency range by using ` plt.xlim `
According to the pandas timeseries docs , pandas uses the numpy.datetime64 dtype .
The current behavior of matplotlib.dates :
The helper functions date2num() , num2date() and drange() are used to facilitate easy conversion to and from datetime and numeric ranges .
When you call ` figure() ` , a window should appear straight away .
Note that this code uses ` matplotlib.pyplot.pause() ` instead of ` time.sleep() ` .
I fear ion() does not resolve it .
I'd just like to produce a sequence of figures ( possibly using pyplot ) , and when I'm done , a single window is shown .
from matplotlib import pyplot #YOUR CODE# pyplot.show() its worked .
` bins= np.linspace ( 0 ,. 5 , num=800 )
counts18 , bins = np.histogram ( Z_DATA [ InData1 8] , bins =b ins )
x= np.cumsum ( counts1 8) *1 .
/ np.sum ( counts1 8) *1 .
plt.show()
But changing the display command from show() to draw() didn't help .
Try ` set_xlim ( args.avg_window , right=1 )`
Not sure why the other answer was chosen since the question was asking about Python's matplotlib and not R's plot() ( R was just used as a comparison ) .
Your code works if you explicitly pass a mgrid ( with similar characteristics than your a bins and sbins ) to the pcolormesh command .
What is the point of sin() and cosine() and multiplying with wind_angle ?
the key line in ` matplotlib.colorbar.make_axes_gridspec ` which makes this happen is #CODE
I read it is possible to embed a pyplot in tkinter , but I'm having a problem :
Why are you calling ` ioff ` ?
#URL ( In this case ` FuncAnimation ` would be easiest . )
Is there a reason for using pyplot - rather than pylab ?
According to the docs ` numpy.loadtxt ` is
As mentioned ` numpy.genfromtxt ` has more options .
plt.show() cannot come before plt.savefig
plt.show() making terminal hang
A quick and dirty solution might be to try using ` plt.draw() ` instead of ` plt.show() ` .
Version 1.0.0 made some changes to ` show() ` to make it more compatible with what you want to do .
Have you tried placing debug statements after the line that says plt.show() ?
instead of plt.tight_layout() .
The matplotlib FAQ says ` import matplotlib.pyplot as plt `
It works placing fig2 = plt.figure() and ax3 = fig2.add_subplot ( 111 ) after ax2.semilogx ([ ... ]) .
matplotlib qt imshow animate
pickable figures in matplotlib and Log10Transform
You may already know , that in matplotlib 1.2.0 there is a new experimental feature , that figures are pickable ( they can be saved with ` pickle ` module ) .
Also , ` pcolormesh ` will be faster in this case .
Try using it instead of ` pcolor ` .
` plt.subplots ` is the perfect solution , thanks
ie ` c = ax.contour ( ... )` and ` fig.savefig ( ... )`
A lot of people would argue that ` setp ` is very " unpythonic " , but I don't see the problem with it .
about the args of matplotlib.animation.FuncAnimation
Or better , pass them as arguments through the ` fargs ` keyword in ` FuncAnimation ` .
The key effect is controlled by ` Slider.set_val `
Just call ` plt.autoscale() ` .
[ EDIT : removed some nonsense about ` imshow ` . ]
` numpy.genfromtxt ` accepts iterators as well as files .
In numpy , just do ` np.exp ` of your y-axis quantity .
PCA Analysis with Python
fig.savefig ( ' perf.png ' , bbox_extra_artists =( leg , ) , bbox_inches= ' tight ')` to do it .
You have to call ` ax.set_xlim ` after ` ax.plot ` .
( but I used ` isneginf ` and ` isposinf `)
I simplified Remy F's solution by using the ` set_x / y / zlim ` functions .
How to read a file from the bottom with numpy.genfromtxt in python
How to limit the range of the x-axis with imshow() ?
pydev matplotlib show() doesn't work
I have tried using ` ax.relim() ` , ` ax.autoscale() ` , ` ax.autoscale_view() ` , to correct this problem , but without success .
pylab.plot (( np.cos ( theta ) * r_a , np.cos ( theta ) * r ) ,
( np.sin ( theta ) * r_a , np.sin ( theta ) * r ) , ' red ')`
y= np.convolve ( w / w.sum() , s , mode= ' same ') ;
But Alleo's " Efficient solution " using ` numpy.cumsum ` has better complexity .
Note that ` numpy.allclose ( result1 , result2 )` is ` True ` , two methods are equivalent .
Try running it as a script adding appropriate calls to ` figure() ` and ` show() ` .
However , it seems that np.genfromtxt reads only one column .
` data2 ` can be plotted by ` imshow ` .
Matplotlib - imshow twiny() problems
You're misunderstanding what ` twiny ` does .
It needs the following line in addition : ``` xi , yi = np.meshgrid ( xi , yi )```
` matplotlib.pyplot.bar `
` matplotlib.pyplot.xticks `
Using ` make_axes ` is even easier and gives a better result .
plt.figure ( num=None , figsize =( 10 , 10 ) , dpi=1200 ) .
plt.savefig ( " graph.pdf ")
+1 for pandas's ewma
@USER - Yes I also added the following : plt.figure ( figsize =( 15 , 15 )) .
sure , try the matplotlib reference , [ subplots_adjust ] ( #URL )
Just a question what does the ax.set_xlim method limit ?
Perhaps you are looking for ` plt.xlim ` : #CODE
Above , ` plt.xlim ( 0 , 50 )` was used instead of ` plt.xlim ( 0,100 )` just to emphasize the change .
Setting the ` ec= ' none '` might help a little : ` rect = patches.Rectangle (( x , y ) , width=1 , height=1 , color= ' k ' , ec= ' none ')`
ax.set_xbound ( xmin , xmax )
@USER -bot : using x , y = np.meshgrid ( x , y ) is much easier then tiling+reshaping
@USER Thanks for the ` np.meshgrid ` tip , I keep learning new things .
matplotlib.pyplot.hist ( x , bins=10 , ... )
If bins is an integer , bins + 1 bin edges will be returned , consistent with numpy.histogram() for numpy version > = 1.3 , and with the new = True argument in earlier versions .
See also ` np.logspace ( 0 , 1 , 10 )` .
Plus , the tight_layout tip is one to remember , had no clue about it .
pyplot twinx() tickmark overlap
Because that's what ` twinx ` is supposed to do :)
The idea is that you can do something like this using ` twinx ` ( or ` twiny ` if you want two independent x-axes ): #CODE
Here is a solution using pcolor : #CODE
I have sorted these points with lexsort but the distortion from the camera is too big so that y-coordinates will be overlap .
The Delaunay triangulation may be more robust to small overlaps , but if the distortion is too large , it will also break down the rectangular pattern .
Using triangulation is indeed interesting , and can be used for you application : #CODE
Did you try something like ` glob.glob ( * .data )` , supposing your files end with the .data extension ?
The arrows are drawn using matplotlib.pyplot.Arrow() : #CODE
EDIT : I fixed an important omission in the " code sketch " above , namely a record-specific marker specification in each call to ` ax.scatter ` .
the code I posted is everything I did except for a ` fig.savefig() `
pyplot tab character
` expandtabs() ` works fine - thanks
`' plasma '`
` import matplotlib ; print matplotlib.get_backend() `
Python import matplotlib.pyplot not working
" import matplotlib.pyplot " it says : ImportError : No module named matplotlib.pyplot
I am working with python networkx and matplotlib.pyplot .
matplotlib mathtext does not work
Tkinter and pyplot running out of memory
It returns a ` Line2D ` object , ` line1 ` .
wxPython and matplotlib.widgets
For an article I am generating plots of deformed finite element meshes , which I visualize using matplotlib's polycollection .
Should ` axes.clear() ` really be ` self.axes.clear() ` ?
Selective patterns with Matplotlib imshow
Just a simplest ` linspace ` solution
` Line3D ` docs , ` Line2D ` docs
Can you explain me , what this part is done and why it is needed for imshow() ?
plt.gca() .collections .remove ( coll )
You have named your module ` new ` which is shadowing with an import in ` matplolib.cbook ` , which is causing you to try to imort ` pyplot ` while you are importing ` pyplot ` which aparently blows up ( exactly why is above my paygrade ) .
Griddata
` xx = arange ( 0 , 700 , 30 )` ,
` tt = arange ( 0 , 100 , 5 )` ,
I just discovered pyplot.scatter and have been playing with it a bit .
` ax.add_patch ( p )`
I like AutoLocator and MaxNLocator , just try which one gives you the nicest results .
I had'nt come plt.rc() .
I think there also needs to be a ` plt.draw() ` .
AxesGrid with imshow : do plots have to have the same extent ?
As hayden mentioned in comments , running ` ipython -- pylab ` will automatically run ` from matplotlib.pyplot import * ` , which gives you a very nice interactive shell .
PolyCollection , as returned by fill_between , is not supported by the current label mechanism .
Perhaps you are looking for plt.fill_between : #CODE
The X labels overlapping may be fixed by using ` autofmt_xdate() ` , which auto-rotates the labels .
It works by adding the ` hatch ` argument to your call to ` bar() ` .
As for ` pie() ` , it does not have a ` hatch ` keyword .
@USER : the hatching loop would be more simply written as ` for wedge in piechart [ 0 ]: wedge.set_hatch ( )` .
@USER and i also guess i didn't realise i could have done ` for wedge , hatch in zip ( pichart [ 0 ] , patterns ): ` which i guess would be best ...
I would suggest using ` gridspec ` instead ( tutorial ) .
Functions are just objects that happen to have an attribute ` __call__ ` .
Did you check the contents of set1.split ( " . ") or set1.split ( " . ") [ 0 ] .split ( " _ ") ?
In my example , I am referring to figure.Figure() instantiation .
However , I would like to do it for one wedge only .
I would suggest using ` fig.tight_layout ` .
I was actually using ` tight_layout() ` already but adjusting its arguments hasn't come to my mind so far .
I have a timeseries of 10+ years and want to abbreviate the xtick labels to 2-digit years .
` imshow ` has a parameter to specify the origin , it's named origin .
` matplotlib.rcParams [ ' text.latex.preamble '] =[ r " \usepackage{amsmath} "]` .
You must call ` plt.gcf() .canvas .mpl_connect ( ' key_press_event ' , ontype )` before ` plt.show() ` .
Matplotlib : Specific color with imshow
Works fine for me under osx after adding ` matplotlib.use ( ' TkAgg ')` ( using matplotlib 1.2 ) .
It will then return the value yielded ( in this example , ` np.random.random `) .
If you run the code above in IPython , you can then do ` axes.spines [ ' bottom '] .set_position ?
See here : #URL The ` .style .use() ` has to be called on the ` matplotlib.pyplot ` -import .
@USER ; You can call it either by ` matplotlib.pyplot.style.use() ` or ` matplotlib.style.use() ` .
` import matplotlib.pyplot as plt
The mouse-tracking label you see is generated by calls to matplotlib.axes.Axes.format_coord in response to mouse tracking .
which with out much testing I think should more-or-less be drop-in replacement for ` plt.imshow `
Call ` show() `
Do ` fig.set_size_inches ( 7 , 3 )`
Finally do your ` savefig() `
It seems the width =b arwidth in bar() doesn't work as I expected it would ..
Heatmap in matplotlib with pcolor ?
In short : plt.xlim() .
i found another way : plt.hist ( im [: , : , 0 ] .flatten() , bins=256 , range =[ 0,255 ] , histtype= ' stepfilled ' , color= ' red ')
How could I arrange multiple pyplot figures in a kind of layout ?
For more control on the layout , check out the GridSpec .
A gridspec instance provides array-like ( 2d or 1d ) indexing that returns the SubplotSpec instance .
However , calling matplotlib's set_label_position ( as notated above ) doesn't seem to have the desired effect .
You want ` set_ticks_position ` rather than ` set_label_position ` : #CODE
You can just do ` pyplot.xticks ([ 1 , 3 , 10 , 20 ])` , or whatever arbitrary numbers you like .
I have imported a csv file using csv2rec .
Same way with ` recarray ` : #CODE
There has been a lot of work on the triangulation code that has made it into v1.3.0 .
There are a lot of formatting options for annotate() , see the matplotlib website :
doc for ` AutoDateFormatter `
Google also turns up [ ` matplotlib.pyplot.scatter `] ( #URL ) .
I was using ` dt.time() ` instead of ` dt.hour + dt.minute / 60.0 ` .
@USER Oddly , ` marker= ' , '` isn't working with ` scatter() ` .
pyplot.plot() modifying line color cycle
Then the problem , I can of course redefine the colour sequence in rcParams , like the following : #CODE
get_color() ?
` get_color() ` just returns the color attribute from a line .
That is matching very much what I was looking for , though I was expecting a simpler command than color= ax.lines [ -1 ] .get_color() .
but yaxis labels are ploted not like 00Z07Oct but 00Z0710 ?
I suspect this has to do with unicode issues , in particular ` matplotlib.cbook.unicode_safe() ` .
If it doesn't , just define a new ` DateFormatter ` that doesn't have the ` cbook.unicode_safe() ` call : #CODE
From your remark that ` datetime ( 2009 , 10 , 7 , 0 ) .strftime ( ' %Hz%d%b ')` gave the right string I would've thought it worked .
Yes , I replaced ` cbook.unicode_safe ( dt.strftime ( fmt ))` by ` dt.strftime ( fmt )` in dates.py .
When I directly write ` locale.setlocale ( locale.LC_ALL , ' en_US ')` in DateFormatter class code , this also works well on the both PCs .
plt.ticklabel_format ( style= ' plain ' , axis= ' y ')
This is actually the same as setting a FixedFormatter with the strings : #CODE
A more flexible approach is using the FuncFormatter : #CODE
You could " prune " the top ytick : #CODE
@USER nice , I just knew ` meshgrid ` ( already from old MATLAB-times )
matplotlib : AxesSubplot object has no attribute tick_params
Here muy1 and muy2 are two matrices created by meshgrid : #CODE
I'd suggest you try upgrading matplotlib : from what I remember , changing from ` 0.99 ` to even to ` 1.0.1 ` fixed a * lot * of functionality , ` ion() ` included .
Is there an option when a nan appears to make pyplot.plot() ignoring both the nan and the corresponding X value ?
As proposed in my answer there , I'd recommend using ` np.isfinite ` instead of ` np.isnan ` .
Using ` set_color ` , affects both ** edge ** and ** facecolor** , but since a ` Line ` doesnt have a ** facecolor** , it used to work fine .
Be aware , though , that if draw() references globals , there is the potential for race conditions to occur , making your program unreliable .
matplotlib.pyplot.imsave backend
The obvious extensions of this , doing ` ax [ 0 , 0 ] .xaxis .set_visible ( True )` and so forth , do not work .
` set_xlim ` doc and ` set_ylim ` doc
before plt.show()
` import matplotlib ; print ( matplotlib.rcParams [ ' backend '])`
From ` help ( plt.imsave )` : #CODE
The ` fill_between() ` command creates a PolyCollection that is not supported by the ` legend() ` command .
Say ` a = numpy.zeros (( 3 , 1 ))` , then #CODE
What is the output of ` isinteractive() ` ?
import matplotlib.pyplot as plt and then plt.show() ?
` python -c ' import matplotlib ; import matplotlib.pyplot ; print ( matplotlib.backends.backend )'` ?
You can do it in the matplotlib.rc file .
matplotlib.matplotlib_fname() `
Don't call ` .show() ` .
pyplot .
You can call ` .plot() ` multiple times .
@USER that's b / c you're calling ` plt.figure() .plot() ` .
You can call ` .plot() ` multiple times .
could you provide the output of ` df.head() .to_dict() `
I added df.head() .to_dict() to post above
` plt.close() `
You should be able to pull this off using ` PathEffects ` , and ` ax .
You should be able to pull this off using ` PathEffects ` , and ` ax .
In your two functions , you're calling ` plt.gcf() ` .
This works fine when I was drawing the Rectangle's straight to the canvas with add_artist , but I want to change this to using a PatchCollection .
If I iterate through self.selectionPatches and print out each Rectangle's get_visible() , it returns false .
I have also tried with ` GridSpec `' s ` get_grid_positions ` , but I cannot make sense of the parameters it returns .
It is probably possible , but I am not familiar with ` get_grid_positions ` .
note that if you're importing pyplot and numpy , the pylab import is totally unnecessary and clutters / confuses your namespace
` imshow ` documentation .
` imshow ( ..., aspect= 3.2 .. )` or what ever you need it to be to look right .
Python matplotlib errorbar issue
i.e. , ` matplotlib.rcParams [ ' text.usetex '] = True ` and the output to PDF ?
64-bit version of PyPlot
I have found an unofficial 64-bit version of matplotlib , but then when I ` import matplotlib ` , ` pyplot ` is not an attribute of ` matplotlib ` .
I hope this isn't a dumb suggestion , but did you try ` import matplotlib.pyplot as plt ` ?
Thanks for pointing out the arrowstyle though , it wasn't working when I attempted something similar .
Ideally , avoid using ` plt.ion() ` in scripts .
In a script , the drawing is usually delayed until ` plt.show ` is called : #CODE
You can see this in my stripped-down script below by commenting out ` PDFfile.savefig() ` and uncommenting ` plt.show() ` .
Should I be calling ` .hide() ` instead of ` .destroy() ` ?
A .show() call probably is needed .
Sidenote : Calling both ` .destroy() ` or ` .show() ` when closing the window will work .
Anyway , I found that if I used an explict FFMpegFileWriter ( not just FFMpegWriter ) , everything was OK , and the rgba issue went away and I got a usable m4v file : #CODE
So now my PatchCollection instantiation is - #CODE
However , you can just specify that the edges of the polygons should be white when using a PolyCollection while still using the colormap for the faces .
You can also completely override the default labeling by setting ` format_coord ` #CODE
Matplotlib : Broken_barh plots with same height
I'm working with broken_barh plots .
If I generate two plots , one with two broken_barh and the other with three , it looks like this :
with 2 broken_barh
with 3 broken_barh
On the web I only found examples using " animation.FuncAnimation " .
animation.Animation.save ( anim , ' toll.mp4 ' , fps=20 , bitrate=20 , codec= ' mp4 ')`
I am currently trying to do this with text()
Then I want to `' set_gid() '` to the three bubbles as `' C0 ' , ' C1 ' , ' C2 '` respectively .
plt.scatter allows you to define a radius of the points plotted .
The basic idea is to give the ` plt.plot ( ... )` command two 2D arrays .
` import matplotlib.pyplot as plt
fig , axs = plt.subplots ( 2 , 2 )
fig.delaxes ( axs [ -1 , -1 ])
plt.show() `
For me it is ax.tick_params()
Then one can issue ` plt.figure ( figsize=cm2inch ( 12.8 , 9.6 ))` , which I think is a much cleaner way .
To modify color ` matplotlib.rc ( labelcolor= ' w ')` .
Did you remember to include a ` plt.draw() ` ?
` axis_ylabel = plt.ylabel ( u " \u03b1 [ \u00b0 ]" , rotation= ' horizontal ' , position =( 0.0 , 0.9 ))`
Matplotlib ships its own mathematical expression engine , called ` mathtext ` .
Strange output from matplotlib mathtext
are you using [ matplotlib.animation ] ( #URL ) and checked the [ examples ] ( #URL ) ?
@USER , yes I am using matplotlib.animation and checked the examples .
` ax.scatter ( X , Y , c=label , cmap=new_cmap , vmin=0 , vmax=num_labels )`
Matplotlib set_major_formatter AttributeError
I think you are looking for either ` FormatStrFormatter ` or ` FuncFormatter ` .
Should i be using draw() in some way instead ?
To answer your anticipated question , instead of calling ` set_xdata ` try something like ` update_from ` .
The documentation for this class is here and the ` update_from ` method is from the parent class .
It's interesting that removing ` blit ` helps , considering the animation.save code sets ` blit ` to false when calling ` _draw_next_frame ` .
` pcolormesh ` wants three 2-D arrays .
I am using matplotlib.pyplot for a little module I am developing ( code appended ) .
The two directly relevant to this question are set_figwidth , set_figheight and set_facecolor .
You simply need to re-assign ` ax.format_coord ` .
You could provide a dummy x-range , and then override the xtick labels .
fig.set_size_inches ( 18.5 , 10.5 )
fig.savefig ( ' test2png.png ' , dpi=100 )
thats really good - i tried using set_under but hadn't included vmin so i don't think it was doing anything
` set_ticklabels ( ... )` should only be used to control the label formatting ( e.g. decimal number , etc . ) .
converting rgb to hsv
have you tried ` pd.read_csv ` ?
Is there a way to achieve this with Line2D objects in matplotlib ?
The call can be simplified to ` ax.fill_between ([ -50 , 50 ] , -25 , 25 )` in this case , byw .
Actually , ` fill_between ` works [ fine with curves ] ( #URL ) .
There is no Python package called " imshow " .
matplotlib has no attribute ' pyplot '
pyplot is a submodule of matplotlib and not immediately imported when you import matplotlib .
The most common form of importing pyplot is #CODE
I have successfully generated some basic plots using pyplot , and matplotlib by using their tutorial's examples , but to no avail for what I need to accomplish .
According to the code in your question , it should be ` plt.bar ` and ` plt.plot ` .
Don't forget to ` plt.figure() ` and ` plt.show() ` if you do it non-interactively , but this is the basic stuff I assume you know .
Is there a parameter I can pass to ` acorr ` ?
@USER , i would workaround it by using : ax.bar ( df.index.values , df.values )
How to change the width of just the bars newly created by df.plot() ?
I think that instead of doing pyplot.savefig ( ' test.png ') , I am supposed to create a cstringIO object and then do something like this : #CODE
Maybe you could also try ` fill_between ( x , y-errorbarsize / 2 , y+errorbarsize / 2 , alpha= 0.3 )`
matplotlib.pyplot.scatter ( x , y , s=20 , c= ' b ' , marker= ' o ' , cmap=None , norm=None , vmin=None , vmax=None , alpha=None , linewidths=None , faceted=True , verts=None , hold=None , ** kwargs )
vlines works for me .
I am having problems with FuncAnimation , I am using a slightly modified example #URL #CODE
.plot .figure .canvas .copy_from_bbox ` ... which is probably far too convoluted .
Basically , you just want ` fig.canvas.draw() ` or ` plt.draw() `
It would appear that someone had a similar situation , except not using DataFrame.plot() .
Edit : My original answer used ` ax.scatter ` .
How is it possible that ` type ( gca() )` reports ` matplotlib.axes.AxesSubplot ` , yet this class appears not to exist there ?
OO equivalent of matplotlib.pyplot.close() ?
Then there is ` matplotlib.pyplot.close() ` .
directly talk to ` Gcf ` ( it's in ` _pyplot_helpers.py ` and really isn't too complicated once you see what it is trying to do
` plt.close ( fig.number )`
but this obviously doesn't work for histograms , or imshow for instance .
You will have to re-draw the canvas ( ` plt.draw() ` or ` ax.figure.canvas.draw() `) before the changes are visible .
ax.cla()
I am using pyplot for this .
` get_cmap ` doc and colormap gallery
Is there a way to avoid this while still using tight_layout ?
` Line2D ` has a much more flexible api which includes ` set_marker ` and ` set_markersize ` .
The third column , ' C ' , is a categorical variable .
Have you tried using streamplot from matplotlib ?
Instead of importing streamplot from streamplot , try using ` plt.streamplot `
askewchan : I have tried using plt.streamplot , but I have the same problem .
They are in a different namespace than pyplot , are you just worried about confusion ?
because alot if people ( my self included ) work in ` ipython -- pylab ` which imports everything from ` pyplot ` so while you are technically correct , this could mess some people up .
import matplotlib.pyplot as plt
def main() :
fig = plt.figure ( 1 , [ 5.5 , 3 ])
fig.add_subplot ( 221+ i-1 )
plt.plot ( np.arange ( 0 , ( i ) *4 , i ))
plt.show()
with pyplot I can do what I want , I want to do it with matplotlib for some long reason I ' d rather not mention to extend my question .
thanks , is there a way to keep ticklabels , such as : I want only labels ` ax.set_yticklabels (( ' G1 ' , ' G2 ' , ' G3 '))`
You can control the ratio of the height / width with ` ax.set_aspect ( number )` .
The documentation for axes.set_aspect says :
You should not have to call the ` set_rlim ` ( or ` set_ylim `) method before ` set_rscale ` ( or ` set_yscale `) .
plt.bar ( ind , womenMeans , width , color= ' y ' , bottom=menMeans , yerr=menStd )
would be : plt.bar ( 5 , 220 , 10 , color= ' y ' , bottom=-200 )
Then i just looked in the documentation for Quadmesh , and found something that seemed promising .
My on_pick just highlights a section on a graph
and then in your ` on_pick ` #CODE
The documentation for ` hlines() ` is on the Matplotlib website .
generated using ` imshow `
For large matrices , it's more efficient to do ` A += A.T ; A [ np.diag_indices_from ( A )] / = 2 ` .
It looks like the best results for alpha < 1 come from using drawedges=False and set_edgecolor ( " face ") .
This is the problem , if you hand in a 3D ` ndarray ` , it expects that you will have 3 or 4 planes ( RGB or RGBA ) .
which would indeed be a little cleaner with new ` .format ` string formatting .
Problem is that ` frexp ` returns base-2 decompositions , which is not quite what I want .
And it's not cooperating with TeX's braces in conjunction with ` .format ` .
This is what I have now : ` l = ( " % 1.1e " %kapparange [ i ]) .split ( " e-0 ") ; plot3.plot ( theta2 , m0amplitude [ i , :] , label = ' $\\kappa=%s \\times 10^{%s}$ ' % ( l [ 0 ] , ' - ' +l [ 1 ]))` , which is hacky , but works :)
And just output them using format() .
The arguments in ' imshow ' define the following things .
To understand the general workings of ` imshow `' s arguments , you will be better off reading the docs than asking here .
maybe try ` PathCollection ` instead ?
However , the default delimiter for ` matplotlib.pyplot.plotfile ` is a comma .
The only normalization that changes stretch is built in , as far as I know , is ` matplotlib.colors.LogNorm ` .
Note : fig is my matplotlib Figure() , I've printed this directly to a response and it displayed , so I know it is being created properly .
I created plots before using matplotlib.pyplot .
I think I now need to do something with matplotlib.axes though , but I am unsure what exactly .
` errorbar ` documentation
I have also tried ` ax.set_xlim ( 0 , 10 )` and ` ax.set_xbound ( 0 , 10 )` as per suggestions here , but to no avail .
The issue is the helpful machinery from using ` add_subplot ` .
Using ` plt.subplots ` as : #CODE
You want ` twinx ` example .
Ah : ` use() ` must be called before importing ` pyplot ` .
You might try exporting to eps ` fig.savefig ( ' blah.eps ')` and then ` epspdf ` .
` h = ax.plot ([ ] , [ ] , ' bo ' , ms=6 )`
Yet another way to achieve this could be to hard code the position of your labels using set_label_coords #CODE
IMO ` P.subplot() ` does the same as ` fig.add_subplot() ` .
In ` add_subplot ` CHANGE ` 211 ` to ` 121 ` etc .
As danodonovan says the set_label_coords is a possible way to do it .
` ylabels = plt.getp ( plt.gca() , ' yticklabels ')`
` plt.setp ( plt.gca() , ' yticklabels ' , ylabels )`
Matplotlib set_major_formatter AttributeError )
/ usr / lib / python2.7 / site-packages / matplotlib / font_manager .
/ usr / lib / python2.7 / site-packages / matplotlib / font_manager .
/ usr / lib / python2.7 / site-packages / matplotlib / font_manager .
a = plt.gca()
set_yticks ( list_of_labels )
I would argue that it might be useful to have ` angle() ` return ` nan ` when given a zero input , but that's basically a definition .
The ax.text() link is now broken I'm afraid .
Python MemoryError issue on Ubuntu but not on windows when running matpplotlib's specgram command
` bbox_extra_artists =( fig.get_axes() [ 0 ] .get_legend() , )`
to plt.savefig() .
In my code I used pyplot from matplotlib .
` / usr / lib / python2.7 / site-packages / matplotlib / font_manager .
can you provide me an example in the above axvspan ?
` from scipy.misc import imread ` does not work for me .
It cauesed by a bug in ` AutoDateLocator ` .
class matplotlib.dates.AutoDateLocator ( tz=None , minticks=5 , maxticks=None , interval_multiples=False )
When ` maxticks ` is ` None ` , ` AutoDateLocator ` uses its default maxticks dictionary .
As for the Agg-fallback -- comment out the call to ` fig.tight_layout ` .
Did you try to comment out the tight_layout ?
Try ` y = np.array ([ 0 , 100 , -100 , 100 , 0 ]) .T ;
I was trying myself with ndimage label / find_object functions , then through triangulation , but never got there .
import matplotlib.pyplot as plt
from matplotlib import pyplot
x = numpy.array ([ 11 , 2 , 3 , 14 , 5 ])
#y = numpy.array ([ 24 , 33 , 56 , 21 , 99 ])
pyplot.hist ( x , bins )
#pyplot .hist ( y , bins )
pyplot.show()
I currently a python script which generates two images using the imshow method in matplotlib .
` np.random.seed ( 123 )`
The syntax is pyplot.text ( x , y , string ) .
plt.hold ( True ) .
The same is done in [ ` pyplot.specgram `] ( #URL ) .
I think this answer does exactly what you want : #URL with ` ListedColormap `
` ax.pcolormesh ` accept either a colormap or a matplotlib color .
` cbar = plt.colorbar ( cmmapable , ax = ax1 , ticks =[ 0 , 1 ] , alpha = 0 )`
` set_title ` should do what you want ( doc ) #CODE
` fig = figure()
ax = fig.add_subplot ( 111 )
ax.xaxis_date()
ax.set_xticks ( bars.index.to_pydatetime() )
This works fine , but I have read that show() should only be used once per script .
Edit : Sorry , just found ` matplotlib.colors.rgb_to_hsv() ` which is exactly what I was looking for .
` matplotlib.colors.rgb_to_hsv ( arr )`
If anyone can explain to me why ` ax.set_xlim ` works but ` ax.set_clim ` doesn't work from an API standpoint , I'd love to hear ( and I'm sure others can come up with much better answers than this -- So please explain more if you can ! )
If you look in ` matplotlib / cm.py ` , you'll see it is the ` ScalarMappable ` mixin which handles colormapping , and in particular , it provides the ` set_clim ` method .
Thus , ` ax ` has not attribute ` set_clim ` .
You should be able to do it with two ` Wedge ` s , but I'm having trouble getting things to work properly ...
add_artist does not work for me .
So depending on if you're using the ` strftime ` formatted stuff for anything else , it might make more sense to store the output of ` date2num ` in your mapping , rather than the output of ` strftime ` .
then the imshow above
Memory LEAK in matplotlib imshow
I am aware of similar questions ( like Excessive memory usage in Matplotlib imshow ) and I've read the related ironpython thread ( #URL ) .
I think I found a workaround , I didn't fully realize how heavyweight imshow is .
it worked , but only if I did it before the ` plot() ` call .
` tmp_arr = arr * np.arange ( np.prod ( arr.shape )) .reshape ( arr.shape )` , but then the color no longer has physical meaning , which just sits wrong with me .
Is ` imshow ` giving you errors ?
` colors.Colormap ` class definition .
The numpy alternative to bisect should be [ ` numpy.searchsorted `] ( #URL )
FYI , you forgot to include the np before the cumsum as your np.histogram command implies is needed .
It could be that you're using a matplotlib backend , which doesn't support interactive display on the screen , but can only write figures to files and therefore ` plt.show ` doesn't do anything .
I know that I can can read a file with numpy with the genfromtxt command .
` cmap ` is an instance of matplotlib's ` LinearSegmentedColormap ` class , which is derived from the ` Colormap ` class .
Unfortunately it is not possibile to do that changing the rcParams .
Closing pyplot windows
How about change 0 to 0.0001 by ` numpy.clip() ` ?
How to change the table's fontsize with matplotlib.pyplot ?
I have tried ioff() , but it didn't work .
twinx() and axhline
If you want call ` set_edgecolors ` and ` set_facecolors ` methods later , you can backup these two methods before disable them : #CODE
dtypes : float64 ( 6 ) , object ( 1 )
or even ` plt.bar ` #CODE
AttributeError : ' numpy.ndarray ' object has no attribute ' _hold '
` >>> print ( type ( axes.Axes ( figure.Figure() , [ 0 ] *4 )))`
plt.plot ( x , y )
This works by using FixedLocator .
@USER -- Nope . from the interactive prompt , if a command returns something that isn't ` None ` , python will print it's string representation ( ` __repr__ `)
With ` errorbar ` .
I thought a value of 0 would depict no errorbar .
plt.show()
Embedding Matplotlib in Qt 4 " ( from the book Matplotlib for Python Developers ) , and posts such as " #URL " and " Embedding matplotlib in pyqt4 using imshow " .
How should I rewrite the plt.pause ( 1 ) line , so that the program pauses until keypress ?
You need to do ` plt.ion() ` after ` import plt ` .
` ion() ` is often a must , with Pylab / Pyplot .
np.genfromtxt
Here is a link which explains more on [ np.genfromtxt ] ( #URL ) .
I'm sure this should be possible with fill_between but cant make it work .
i didn't know there was a fill_betweenx - Thank you
ax.set_ylabel ( r " \phantom{x } " " \n " r'ABC ' , linespacing=- 0.5 )
And ( the end of ) my needlessly complicated original version , using the same code as above though omitting the matplotlib.cm import , #CODE
@USER : to deal with the operands issue , make sure ` xData ` and ` yData ` are both ` ndarray ` s .
Had the same questions as ` set_ha ( ' left ')` does not work
` set_ha ( ' left ')` does not work neither does my other option ` plt.setp ( legend.get_title() , horizontalalignment= ' left ')`
How to catch natgrid's griddata errors
How do I handle these ` griddata ` specific errors and how do I catch them and continue my script ?
What if you call plot() twice ?
ax.plot ( t1 , c1 ) and ax.plot ( t2 , c2 ) .
Works great , also in connection with a ` pandas.DataFrame `
Pretty sure the issue is you are calling ` griddata ` wrong ( documentation ) .
I read up on the documentation for griddata and tried this suggestion .
plt.clf()
plt.cla()
plt.xlim ( 0 , 1 )
plt.axvline ( x= .85 , color= ' r ' , linewidth= 0.1 )
plt.hist ( correlation , 2000 , ( 0.0 , 1.0 ))
plt.ylabel ( ' Value ')
` plt.quiver ` does this somehow , but I'm not sure how to utilize that information :P
hmmm .... plt.quiver does not do this for me .
Why are you using ` AnchoredText ` instead of ax.text ?
Not true . plt.savefig ( ' output.jpg ') works unless you specifically didn't install JPG support .
The ` linewidths ` parameter to ` plt.quiver ` controls the thickness of the arrows .
Your issue seems to be with the way that ` np.histogram2d ` works .
This ensures compatibility with ` histogramdd ` .
Reverse ` colorjh [ idx ]` and ` hmag [ idx ]` in your ` histogram2d ` call as well if you want to keep the same orientation as your scatterplot .
Weird matplotlib.pyplot importation
I found a really weird behaviour when trying to import the module ` pyplot ` from ` matplotlib ` .
Just do ` from matplotlib import pyplot ` ( or ` import matplotlib.pyplot ` if you really like typing dots ) .
It seems that the plt.close ( fig ) is the key command for my need .
` plt.close() ` has the essential role .
@USER It says : font_manager attribute not found o_O .
I have to import ` matplotlib.pyplot ` for that to happen .
' AxesImage ' object has no attribute ' canvas '
Found [ this ] ( #URL ) " With Matplotlib prior to version 1.0.1 , show() should only be called once per program ...
" but " with Matplotlib version 1.0.1 + , show() can be called multiple times " is not true , I have 1.1.1 and still can't call it twice .
as a side note , if you are worried about ensuring things are arrays ` np.asarray ` is nice .
Wrapping long y labels in matplotlib tight layout using setp
I'm using ` tight_layout() ` for the formatting otherwise .
` print matplotlib.get_backend() `
Thank you for this solution , I ended up using LineCollection instead as it fit my need better , but this solution would have worked as well .
I would look into ` LineCollection ` ( doc ) .
I have considered ` pyplot.imshow() ` .
Auto-triangulation of my global domain can be problematic , but Delaunay triangulation of a single quadrilateral works very well :
I create a global triangulation by appending the triangulation of each element .
` tricontour() ` still works as expected .
( shown here with triangulation overlaid )
As you suggest below , I tried using ` numpy.loadtxt ` .
Also , I tried using ` Matplotlib's ` ` csv2rec ` .
You are not getting the right object on which to call ` set_ticks_position() ` .
Here's a simpler way with ` gca() ` : #CODE
Tiago , I fixed the problem using ax.yaxis.set_ticks_position ( ' both ') without gca() .
Again , note that ` fig.add_subplot ( 5 , 2 , 1 )` and ` fig.add_subplot ( 521 )` are equivalent .
The dataset was plotted with ` plot() ` and ` scatter() ` overlayed .
` matplotlib.get_backend() `
See here for guide on ` tight_layout `
should be ` plt.gcf() ` .
Although I called plt.tight_layout() before plt.show() , not sure if that matters ( as opposed to calling fig.tight_layout() after show() )
@USER , I was just using ` fig.savefig ( ' test.png ')` without specifying ` dpi ` .
A call to ` matplotlib.get_backend() ` spits out ' TkAgg ' .
- 0.35142872 ]] After input to imshow ( z ,... ) , it turns out to be a picture , not different points .
So simply doing `` ys , xs = np.mgrid [ im.shape [ 0 ]: 0 : -1 , 0 : im.shape [ 1 ]]`` is what you are after isn't it ?
I've used ` pcolor ` in the past , but its performance wasn't great .
` pcolormesh ` seems promising , although none of them seem to have an option such as ` extent ` .
rcParams [ ' pgf.texsystem '] resolves to ' xelatex ' , but I don't really know what that's used for .
mathtext .
The behavior I am looking for is like the behavior of ` hist() ` in Matlab .
Sounds like you have a two-line solution ( ` numpy.clip() ; pyplot.hist() `) and you'd want a one-liner .
I would say that ` pyplot.hist() ` does not build this in probably because it generates misleading plots if not carefully annotated .
Adding axes_lst [ 1 ] .set_axis_off() just before plt.draw() is what I wanted .
` axes.text ` doc .
@USER yes , and cycling with ` set_clip_on ` seems to do nothing , but does what you expect if you explicitly pass ` clip_on=True `
sorry , forgot about that bit of magic in ` plt.ylim ` .
There are also the symmetric versions for the xaxis .
` ax.imshow ( X )` adjusts the color scale so that the lowest value in X is mapped to the lowest color , and the highest value in X is mapped to the highest color in the ` cmap ` .
If , however , you supply ` vmin=0 ` , ` vmax=1 ` parameters , then ` ax.imshow ` will not adjust the color range -- it will associate 0 with the lowest color and 1 with the highest : #CODE
matplotlib mathtext \frac is too small
I tried this in matplotlib , but mathtext did not recognize the command \displaystyle .
( If possible I would like to stay with mathtext since it is a lot faster . )
Perhaps I just need to ask the matplotlib developers if they can implement \displaystyle into mathtext .
dateBegin = dt.date ( 2012 , 11 , 30 )
dateEnd = dt.date ( 2012 , 12 , 4 )
You are looking for matplotlib.dates.drange : #CODE
Passing ` None ` as an arguement to ` subplots_adjust ` does not do what you think it does ( doc ) .
Using your ` subplots_adjust ` only removes the margin on the top and bottom .
Hey , I've tried that and it returns " show() got an unexpected keyword argument ' block '"
There is also a similar question : matplotlib savefig() plots different from show()
` animation.FuncAnimation() `
Look into the code of how ` axes.errorbar ` works to understand what it returns .
I am trying to make Principal component analysis ( PCA ) using python .
For the records , this is ` numpy.asarray ` .
These basis vectors , actually eigenvectors , computed by PCA are in the direction of the largest variance of the training vectors .
Got it . workt with ` sc = plt.scatter ( ... )` and ` plt.colorbar ( sc )`
Change pyplot.plot to pyplot.scatter in that case .
You can do this in a hacky way by sticky taping together two independent ` Line2D ` objects .
These can probably be given as arguments in ` plt.plot ` , so just #CODE
... or should I just change from ` pl.figure() ` to ` matplotlib.figure() `
pyplot / pylab api : #URL .
` pl.figure() ` creates a ` matplotlib.figure.Figure() ` instance + sets up a gui object to handle it .
I can obtain the chart using ` mlab.griddata ` and then ` plot_surface ` .
Did you try just using ` set_xlim ` and ` set_ylim ` ?
` plt.title() ` should work fine for this purpose .
matplotlib axis-independent version of set_xlim() and set_ylim() ?
Is there a matplotlib axis-independent version of set_xlim() and set_ylim() ?
I believe you're looking for ` set_data_interval ` .
Joe , thank you , I replaced pcolormesh , as you suggested by this : cs =p lt.scatter ( x , y , c=value , s= 0.6 , edgecolors= ' none ' , marker= ' , ' , cmap=varvid , norm=norm ) and obtained an excellent picture !
I am trying to make face recognition by Principal component analysis ( PCA ) using python ( matplotlib ) .
in_results = PCA ( input_image.T )
input_image = Image.open ( ' C :\ \Users\\Karim\\Downloads\\att_faces\\ 1.pgm ') .convert ( ' L ')
input_image = np.array ( input_image )
in_results = PCA ( input_image.T )
` specgram ` uses ` pcolormesh ` , if I recall correctly .
( It uses ` imshow ` . )
Also , this looks a little different from the spectrogram plotted by ` specgram ` .
What it actually plots is ` 10 * np.log10 ( Pxx )` .
Python Pylab pcolor options for publication quality plots
I am trying to make DFT ( discrete fourier transforms ) plots using ` pcolor ` in python .
Added plt.show() and started using IPython as suggested by jorgeca and everything works fine now , thanks for the help !
thanks , but I want to do it with the " pcolor " command .
I can do it with imshow also ( but don't know how ..
I would suggest using ` imshow ` ( doc ): #CODE
To do the same with thing with ` pcolor ` you need to do the normalization and color mapping your self ( and guess the row-major vs column major right ): #CODE
hmmm ... you said that imshow should do the color mapping for me .
@USER You might need a ` plt.pause() ` in your loop to make sure the canvas actually updates .
matplotlib imshow is not updated
Check out pydoc for matplotlib.colors.LinearSegmentedColormap and reference [ #URL ( here ) on StackOverflow .
` set_scientific ` seems like it should do what you want , but it does not .
But I have some estetic issues with plt.xticks , could you please tell us how to move them vertically from horizontally .
Placing ` fig.subplots_adjust ( left = 0.4 )` after ` ax = fig.add_subplot ( 111 )` in your code yields following result :
Actually , there is an automatic way of doing this now : ` tight_layout ` .
if you pass the kwarg ` tight_layout ` to ` plt.figure ` it auto-magically works as well ( but that might be a 1.3.x feature )
what OS , backend ( ` matplotlib.get_backend() `) , mpl version ( ` matplotlib.__version__ `) , and python version ( and if osx , how did you install it ? ) ?
` plt.ion() ` is meant for interactive sessions only .
` plt.show() ` tells Tkinter to run its event loop .
Edit : After going through the ` tight_layout ` tutorial again , I have realized that it covers pretty much everything .
` ax.plot() ` returns a tuple with one element .
If it helps , you can think of it as being equivalent to ` line = ax.plot ( x , np.sin ( x )) [ 0 ]`
So instead of ` xi = np.linspace ( X.min() , X.max() , 100 )` recue the hundred to a smaller number ?
class PCA matplotlib for face recognition
I am trying to make face recognition by Principal Component Analysis ( PCA ) using python .
I am using class ` pca ` found in ` matplotlib ` .
class matplotlib.mlab.PCA ( a )
try ` plt.pause ( 1 )` instead of sleep
Further , the ` fig.add_subplot ` command in the loop is not necessary .
` x '' = -mu / np.sqrt ( x ** 2 + y ** 2 + z ** 2 ) * x ` ,
` y '' = -mu / np.sqrt ( x ** 2 + y ** 2 + z ** 2 ) * y ` , and
` z '' = -mu / np.sqrt ( x ** 2 + y ** 2 + z ** 2 ) * z ` .
` x2 ' = -mu / np.sqrt ( x ** 2 + y ** 2 + z ** 2 ) * x ` ,
` y2 ' = -mu / np.sqrt ( x ** 2 + y ** 2 + z ** 2 ) * y ` , and
` z2 ' = -mu / np.sqrt ( x ** 2 + y ** 2 + z ** 2 ) * z `
ax = fig.add_subplot ( 111 , projection= ' 3d ')
"' module ' object has no attribute ' Gridspec '" despite calling help ( gridspec ) revealing the Gridspec class
If I do ` help ( gs )` I see the Gridspec class .
` AttributeError : ' module ' object has no attribute ' Gridspec '`
Why can't I create a new Gridspec object ?
You might do a bit better with a ` LineCollection `
Or in which sense it is said that RK4 is much superior to verlet ?
Pretty sure doing this by hand , and studiously avoiding ` tight_layout , ` is the best way to go with this .
@USER , thanks , that might work in some situations , i think pcolor should be able to do that quite easily .
I was thinking of something like ` ax.tick_params ( axis= ' y ' , pad=30 )` , but it turns out that only works for 2D plots .
Now , it says ` get_data ` is not defined ... after I move ` my_plot ` before the loop
figtext would work well .
sorry I meant matplotlib version . and using ` grid() ` with no arguments works like a toggle , maybe you should post more of your code .. perhaps you are accidentally calling yaxis.grid twice somehow ?
` plt.gca() .xaxis .grid ( True )` proved to be the solution for me
But plt.show() shows the picture with red nodes only , without edges too
Before I saw the solution with ` griddata() ` , but I would like to avoid interpolating since x and y coordinates are already well defined .
I modified the code as follows : rose= fig.add_subplot ( 111 , polar=True )
For example , here are the results of some PCA on the two fit score .
Plots were made after that handling ( and the graph before PCA looks like a dome )
Try using numpy.loadtxt instead .
X_train numpy.loadtxt()
The only line referenced in my actual code is line 17 , the ' plt.subplot ( 211 )' I don't understand why it worked , then didn't .
I would suggest to adjust parameters like linewidth via the rcParams ( or your matplotlibrc file ): #CODE
mp.rcParams [ ' lines.linewidth '] : the width of line plots made using pyplot.plot
Specifying dictionary argument with dict() or braces matters in set_bbox
I think this is a bug in ` set_alpha ` or possibly down in the renderer .
The way the code works , you pass ` set_bbox ` a ` dict ` which is then stored in ` _bbox ` .
ax.get_xaxis() .set_major_locator ( matplotlib.dates.AutoDateLocator() )
ax.get_xaxis() .set_major_formaterr ( matplotlib.dates.AutoDateFormatter() ) gets AttributeError : ' XAxis ' object has no attribute ' set_major_formaterr '
ax.get_xaxis() .set_major_locator ( matplotlib.dates.AutoDateLocator() )
ax.get_xaxis() .set_major_formatter ( matplotlib.dates.AutoDateFormatter() )
The solution I've seen proposed in other questions here on SO is to make a call to ` tight_layout() ` .
I found out that subplot() should be called before the plot() , issue resolved .
Z_MIN and Z_MAX are global , because vectorize can't handle extra attributes .
I had already fixed it by the plt.text solution discussed earlier , but now I can change to this more elegant solution .
or perhaps ` table_2007 [ 0:4 ] .plot ( style= ' v- ')` if there are other columns which you need to leave out .
Making them individually isn't so bad ( `` table_2007 [ 0 ] .plot ( ... )`` , etc . ) .
Matplotlib pcolor memory leak
` pcolormesh ` is intended for large regular grids , but still produces vector output like ` pcolor ` .
ax [ 1 ] .autoscale_view ( ' tight ') worked .
Yes , there is a datetime column -- the .csv datasource includes : ' KEY ' , ' DATEREAD ' , and ' VAL ' .
The latter is done by calling ` plt.bar ` and then setting the labels .
Which rotates the xtick labels nicely and allow most texts to fit nicely without overlapping .
pyplot.show() reopens old tkinter dialog
import matplotlib.pyplot as plt
This call to matplotlib.use() has no effect because the the backend
has already been chosen ; matplotlib.use() must be called before
pylab , matplotlib.pyplot , or matplotlib.backends is imported for the
as seen in the ColorbarBase methods in #URL .
plt.savefig ( ' xxx.png ')
I've tried adding kwargs like " aspect=1 " to various parts of the script ( i.e. - scatter() , figure() , ax() ) but nothing has really worked so far .
@USER : Thanks , axvline is perfect .
` plt.savefig ( filename , bbox_inches= ' tight ')`
Usually something of the form ` plt.xticks ( plt.arange ( 150 , 152 , 0.5 ))` would be appropriate .
just before the ` fig.show() ` .
You can rotate the ` xtick ` labels using ` setp ` .
Symmetric streamplot with matplotlib
So you just need two ` streamplot `' s : #CODE
I am creating plots in pyplot in Python .
` [ U , s_A_approx , V ] = numpy.linalg.svd ( A )`
( Alternately , you could pass in the ` ListedColormap ` that you created in your example . )
In 2D plots I just do : ` plt.grid ( True )` and it works like a charm .
50 ` , then you can simply scale the ` meshgrid() ` output : #CODE
` linewidth= 0.0 ` is a good default , but it should be better documented in matplotlib.pyplot.savefig() .
define the triangles without using delaunay triangluation using ` Triangulation ( x , y , triangles= ... )`
You understand how set_mask works ?
I have tried an example with PolyCollection from matplotlib tutorials and noticed one strange thing .
This is a bug with the explicit closing feature of PolyCollection .
mypoly= np.array (( all_x , all_y ) , dtype=float ) ?
From the looks of it , matplotlib's ` pyplot.imsave() ` doesn't support compression options .
If I simply change to ` bins= np.arange ( 0 , 11 , 1 )` this cuts off the value for x = 10 .
There are quite a few posts which deal with workarounds , but requiring explicit calls to ` matplotlib.pyplot.close ( fig )` seems a bit hackish .
It gets printed fine with ` imshow ` from matplotlib .
It looks like this is just how imshow() works , I'll post an answer in a moment .
I believe you are using ` plt.subplots ` incorrectly , though I'm not extremely experiences with this .
For doing this adjustment automatically , you can try using ` tight_layout() ` .
If you'd prefer it to look a bit nicer , do something like ` datacursor ( formatter=lambda ** kwargs : ' , ' .join ( kwargs [ ' ind ']))` .
How to make autoscale_view respect ax.text ( ... ) calls ?
Also , the width of the block is plotted as ` 329.67 ` , based on a standard deviation of ` 70 ` , instead of ` 46.28 ` based on ` np.std ( x ) = 9.83 ` .
color range in LineCollection
Strange behavior of matplotlib's griddata
Is this a problem of griddata() ?
The trick is that the atributes of ` imshow() ` are actually atributes of the ` matplotlib.image ` .
I'm making a carpetplot on python using matplotlib's imshow .
Exactly Thom , ` ax.set_xlim ( ax.get_ylim() )` would do the trick .
@USER It can be done using ` rcParams ` .
I suspect the ` imshoe ` is supposed to be ` imshow ` ?
I was able to create live updating with ` draw() ` and a while loop here is the code I used : #CODE
` Series.resample() ` or
` Series.reindex() `
It's ` loadtxt ` ?
plus even numpy.loadtxt doesn't work
What does not work about ` np.loadtxt ` ?
` loadtxt ` will do this for you .
x , y= np.loadtxt ( ' spineprox.txt ')
plt.xlabel ( ' your x label .. ')
plt.ylabel ( ' your y label ... ')
You forgot the ` .T ` as in the answer of Wim
I'm working on a program in python with packages numpy , scipy and matplotlib.pyplot .
Did you try calling ` plt.show() ` ?
Perhaps something like ` plt.legend ( CS2.legend_elements() [ 0 ] , CS2.legend_elements() [ 1 ])` , can also be useful for you .
This can be done , for example , by ` axis() ` .
An ` Axes3D ` object ( your ` ax ` variable ) has the following methods : ` set_xlim ` , ` set_ylim ` , and ` set_zlim ` .
set_xlim
Using ` set_xlim ` , etc , works for me .
autoscale_view
As mentioned by @USER , you can avoid this with the command ` plt.autoscale ( False )` .
But you can try putting ` figure() ` instead of ` clf() ` just in case
While this does work , it defeats the purpose of having ` Circle() ` like methods in matplotlib .
This is what I tried , ( given one pyplot axe ` ax `) : #CODE
For a scalogram : what i used was ` imshow() ` .
the dtype bit is what I was missing .
` ax.grid ( color= ' blue ')` does not work .
` imshow ` doesn't work ?
matplotlib fill_between issue with x argument
Also , a workaround would be to pass in a different ` y ` position to ` suptitle ` .
I believe you need ` plt.show() ` .
I think what you want is ` matplotlib.figure.Figure ` ( the class , rather than the module )
I've plotted figures before without calling " figure.Figure " .
I can't see it in [ patches.Circle ] ( #URL ) , [ patches.Ellipse ] ( #URL ) , [ patches.Patch ] ( #URL ) , or [ artist.Artist ] ( #URL ) .
but what objects were you trying ` set_major_formatter ` on ?
ex : ` yaxis = ax.get_yaxis() `
You'll need a recent ( > = 1.2 ) version of matplotlib , but ` streamplot ` does this .
` plt.xlim (( 5 , 10 ))`
I've tried using the arguments for ` pyplot.legend ` but I haven't found a combination that works .
` ax.scatter ( paleta [ 0 ] , paleta [ 1 ] , paleta [ 2 ] , c =[( r [ 0 ] / 255 ., r [ 1 ] / 255 ., r [ 2 ] / 255 . ) for r in RGBlist ])`
` np.convolve ` does one-dimensional convolution , so in this line : #CODE
Then ` matplotlib.Axes ` have a method ` set_title ` .
The command ' plt.show() ' seems to be redundant ; the graph appears and updates without issuing that command .
Altering ` df.shape [ 1 ] / 2 ` to ` df.shape [ 1 ]` makes the range go from 0 to 5 rather than from 0 to 2 , which is not intended for the above code ; in fact it would raise an ` IndexError ` .
When doing this , the command ` plt.show() ` is _not redundant_ .
If you are using Python 3 , you should specify integer division with ` range ( df.shape [ 1 ] // 2 )` ( the ` // ` is the operator for integer division ) , as range only accepts integers .
' df.dtypes ' shows 6 correctly labelled float 64 columns , dtype ' object ' .
On a side note , ` float ` accepts and ignores whitespace in strings , so the ` strip() ` isn't necessary .
That is similar to what I did in the end , though yours is neater . ystringlist = s [ 0 ] .split()
plt.plot ( x , yfloatlist )
Thanks I got it to work using the following ystringlist = s [ 0 ] .split()
plt.plot ( x , yfloatlist )
Also , I am not sure if gridspec is the best way to do this .
fig.show()
I would point out that what you saying looks complicated in what ` plt.colorbar ` does for you behind the scenes .
df [ 0 ] .tail ( 1 ) .plot ( style= ' rD ' , markersize=12 )
Maybe I am implementing ` arctan2 ` incorrectly ?
The whole point of arctan2 is that the ratio y / x is ambiguous about the quadrant : - / - == + / + and - / + == + / - .
In your equation , you're doing the arctan of the whole thing .
It's just a parenthesis typo on the part of the OP , and sheds no light on anything else ( especially not arctan vs arctan2 due to the misdirection ) .
If you want that to be what this question is about , then I suggest you answer it , with pictures of the domains , explain why arctan2 ( 1 , 1 / x ) works , which is better , etc .
Using arctan2 ( 1 , 1 / x ) instead of arctan ( x ) here is just ridiculous .
@USER Could you explain from were you took arctan ( x )= arctan2 ( 1 , 1 / x ) ?
@USER a physicists suggested ` 1 , 1 / x ` usage in ` arctan2 `
@USER a reference to proof that arctan ( x )= arctan2 ( 1 , 1 / x )
This is documented in artists ( Line2D.set_marker ) Matplotlib 1.2.1 documentation ; however , it doesn't work with older ` matplotlib ` ; here's an example : #CODE
See Imshow : extent and aspect for a more detailed example .
That's helpful , thank you , I had overlooked that kwarg in the imshow documentation .
With no arguments , ` set_clim() ` is a no-op .
I thought autoscale() ?
why you prefer set_data to set_array ?
` set_array ` in fact just calls ` set_data ` #URL
Instead of ` ax.plot ` , try ax.plot_surface .
import matplotlib.pyplot as plt
You cannot " hide " an errorbar behind something transparent , as the markerface is with ` markerfacecolor= ' none '` .
I can do this easily by using add_axes .
` axvline ` doc
The master branch of matplotlib on GitHub seems to include a new [ ` SymLogNorm `] ( #URL ) .
` figure.colorbar ` doc
As far as my rcparams go , I'm not sure .
In your case you can inherit from ` matplotlib.axes.Axes ` and change the ` drag_pan ` method to always act as though the ' x ' key is being pressed .
The part I was having trouble with was the subclassing + how to hook it into add_subplot .
module ' matplotlib.pyplot ' from ' C :\ Python27\lib\sitepackages\matplotlib\ pyplot.pyc ' >
APLpy incompatibility with matplotlib gridspec
Not asking for ` get_position() .bounds ` , but simply ` get_position() ` in the APLpy command
Alternatively , I submitted a pull request for allowing GridSpec to be directly used with the subplot= parameter .
Yeah , it prints out a lot of output , but a quick search for `" quadmesh "` leads you to the answer .
Substituting the imshow() method with #CODE
One modification to the ` ax.legend ( ...
What ` contour() ` method do ?
Good question . plt is imported from matplotlib.pyplot I think it can return some value .
plt is the usual way to import matplotlib.pyplot .
You should check out the [ ` MultipleLocator `] ( #URL ) from matplotlib .
Disable / skip show()
There is ` pyplot ` which is a state-machine based layer built to work with ipython to mimic a ` MATLAB ` like experience .
That is built on top of an ` OO ` interface ( which you really should be using for scripts , instead of ` pyplot ` , but I digress ) .
before importing ` pyplot ` , and comment that line out when you want the interactive figures .
` help ( plt.plot )` shows #CODE
You can also verify that ` plt.plot `' s ` markersize ` must be a float by searching for " markersize " in the official documentation .
Color each errorbar with different color
After defining the ` plt.ion() ` , i have this inside a loop : #CODE
` fft.fftfreq ` by default returns the normalized frequency ( which scales the sampling period ) .
scatter() is a method that has to be called on an object .
Y.tail ( 1 ) .plot ( style= ' rx ' , markersize =15 )
` np.arange ` doc
In the documentation it says that ` arange ` is for integers , whereas floats need ` linespace ` .
huh , I've been using ` arange ` for floats ....
I only just discovered the awesome that is ` matplotlib.mlab.psd() ` , but I am having one issue , that is : how can I change the frequency range used by the method ?
See ` patch.Rectangle ` and ` patchCollection ` .
In above code , instead ` plt.legend() ` I used :
` plt.annotate ( ' my_label ' , ( 8 , 1 ) , backgroundcolor= ' w ')`
You need to make a custom colormap for a LinearSegmentedColormap .
The explanation for how the colormap dictionary below can be understood is given in the LinearSegmentedColormap docs : #CODE
` ax.legend ([ ' 0-10 ' , ' 10-100 ' , ' 100-500 ' , ' 500+ '] , loc= ' best ')`
I bet you've done something like : ` line = ax.plot ( x , y )` .
You can either do ` line = ax.plot ( x , y ) [ 0 ]` or do ` line , = ax.plot ( x , y )` which takes advantage of parameter unpacking .
And indeed ` ListedColormap ` is listed , not continuous , see ` LinearSegmentedColormap ` .
plots one point for every call to ` plt.plot ` .
Thus , ` plt.scatter ` is the way to go .
In that case you will need to call ` plt.scatter ` ( or ` plt.plot `) once for each color / marker combination .
I was previously using ` color = plt.cm.cool ( x / y `) and ` ax.scatter ( x , y , c=colors )`
I'm curious if your suggestion also works for ` plt.pcolor ` ..
` set_rastered ` does not seem to work on pcolor .
I believe it's supposed to be ` set_rasterized ( True )` .
Also , look up ` imshow ` and ` pcolor `
Perhaps [ FileMovieWriter ] ( #URL ) can output sequence of vector files .
How about , ` np.unravel_index ( array.argmax() , array.shape )` .
Using pyplot instead of pylab is preferred now because it is cleaner .
I did try gc.colletc() without success but adding a clf() inside the loop does the trick !
Would mpl devs ever consider adding an option to turn off the bottom line in pyplot.hist ?
It's just there so that the output will look similar to ` imshow ` .
ax.stackplot ( pressures )
AttributeError : ' AxesSubplot ' object has no attribute ' stackplot '`
I don't believe ` stackplot ` was included in the 1.1.1rc-release .
I do not know how to make legend() not duplicate .
are you aware of ` tight_layout ` ?
You need to specify an argument to the ` facecolor ` parameter when calling ` figure() ` : #CODE
Matplotlib streamplot arrows pointing the wrong way
I tried ` plt.pause() ` .
Try changing the value in ` plt.pause() ` from 0.0001 to 0.1 ?
can't be done , ` Line2D ` objects only have one color .
plt.ylim ( 1e-6 , 1e6 ) see also : #URL
Maybe a good idea to edit your answer to include this solution ( i.e. , using rcParams ) ?
In addition to the answer you already found , you can do ` ax.xaxis_date() ` , which is effectively equivalent .
As a quick example ( which also uses ` fig.autofmt_xdate() ` to rotate the x-labels ): #CODE
I found that removing the blit=0 argument in the FuncAnimation call also helped ...
Here is another way of doing the same thing if matplotlib.animation don't work for you .
Matplotlib stretches histogram2d vertically
Things are " stretched " because you're using ` imshow ` .
Try using ` imshow ` with ` interpolation= " none "` instead of ` pcolormesh ` .
Because the coordinates in the ` axhline ` and ` axvline ` method calls are _Axes coordinates_ , not _data coordinates_ .
There is no arrowstyle property for plt.annotate , and arrowprops =d ict ( arrowstyle=myarrow ) doesn't work either .
Sounds to me a job for ` GridSpec ` or ` subplot2grid ` .
Must have been considered a bug , but it was definitely present in earlier versions ( though it would have displayed " Errorbar 1 " instead of " None ") .
It should be ` scat , = plt.plot ...
` plt.plot ( x2 , 3*x2**2 , label= " 3x*x ") ;
plt.plot ( x2 , 2*x2**2 , label= " 2x*x ") ;
plt.plot ( x2 , 0.5 *x2**2 , label= " 0.5x *x ") ;
plt.plot ( x2 , -1*x2**2 , label= " -x*x ") ;
plt.plot ( x2 , - 2.5 *x2**2 , label= " - 2.5 *x*x ") ;
Sorry , forgot ` x2 = np.linspace ( 0 , 0.5 , 100 )` .
Also , you need to run it after imshow : #CODE
Try doing something like ` plt.margins ( 0.5 )` and see if that helps .
` plt.close() `
` close() ` closes a window , which will be the current window , if not specified otherwise .
The ` plot() ` method returns a ` Line2D ` instance .
set_xscale automates the ticks and value labels.Any idea ?
I'm using matshow() in matplotlib and the figures generated has the xticklabels on top by default .
s= 0.0 in this code : AttributeError : ' float ' object has no attribute ' rint ' .
I have also tried ax.set_autoscale_on ( False ) , but with no success
I've tried using ax.set_autoscale_on ( False ) in a few places , as well as ax.autoscale ( False ) , but still no luck
Have you tried ` plot_date ` ?
I tried the ` set_bad ` method , but it seems ` countourf ` doesn't recognize it ( although it recognizes the ` set_over ` and ` set_under ` methods ) .
This is why they don't have a ` set_bad ` method .
@USER Actually most of the work _is_ done with numpy , except for the call to ` hls_to_rgb ` which you could probably vectorize .
Python - Pandas : AttributeError : ' numpy.ndarray ' object has no attribute ' start '
Python - Pandas : AttributeError : ' numpy.ndarray ' object has no attribute ' start '
Does the import of Axes3D do something behind the scenes to alter the import of pyplot ?
Meaning a call to ` subplots_adjust ` will work as expected .
` add_subplot() ` is not enough .
Using PyLab's Specgram In A Headless Environment
Matplotlib pyplot show() doesnt work once closed
( python ) matplotlib pyplot show() .. blocking or not ?
and tried using ` plt.show() ` , ` plt.clf() ` and ` plt.close ` to no avail .
after every ` plt.show() `
@USER i actually tried different backends using matplotlib.use() , does not work .
I have to import matplotlib.pyplot as plt
But when I try to run , it tells me that set_major_locator method does not exist .
when I type : print hist_strm [ 1 ] .dtype
ah , sorry . the solution is plt.figure ( facecolor= ' w ') .
The same happens if I change ` draw() ` for ` show() ` .
I remember trying ` matplotlib.ticker.LogFormatter ` but I didn't like it much : if I remember well it puts everything in ` base^exp ` ( also 0.1 , 0 , 1 ) .
strange behavior of numpy.asmatrix or matplotlib.pyplot.scatter
I usually do this with ` Figure.add_subplot ` : #CODE
The best solution is probably ` pyplot.subplots() ` .
@USER ` fig.set_size_inches() `
you can also pass ` figsize ` as keyword argument to ` pyplot.subplots `
` LogNorm ` doc
237 def asanyarray ( a , dtype=None , order=None ):
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot ( 1 , 1 , 1 )
ax.plot ( ferms [ 0 ] , ferms [ 3 ] , ' k -- ')
plt.xlabel ( ' EFT ( h )')
plt.ylabel ( ' pH ')
matplotlib imshow() : how to animate ?
So when I include window = plt.figure() .
Also , in ` FuncAnimation ` I'd recommend passing ` blit=True ` so that you're not redrawing the background on every frame .
And if you're using matplotlib instead of pyplot , the interactive command is ``` matplotlib.rcParams [ ' figure.figsize '] = ( 10.0 , 8.0 )```
Furthermore , try not to mix the OO and pyplot interface of matplotlib .
Half of your example code could be replaced with ` ax.axis ( ' off ')` .
ion() - interactive on
show()
plot()
- plot()
- draw() - instead of show()
I also found out that it just works with ` plot() ` , this is probably a bug ...
Basically a ` plot() ` is added just after the ` plot_date() ` : #CODE
The bad thing about this is that it calls ` ax.scatter ` more than once .
numpy.unique
ax.scatter
numpy.fromiter
Also , what is numpy.unique() telling python to do ?
plt.show()
Does ` from pylab import * ; figure() ;d raw() ` steal focus ?
I don't have ' figure() ' anywhere in my code .
You can switch it on using ion() ( see Documentation )
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
ImportError : No module named pyplot
import matplotlib.pyplot as plt
I have tried using different ways to call the import ( such as from matplotlib import pyplot ) , but it doesn't work neither .
I also tried clearing unwanted ticks using ` ax.set_xticks ([ ])` .
why are you using ` meshgrid ` ( doc ) ?
I am using matplotlib.pyplot to create histograms .
Here is the definition from matplotlib.colors.rgb_to_hsv #CODE
Since matplotlib is doing that with the RGB colorspace , it is consistent for it to do so with the HSV colorspace .
a = np.array ( img ) .astype ( " float32 ")
The hexbin documentation reads :
The documentation for hexbin also mentions :
RegularPolyCollection .
matplotlib pcolor faceted not working
x= np.cos ( u ) * np.sin ( v );
y= np.sin ( u ) * np.sin ( v );
z= np.cos ( v );
Is there a way to adjust the density of the triangulation ?
Personally , I would change to the object-oriented way of pyplot .
In each borehole there is a zone i'd like to highlight , which I've done with axhspan .
On some datasets , everything works fine and on other datasets , matplotlib is basically doing what it wants and displays xaxis labels that I didn't specify .
I also tried ` FixedLocator() ` , but I got the same result .
On some datasets it is working and on others , matplotlib is using a different number of xtick labels .
So with this attempt , I am basically struggling with the same problem as with ` Figure() ` and ` add_subplot() ` .
@USER I took a look to your example and it seems that , from your original question , what you needed is something like : ` ax.locator_params ( axis= ' x ' , nbins=6 )` applied for each ` AxesSubplot `
` ax.locator_params ( axis= ' x ' , nbins=6 )` only seems to work with ` sharex = True ` .
When I run your code inside ipython , I see the same thing : ` onpick() ` is never called .
Cannot import matplotlib.pyplot in python 3
To specify the markerstyle you can include this as a positional argument in the method call , as seen in the example below .
You can define your own X-Axis-Ticks together with their labels using ` ax.set_xticks() ` , in your example #CODE
The problem is that I don't have anything that I can simply call .ravel() on : I either have 1d meshes of xvals and yvals , the 2D versions X , Y , and the single z value .
Is there a way to prevent ` autofmt_xdate ` from quenching the other x-axis labels ?
This is actually a feature of the ` autofmt_xdate ` method .
From the documentation of the ` autofmt_xdate ` method :
This is preferred to twining the xaxis which can cause confusion for some people .
I used set_xlabel method .
Thanks . one small doubt i have is can i change my yaxis scales after it has been plotted .
matplotlib matshow : How to change each row height based on a scaling vector ?
Using the standard matshow example : #CODE
You'll need plt.ion() .
You are just using ` set_data ` in a different way .
The reason was a very low ` interval ` -value in ` FuncAnimation ` .
I would ve mentioned plt.show() part .
#URL UserWarning : This call to matplotlib.use() has no effect
matplotlib.use() must be called * before * pylab , matplotlib.pyplot ,
This is , as you note , inconsistent with set_color , which sets both the edge and the face color .
From the ` matplotlib.pyplot.hist ` documentation :
` plt.xticks ( rotation=90 )` .
You can specify an ` interval ` argument to the ` DateLocator ` as in the following .
Like , could I say ` plt.plot ( centers , vals , Color ( 0 , 0 , 0 ))` ?
Matplotlib savefig() on a zoomed in graph
However , the savefig() output is too zoomed out , too general .
Then I typed the same code and the ` show() ` worked .
Updata2 : I just fount that the ` gcf() ` returned different references in the QT Console , and it returned the same reference in WinPython Interpreter .
But I do not know how to make show() works .
Maybe the gcf() returns different references cause this problem .
If X and Y are 1D and U and V are 2D and the length of X and Y is the same as the length of the rows and columns of U an V then they will be expanded as a meshgrid .
import matplotlib.pyplot hangs
However , if I try to import matplotlib.pyplot , it just hangs .
I just tried that but have the same problem when I run ` import matplotlib.pyplot as plt ` .
@USER Just checked ` fc-list ` and that hangs just like ` import matplotlib.pyplot ` .
@USER your ` fc-list ` suggestion seemed very promising and I was able to create the cache , but unfortunately the ` matplotlib.pyplot ` problem persists .
After ` fc-list ` finishes running you will be able to import the package using ` import matplotlib.pyplot as plt ` .
I actually tried to do something like that , but I believe my yAxis was wrong .
I don't see anything about it in [ FuncAnimation documentation ] ( #URL ) .
Here is an example of using FuncAnimation without a custom class : #CODE
From np.histogram2d : #CODE
The problem is that Tkinter sees that pyplot should have a window to work in , and because we are running the matplotlib.pyplot inside Tkinter , Tkinter creates a window for it .
And , ofcourse , appropriately change ` xAxis ` and ` yAxis ` .
` pyplot ` also starts up it's own mainloop which I suspect is your problem .
My answer still stands -- especially using ` matplotlib.figure.Figure ` rather than ` plt.Figure ` .
One of the things that ` plt.figure ` does for you is wrangle the backend for you , and that includes setting up the canvas .
I've tried to create a meshgrid similar to how I would in matlab using #CODE
pl.xticks ( np.arange ( 0 , 120 , 32 ))
pl.yticks ( np.arange ( 0 , 100 , 32 ))
It seems to fail with ` plt.title ` , ` ax.set_title ` , and ` ax.text ` .
img , = plt.plot ( np.sin ( vls ))
ax = plt.axes()
ax.set_xlim ([ 0 , 2*2* np.pi ])
plt.ion()
img.set_data ( vls , np.sin ( vls+ .02 * ( i%50 ) *2* np.pi ))
plt.draw()
Setting blit=False causes it to work with the original problem code , just slowly , like ion() .
You can try using ` twiny ` instead of ` twinx ` .
I think ` fill_between ` will let you do what you want #URL
@USER That is the right idea , but it should be ` z = np.zeros ( x.shape )`
Can you just ` imshow ` it ?
Yes , imshow displays it nicely .
I just discovered plt.setp , nevermind !
Installing matplotlib failed , ImportError : No module named pyplot .
Thus , Python imports your script ( and not the installed matplotlib ) when you execute ` import matplotlib.pyplot ` , and since your script has no submodule ` pyplot ` , it fails .
But if I try im1 =grid_top [ n ] .m .pcolor , it doesn't work .
I am reading a csv-File using matplotlib.mlab.csv2rec .
` import matplotlib.pyplot as plt
plt.plot ( var1 , var2 )`
` plt.scatter ( var1 , var2 )`
I defined the plot- " length " in ` canvasLength ` and then used ` ax.set_position ( pos = [ 0 , 0 , canvasLength , 1 ])`
You have only provided the ` bottom ` argument to the ` set_ylim ` method .
Fractions for xtick labels in matplotlib.pyplot
I'd start by doing ` dir ( ax.axis [ " xzero "] .major_ticklabels )` and see if there's anything helpful .
The problem is that I need to animate the thing with matplotlib.animation .
Edit : Tried using fig.show() which does not work .
How to display yaxis on both side using matplotlib 0.99 ?
I want to display yaxis on both side .
I tried putting newline escape characters ( \n ) in the DateFormatter , but it is a poor solution as the vertical spacing is not quite right .
Simply adding the line before " plt.show() " : #CODE
You have to give the ` axvline ` method a numerical value , not a string .
Here is a pcolor example from the matplotlib page adapted in the way I just described .
This occurs whether set_xlim() occurs before or after plot() .
Why is set_xlim() not working in this situation ?
Does calling ` ax.aspect ( ' auto ')` before calling ` set_xlim ` help ?
Are you explicitly setting ` ax.set_xticks ` / ` ax.set_xticklabels ` ?
This has the tendency to mess up ` ax.xlim ` if your ticks / labels are outside of the ` .xlim ` .
I am using python and matplotlib / pyplot .
Using fill_between for a band
Applications : Radio Direction Finding by triangulation .
It does the same thing for your xaxis , but fortuitously you have 4 major ticks there .
Is the ` ax ` in ` ax.get_major_formatter() ` also supposed to be replaced with ` f.gca() ` ?
I am using pyplot from matplotlib .
Setting Yaxis in Matplotlib using Pandas
Don't want to miss features such as ` tight_layout() ` anymore .
It is working well with using heatmaps in matplotlib ( pcolor ) .
Option 2 - present 1 dataset as pcolor , and another as countour : #CODE
unfortunately , simiar alpha tricks do not work well with pcolor .
You need to call ` figure() ` more than once .
Apparently PyPlot is interfering with the tkinter root windows .
rects1 = plt.bar ( ind , set_A , width , color= ' g ')
I've tried both native matplotlib and pyplot , but the results are the same .
I tried cla() , clf() , close() and this not help me .
You can do one better and just call ` set_powerlimits ` on ` gca() .get_major_formatter() `
Dictionaries have a convienient ` values() ` method that does what you need : #CODE
The complement is the ` keys() ` method : #CODE
plt.legend()
To change only the left limit , you can either include the kwarg ` left ` , or just give the method one ( positional ) argument , i.e. ` ax.set_xlim ( 0.0 )` .
Is there a way to make local titles using subplot2grid in Python
` np.zeros ( x1.shape )` is more direct here as the standard ` np.zeros_like ( x1 )` .
I had imported ` matplotlib as plt ` instead of ` matplotlib.pyplot as plt ` .
Did you remember to call ` plt.draw() ` after ` set_ticks ` ?
` cbar = plt.colorbar ( surf , shrink=1 , aspect=12 , ticks =[ -2 , -1 , 0 , 1 , 2 ])`
I tried the following script but the pyplot window which opens to display the plots becomes un responsive .
@USER I'm following this example - #URL I'm not using pyplot .
using ` set_visible ` might be a better option than removing the artists .
Don't import ` pyplot ` if you are going to embed it in your own gui .
For future reference , this is known as an _offset_ , and can be disabled by calling ` ax.xaxis.get_major_formatter() .set_useOffset ( False )` when the ` ScalarFormatter ` is used , as in this situation .
I have tracked it down to the plt.plot line but in the absence of further information I am lost .
My code bellow produces a polyfit of the points in my graph , but I want this fit to always pass through zero , how do I do this ?
@USER that's why it is a hack , in case OP wants to keep using ` polyfit ` ( which he may or may not ) .
= 184 , and the reshape() call should fail .
Since ` XX ` is created in the ` meshgrid() ` call , ` y ` or ` x ` may have incorrect dimensions .
python / matplotlib hangs randomly on on savefig()
What arguments are you passing to savefig() ?
Have you tried ` imshow ` with ` interpolation= ' nearest '` ?
Maybe my problem lies with an unsufficient understanding of the meshgrid() -function or the mgrid-class of numpy .
If you are embedding ** do not ** import ` pyplot ` .
See #URL You are mucking up the internals as ` pyplot ` sets up _its own_ gui , mainloop and canvas .
I've almost figured it out using gridspec : #CODE
Finally I don't see the option ` sharex=True ` in gridspec .
There are more efficient ways to do some things ( ie ` LineCollection ` vs 10k ` Line2D ` objects )
This is a altered version from ' Hooked ' who posted in regard to a different hexbin question .
Is matplotlib.patches.FancyArrow not well behaved ?
Is FancyArrow buggy ?
* ` commands have an implicit ` plt.draw() ` in them so you _are_ calling it .
Thanks @USER I realize I had an ` ion() ` on my code .
` pyplot ` has an interactive functionality which will automatically call ` draw() ` after most ` plt .
This can be turn off via ` plt.ioff() ` or by not calling ` plt.ion() ` ( ` ipython -- pylab ` automatically turns it on for you ) .
Otherwise " import matplotlib.pylab as plt " and plt.title ( " ..... ") should do the trick
Along with ` ax.xaxis.set_major_formatter ( DateFormatter ( ' %Y-%m-%d '))` , this works like charm !
For the ` set_aspect ` read the documentation link .
Sorry but I am asking about the range ( 5 ) thing inside plot() .
I prefer to stick with pyplot rather than pylab .
The final solution by adding numpoints=1 to the general legend() worked .
This is what I used : " plt.legend ([ p1a , ( p1a , p1b )] , [ " Attr A " , " Attr A+B "])" for my case .
For example the following does not work : plt.legend ([ p1 , p2 , p3 , ( p5 , p4 )] ,
possible duplicate of [ matplotlib imshow() : how to animate ? ] ( #URL )
If you change ` img.append ( plt.imshow ( Z [ i ]))` to ` img.append ([ plt.imshow ( Z [ i ])])` then your code works fine .
I knew about the ` vmin ` and ` vmax ` keyword arguments from using ` imshow ` so searched for ` plot_surface ` on the matplotlib site and saw these were listed .
try to create the ` img ` variable as : ` img = Image.open ( ' test.tif ') .convert ( ' L ')`
When you do ` PCA ( x )` you are creating an instance of that class , and when you print it in the following line you are told that you have got yourself an instance of matplotlib.mlab.PCA .
why does numrow > numcol for PCA in matplotlib
` plt.autoscale ( enable=True , axis= ' both ' , tight=None )`
Depending on which interface / environment you are using to run script you might need a plt.clf() before you start in your script .
The edges can be removed by slicing the tcks variable when setting the minor ticks : ' ax.set_yticks ( tcks [ 1 : -1 ] +5 , minor=True )'
Python Matplotlib FuncAnimation
I am having trouble understanding the FuncAnimation module of matplotlib .
Maybe a little * plt.show() * missing in the end ?
I have tried using ax.autoscale ( tight=True ) , but the result did not change .
What does ` np.std ( y_coords )` give ?
* ValueError : to_rgba : Invalid rgba arg " ( 1.0 , 0.0 , 0.0 , 2.5 )
remotely running the " show() " command on matplotlib.pyplot
import matplotlib.pyplot as plt
Alternatively you can call ` fig.autofmt_xdate() ` for a nice tilted effect , which you can of course tinker with with the above ( and more general ) ` ax.set_xticklabels() ` : #CODE
* ` instead of ` matplotlib.pyplot .
I realized that ` streamplot ` accepts only fixed coordinated .
Is the PCA stuff really relevant ?
I have also tried using ` twinx() ` and ` twiny() ` but also having issues .
plt.subplots_adjust ( hspace= 0.1 )
Eg , try ` fig = plt.figure() ; ax = plt.Axes ( fig , [ 0 , 0 , 1 , 1 ]); fig.add_axes ( ax ); ax.set_axis_off() ; ax.imshow ( im , aspect= ' auto ') ; plt.show() ` .
Also , see ` set_under ` and ` set_bad ` functions of ` colormap `
I'm still a bit bothered by the renormalized range 0-1 that imread() appears to invoke .
And , understanding why that happens for par2.plot , but not for ax.bar object .
I wonder how linebreaks in plots using xkcd do work .
` plt.xkcd() ` is not well supported with the ` MacOSX ` matplotlib backend , which I assume you are using .
your code will work properly with ` plt.xkcd() ` .
ImportError : No module named matplotlib.pyplot
Thanks @USER , I read that thread , but it looks like there are actually many different ways of doing this : ** 1 ) ** ` matplotlib.pyplot.plot ` , ** 2 ) ** ` pylab.plot ` and ** 3 ) ** ` pylab.plt.plot() ` .
you see that both every thing from ` pyplot ` is imported ( ` from matplotlb.pyplot import * ` and ` pyplot `) and ` pyplot ` is imported ( ` import pyplot as plt `) .
@USER ` plt ` is ` matplotlib.pyplot ` .
I wanted to try using CircleCollection or RegularPolygonCollection , as this would allow me to change the sizes easily , and I don't care about changing the marker .
You can probably do something with ` matplotlib.colors.LogNorm() ` similar to [ this answer ] ( #URL )
This is what ` axhspan ` and ` axvspan ` do behind the scenes .
showing specific xtick in matplotlib
Does anyone know how I can keep my minor xaxis ticks ?
Also , see [ Matplotlib , pylab , and pyplot : how are they related ? ] ( #URL ) .
Speed up Numpy Meshgrid Command
How about ` xi , yi = np.meshgrid ( xi , yi , copy=False )` .
It looks like you might not need to pass ` xi ` and ` yi ` through ` meshgrid ` .
If ` meshgrid ` is what's slowing you down , don't call it ...
According to the ` griddata ` docs :
So your call to ` griddata ` should work just the same if you skip the call to ` meshgrid ` and do : #CODE
Are you sure your performanc issues are coming from ` meshgrid ` , not from ` griddata ` ?
Is ticklabel_format broken ?
There , the solution was to call ` update_ticks() ` .
Why does pyplot.quiver plots vectors with infinite length ?
( ` tight_layout ` just calculates the input to ` subplots_adjust ` automatically . ) Hope that helps a bit , anyway !
I would like to stick with pyplot unless there is no option .
Per @USER ' s comment , I think this would be faster than ` .close ` .
' and ' plt.figure() ; for result in results : plt.clf() ...
Has anyone else seen / fixed the same issue after upgrading using ` get_legend_handles_labels() ` and ` figlegend() ` ?
I've seen this .T before , will look up what it actually does
I think it is worth mentioning in your answer that you can just pass the origin keyword to imshow .
The x and y in the plot() are of different dimensions .
The same works for ` set_yticklabels ` ...
How to to embed matplotlib.pyplot in wxpython ?
@USER : That demo uses matplotlib.pyplot .
My version of matplotlib doesn't have ` plt.subplots() ` .
@USER , does your version of matplotlib allow you to do ` fig = plt.figure() ` , ` ax = fig.add_subplot ( 111 )` ?
Elemnts are in the same position with my PCA ( just mirrored ) , but the concerns are too much different .
words as y-values in pyplot / matplotlib
using imshow() .
` im = imshow ( randn ( 10 , 10 ))` returns an ` AxesImage ` object .
If you want to be super clever , you can monkey-patch ` plt.imshow ` with your version #CODE
Basic example for PCA with matplotlib
I don't think the ` mlab.PCA ` class is appropriate for what you want to do .
of ` LineCollection ` s .
Do you expect cntr.Cntr() to be faster than matplotlib.pyplot.contour() ?
fill_between gives " ValueError : Argument dimensions are incompatible "
Unfortunately , my matplotlib doesn't have the tricontourf()
object of type ' NoneType ' has no len()
But if I import ` matplotlib.pyplot ` in the console python itself offers , it can be imported successfully .
have you tried importing matplotlib.pylab , as it is alias for pyplot ?
I suppose I should keep a reference to the return value of the ` ax.scatter ` and always return that ?
I tried plt.annotate() and I tried plt.text() but the labes don't move .
a 2-D ndarray in which each column is a dataset .
You need to import the ` matplotlib.dates ` module explicitly : #CODE
I found an odd behavior for pyplot plots .
Basically I'll have some radiobuttons linked to a IntVar() : #CODE
` set_visible ` is I think what you are looking for .
@USER many numpy functions will auto-convert lists to arrays under the hood ` np.mean ( range ( 72 ))` works just fine .
matplotlib hatched fill_between without edges ?
Excellent , I think I tried every other kwarg to ` fill_between ` except that one !
Also see ` axvspan ` #URL
I tried doing this by changing ` connectionstyle ` , but that didn't work .
plt.show()
possible duplicate of [ Selective patterns with Matplotlib imshow ] ( #URL )
If you are embedding you _shouldn't_ import pyplot ever .
Colour images work fine with both of these commands , but greyscale only works with ` imshow() ` .
Just call the plt.xticks and plt.yticks functions .
Using ` plt.tight_layout() ` , or better ` plt.figure ( tight_layout=True )` in version 1.3 , is another way to do that ( which works perfectly with PGF and PGF -> PDF ) , although it is a bit different .
right before savefig() ?
never mind , solved it , I was specifying tight_layout in too many places :) many thanks for your assistance !
It's because it should be ` matplotlib.pyplot.contour ` .
You just have to creat ` a ` as a meshgrid , using ` X ` abd ` Y ` instead of ` EF ` and ` EB ` : #CODE
If have a streamplot : #CODE
Essentially , the ` c.arrows ` PatchCollection is completely useless , as best I can tell :
Even if it did , PatchCollection does not work with FancyArrowPatch .
Do not import ` pyplot ` if you are embedding
I replaced ` plt ` with ` matplotlib.pyplot ` within ` plot_energy_column ` .
Can you run ` print dir ( plt )` and ` print plt.__file__ ` right before plt.show() so that you can see if it's importing the right package ?
Matplotlib Errorbar Caps Missing
We need to see your rcparams to debug this .
I know ( _ , caps , _ ) is producing a tuple of tuples , however , set_color() and set_markeredgewidth() I am unfamiliar with .
I start from two linspaces and I meshgrid them .
I don't know how to iterate on a meshgrid .
` pcolor ` and ` pcolormesh ` ?
You want ` set_visible ` ( doc ) #CODE
I've also used ` ax.set_xlim ( 1 , 6 )` and ` ax.set_ylim ( .1 , 1e6 )` to make it pretty .
I am trying to create a heatmap with ` pcolor ` using the example from Heatmap in matplotlib with pcolor ? but I run into trouble .
or ` ax.set_xticklabels ([ 20 , 25 , 30 , 35 , 40 ] , minor=False )`
` set_xticks ` and ` set_xticklabels ` are dangerous and should only be used rarely .
Matplotlib imshow() too many objects for cmap
( ` pcolor ` and ` pcolormesh ` do , however ) .
What's happening is that ` imshow ` expects #CODE
` xticks() ` is what you want : #CODE
+1 On a side note , there's no need to do ` [ 2**x for x in arange ( 1 , 5 )]` It's much more efficient to just do ` 2**arange ( 1 , 5 )` .
In this case I'd recommend ` MultipleLocator ` and ` FuncFormatter ` as seen in example below .
+1 for a solution that doesn't rely on pyplot
I thought that ` FuncFormatter ` and ` MultipleLocator ` were not part of ` pyplot ` , turns out they are imported with ` pyplot ` .
` pyplot ` is just a bucket for bulk importing ` matplotlib ` related stuff .
errorbar doc .
The keyword parameter ` vert=False ` can also be passed to ` DataFrame.boxplot ` : #CODE
The longest xtick reads something like `" Age of pregnant women "` .
You are trying this after using ` show() ` ?
I haven't found a case in which show() doesn't work by itself , though .
What does extent do within imshow() ?
From the documentation of ` pyplot.bar() ` ( same applies to ` pyplot.barh() `) :
Detail : xerr and yerr are passed directly to ` errorbar() ` , so they can
From the documentation of ` pyplot.errorbar() ` :
Can this be done by setting a rcParams entry ?
You are not using ` add_subplot ` correctly : #CODE
As a side note you can unpack the ` AxesSubplot ` instances directly : ` fig , ( ax1 , ax2 ) = plt.subplots ( ...
Can i paste matplotlib.image.AxesImage generated by imshow on this PhotoImage as well ?
if its not possible can I do what tricontourf does without matplotlib in python ?
Maybe using MultipleLocator and FormatStrFormatter functions ?
Is it due to not having the line ` fig = plt.figure() ` ?
You can pass a numeric value to ` set_aspect ` , see the [ documentation ] ( #URL ) .
I thought that this should be easily accomplished with ` fig.colorbar ( c , ax=ax , ticks=my_levels )` .
python matplotlib.pyplot and numpy problems
Yes , you're right , for example with this I noticed that ` set_over ` for example doesn't work .
I unaccepted this answer as I finally found a satisfactory alternative using `` BoundaryNorm `` which I documented in the accepted new answer .
While reading the documentation on the normalizing classes from ` matplotlib.colors ` I figured ... well , ` matplotlib.colors.BoundaryNorm ` should be used here ! but something is wrong as you can see in the following example : #CODE
I believe you can achieve this with ` ax.scatter ` : #CODE
` subplots_adjust ` does not work as expected .
I think the ` subplot_adjust ` call is irrelevant here since the adjustment is overridden by ` tight_layout ` .
` tight_layout ( pad=0 )` will meet your need .
I am not able to interpret the spectrogram produced by ` specgram ` from the pylab API .
Python : Pyplot in loop --> curves are cumulated per iteration , not separately plotted
Pyplot is convenient but handles a lot of things in the background making you unaware of whats really going on .
gcf() .clear()
Inserted after pyplot.savefig() and the problem seems to be solved .
Here's the documentation for ` set_xdata ( x )` : #CODE
How do I then call ` set_array() ` with the colours I've used ?
I ended up doing something very similar : storing the counts that drive the colormap value , normalising to a 0 , 1 interval ( ` colours `) , and then creating a ScalarMappable , doing ` set_array ` , and ` set_clim ` .
if you are embedding matplotlib in something else do not import ` pyplot `
oops , I think it was pyplot.clf() which caused the long delay .
I have had the same results with images loaded and then displayed with imshow() .
I would suggest using the OO interface : ` ax = plt.gca() ; cur_ylim = ax.get_ylim() ; ax.set_ylim ([ cur_ylim [ 0 ] , 1 ])`
as a side note , don't mix embedding with ` pyplot ` ( I can't tell from this code if you are or not , but that could be messing you up )
Search for ` sfnt4 = sfnt4.decode ( ' ascii ') .lower() `
matplotlib streamplot with a change of variables
Hi I'm an happy user of streamplot module in matplotlib ( version 1.3 ) .
Exchange the numpy.mean / numpy.std in your code by them and everything should be fine (;
I thought I already had that covered because I had added the following line to my rcParams dictionary : #CODE
Call the Basemap class instance on this lat / long meshgrid to create a meshgrid in the Basemap object's coordinate system
ax.ticklabel_format ( useOffset=False )
as a side note ` pyplot ` and ` plt ` are the same thing
I have updated the answer , using ` plt.close() ` doesn't output this .
This is subtle , but changing ` plt.close() ` to ` plt.close() ; ` should do the trick .
But timing both approaches reveals the benefits of using ` bincount ` , a 30x speed-up : #CODE
I also had to be specific about the coordinate reference system in the ` imshow ` method as Phil suggests .
So in your case , the ` plt.imshow ` should have a ` transform= ccrs.Mercator() ` keyword argument ( you may need a a more specific parameterised Mercator instance ) .
I was unable to force imshow() dropping my
Ideally an arg ` usetex=True ` passed into ` ax.text ( ... )` is what you want .
` axvspan() ` returns a ` matplotlib.patches.Polygon ` result .
Python Matplotlib FuncAnimation only draws one frame
The additional ` import matplotlib as mpl ` to have access to the ` ColorbarBase `
matshow with sparse matrices
` matshow ` works on dense arrays .
I would do it by modifying the existing manager and following how the ` PySide ` vs ` PyQt ` issue is handled ( by using a secondary rcParams which controls which one the backend imports ) .
Thanks , I did not think about rcparams , but it was the easiest way .
using ` barh ` creatively is probably an easier route
I want to fit a line on same graph , I tried numpy.polyfit , but I am going nowhere ,
How to fit a line using polyfit if your graph is already in loglog scale ?
You should definitely try playing with the ` method ` argument of ` griddata ` .
you import griddata from ? ...
` from scipy.interpolate import griddata ` or ` from matplotlib.mlab import griddata `
@USER , ups , you are right , fixed ( ` from matplotlib.mlab import griddata ` is the right one ) .
I don't know what ` set_smart_bounds ` does :-|
Previously I had ` plt.plot ( range ( 10 ) , ' o ')` , which removes the line completely .
I now write ` plt.plot ( range ( 10 ) , marker= ' o ')` , which leaves the line intact and just adds the marker .
I'm wondering if I can send out a matplotlib pyplot through smtplib .
triangulation without long triangles
In addition , it works pretty well with large arrays in comparision with pcolor .
` set_position ` #CODE
A side-ways method would be to look into the ` DraggableLegend ` #URL #URL
It is also conventional to import ` pyplot ` as ` plt ` , not ` P ` .
because you haven't called ` plt.legend() `
What is the `` dtype `` of your ' datetime ' column ?
Also , don't mix ` pyplot ` with guis ( unless you are explicitly using a non-interactive backend ) .
( via twinx or twiny )
Using ` pcolor ` from matplotlib I am unable to do it because my pc goes easily out of memory ( more than 8G ) ..
Python Pyplot : How to scale x-axis independant from number of list-elements ?
Have you tried ` ax.autoscale ( True )` ?
I am trying to animate a pcolormesh in matplotlib .
plt.show()
What is ravel() ?
I am going to post my solution using FuncAnimation .
The problem was that I was wrongly using ` set_array() ` routine .
But set_array does not support the same input as the constructor .
Using QuadMesh.set_array() with shading = ' flat '
Using QuadMesh.set_array() with shading = ' gouraud ' #CODE
You might be better of just starting an interactive python session and using ` plt.ion() `
is plt.ion() necessary for this ?
` matplotlib.get_backend() ` will tell you the backend .
you have to do that before ` pyplot ` is imported
One is ` .set_xlim ` the other is ` .xlim ` .
You are setting ` set_xlim ` and ` set_ylim ` instead of calling it .
When you make that change , you'll notice that ` set_xlim ` and ` set_ylim ` can't be called because they don't exist in the ` pylab ` namespace .
@USER , yep I had found it but it seems to be related to changing the position of the xaxis to the top .
You can do it with twiny() : #CODE
But I did not know about ` np.argmax ( n )` thanks for that .
elem = np.argmax [ n ]
Why does plt.savefig() performance decrease when calling in a loop ?
You can conveniently create ` X ` and ` Y ` using ` numpy.meshgrid ` : #CODE
@USER ` imshow ` defaults to using ` vmin=min ( arr )` and ` vmax=max ( arr )` .
plot_date() doesn't seem to work .
return datetime.datetime.strptime ( time_string , ' %Y-%m-%d %H ')` and ` pd.read_table ( ' file.txt ' , index_col=0 , parse_dates=True , date_parser =d ateParserHour )`
` fig.savefig ( ..., dpi= fig.get_dpi() )`
In my understanding the ' subplots_adjust ' overwrites other settings that potentially distort the aspect ratio and hence is should work fine .
From your example code ` w ` is about 2 and then you do : ` fig.set_size_inches (8 , w* 8) ` .
Just call ` plt.ion() `
no good reason for not using matplotlib.animation - is this faster , or just cleaner code ?
So the 1963 chart xaxis would look like this : 1963 , 1964 , 1965 ,...
The 1964 chart xaxis would look like this : 1964 , 1965 , 1967 ,...
Also see the demo and the docs ` set_xticks ` and ` set_xticklabels `
The ' reduce_C_function= np.std ' gives me the standard deviation of velocity ( vel ) in each hexagram , which is what I want , but I also want it to print the vector to the screen .
As has been explained here , ` imshow ` by default uses an aspect ratio of ` 1 ` .
Matplotlib pyplot draws so :
Also , try pcolor() , which might be more suited for this task .
matplotlib.use ( ' QTAgg ')
( ` matplotlib.get_backend() ` and ` matplotlib.__version__ `)
@USER matplotlib.get_backend() reports " MacOSX " in both cases .
Figures created through the pyplot interface ( ` matplotlib.pyplot.figure `) are retained until explicitly closed and may consume too much memory .
.. and a change to linspace ( 0 , 2 , 10 ) is faster with the same behaviour .
On MaxOSX with MPL 1.3.0 . matplotlib.use ( ' Qt4Agg ') did not change a thing .
You can also do it with setp() : #CODE
What I don't understand is how do ` contour() ` and ` plot_firewrame() ` actually work ?
Thanks , ` griddata() ` and ` meshgrid() ` did the job !
get_cmap , array_cmap , stack_colormap , band_colormap .
I'm now able to import pyplot :)
With the .source code and picture of the output below #CODE
In matplotlib.pyplot , how to create label in x and y coordinate ?
The formatting options won't work ( ` .set_scientific ( False )`) this way , though , and your #CODE
and then create the ` PatchCollection ` with the warg ` match_orginal ` : #CODE
is ` tight_layout ` what you are looking for ?
try ax.plot ( x ... ) only ?
Maybe you have better solutions than pyplot ..?
Edit : I did not see using plt.show()
that there is still the yaxis without ticks .
If you examine the docs for the matplotlib.pyplot.bar() method here :
I don't think you can do it efficiently without ` LinearSegmentedColormap ` @USER suggested .
The documentation of Figure.show says #CODE
The only reference to header interpretation I have found is in the plotfile documentation ( linked above ) , however I am passing the column indexes as an integer tuple like in the statement below : #CODE
According to ` csv2rec ` ( which is used by ` plotfile `) :
@USER Is it possible to skip rows periodically with plotfile() ?
I was looking for the solution using pyplot .
I am running the tutorial for pylearn2 and I'm getting some errors when it imports ` matplotlib.pyplot ` .
This can then be plotted using ` numpy.cumsum ( y )` .
` np.cumsum ` is the right tool for this job .
While the default for the parameter ` bottom ` of ` plt.bar ` is claimed to be ` 0 ` , adding an extra keyword argument sets ` bottom=None ` which subsequently leads to arithmetic using ` bottom ` to fail .
subplots_adjust in matplotlib does not work in IPython Notebook
In both notebook saved file , the subplots_adjust command has no effect .
What does ` matplotlib.get_backend() ` return ?
@USER This is in-line . matplotlib.get_backend() returns : ' #URL
The question is - I tried to specify matplotlib.use ( ' Qt4Agg ') and the problem remains , even though it is a different backend .
subplots_adjust() just cannot run on ipython notebook , and it somehow impacted some hidden-settings .
It seems that the subplots_adjust() simply doesn't work for python 3 in ipython-notebook .
For the width : ` legend.get_frame() .set_linewidth ( w )`
For the color : ` legend.get_frame() .set_edgecolor ( " red ")`
If you are using matplotlib , everything ends up as a ndarray underneath _anyway_ .
plt.legend ( handles=legends )
I am making sure to call ` .Realize() ` and ` .Update() ` on the toolbar , but so far I've had no luck .
Another way to do it , using ` axes.get_xlim() ` : #CODE
How would I achieve this in matplotlib without using meshGrid() .
` matplotlib.__version__ ` and ` matplotlib.get_backend() `
matplotlib.pyplot.close()
Interestingly , the same code , without the ` plt.show() ` , worked in ipython if ` pylab ` is invoked before .
are you looking for ` set_xlim ` ` set_ylim ` and ` set_zlim ` ?
What does ` matplotlib.get_backend() ` return ?
Try adding a ` plt.pause ( .1 )` in your loop .
matplotlib qt imshow animate
Are you aware that the commands in matplotlib.pyplot are not hread-safe ?
I should have investigated properly about pyplot " thread-safeness " :)
Matplotlib pcolor / pcolormesh falls apart if the number of rows / cols are certain numbers ( usually prime )
Have you tried using ` plt.xlim ` and ` plt.ylim ` ?
I confirm that the problem is related to installing ` numpy ` using ` pip ` because immediately after running ` sudo pip uninstall numpy ` , PyPlot works again .
You could install the up-to-date numpy in a virtual env for your python stuff and leave the older numpy installed for julia / pyplot
Those are ` np.linspace ( 0 , 2* np.pi , 100 )` and ` np.ones ( 100 ) *5 ` here .
` plot() ` creates ` .lines .Line2D object ` objects , if you want ` .collections .PathCollection object ` instead of Line2 D: #CODE
I am using the method fill_between , but I'm happy to change this if there is a better way to do it .
I have tried ` axvspan ` , but this doesnt have ` cmap ` as an option .
Notice how the ` vmin ` and ` vmax ` arguments of ` imshow ` control the shading .
I know ` a ` is because you built it as ` np.arange ` .
np.outer ( a , r ) works perfectly .
I've used the get_yticklabels() command before , but never setp() , seems like that is what I was missing !
` plt.imshow ` of matplotlib does not seem to provide this .
import matplotlib.pyplot as plt
plt.title ( ' Adidas-Aktie 2012 ')
plt.show()
The code I am using is import matplotlib.pyplot as plt
` csv.reader() ` returns strings ( technically , ` .next() ` method of reader object returns lists of strings ) .
Without converting them to ` float ` or ` int ` , you won't be able to ` plt.plot() ` them .
The documentation mentions " Additional keyword args to step() are the same as those for plot() .
The return handle of ` plt.scatter ` has several methods , including ` remove() ` .
You might also do better with ` a = np.linspace ( 0 , 0.8 , 6 , endpoint=True )`
modify discrete LinearSegmentedColormap
[ This note says do not import ` pyplot ` when embedding ] ( #URL )
What does ` matplotlib.get_backend() ` return ?
` plt.ion() ` is okay for interactive sessions , but is n ot recommended for scripts .
show() helped .
Fair warning , ` np.polynomial.polynomial.polyfit ` returns coefficients ` [ A , B , C ]` to ` A + Bx + Cx^2 + ...
` from matplotlib.ticker import MultipleLocator ; ax.xaxis.set_major_locator ( MultipleLocator ( 1 )); ax.yaxis.set_major_locator ( MultipleLocator ( 1 ))`
Anyone unfamiliar with the graph types matplotlib / pyplot offers can see a range of them here : #URL
Alternatively , you can make multiple figures in matplotlib using " plt.figure() " .
What happens if you try ` fig1 , ax1 = plt.subplots ( 1 , 1 ); ax1.invert_yaxis() ; ax1.plot ([ 1 , 2 ] , [ 1 , 3 ])` and ` fig2 , ax2 = plt.subplots ( 1 , 1 ); ax2.plot ([ 1 , 2 ] , [ 1 , 3 ]); ax2.invert_yaxis() `
You need to call ` plt.draw() ` after the ` axes.plot ` .
Actually the arguments ` vmin ` and ` vmax ` are needed to make SymLogNorm work .
From ` help ( plt.hist )` : #CODE
You can do this using ` np.cumsum() ` : #CODE
Me neither :) What I figured out so far is that it works when I only do ' plt.plot ([ 1 , 2 ]) plt.savefig ( ' file.png ')' and don't define the fig = plt.figure() and ax = fig.add_axes() .
You likely want to be doing ` ax = fig.add_axes ([ 0 , 0 , 1 , 1 ])` .
Your example could be done with ` plt.plot ([ 1 , 2 ]); plt.savefig ( ' test.png ')` .
As it can be seen , i have tried the plt.xticks ( rotation=45 ) trick .
The ` setp ` is a good addition indeed , i couldnt think of an ` ax .
But if you want to stick to ` matplotlib `' s ` mathtext ` , it can be done as well : #CODE
As posted in the comment , what you are looking for is solved using ` set_label_coords() ` as described here .
However , I ended up using HSV [ ..., 2 ] = np.ones ( intensity.size )
I checked your soloution with the np.array , but the graph will turn out a bit strange ...
E.g : ` ax0 = fig.add_subplot ( gs [ 0 , 0 ]); ax0.scatter ( x , y , s=20 )`
* ( )` calls boil down to ` gca() .
But is not there ( or wrongly defined to be ` None `) so ` rcParams [ ' datapath ']` returns ` None ` .
There is also ` plt.table ` #URL
Simply putting in : ` bbox =d ict ( facecolor= ' blue ' , alpha= 0.5 )` in the ax.text statement changes the color .
` print matplotlib.get_backend() `
Calling ` ax.grid ( False )` should suffice .
fig , ax = plt.subplots ( figsize =( 5 , 5 ))
Matplotlib PDF output does not respect zorder when using imshow
Is there a way to make this work with ` imshow ` ?
You can pass a tuple of arrays specifying the bin edges in x and y to ` np.histogram2d() ` : #CODE
you can do this by explicitly specifying the bin edges for ` np.histogram2d() ` . see my edit .
as you need to call ` set_clim ` on a ` ScalarMappable ` object ( doc ) .
` imshow ( np.transpose ( wcounts ) , extent=extent , alpha= 0.5 , cmap= cm.summer , vmin= .95 , vmax=1 )` Please read the documentation #URL
You created it when calling ` fig , ax = plt.subplots() ` .
` ax ` has methods which can be ` called ` by ` ax.plot() ` or ` ax.set_xlims() ` .
Perhaps ` ConnectionPatch ` will work ...
However , the result says `' QuiverKey ' object is not subscriptable ` .
` df.plot() `
You may see that how ` .ix ` was used for selecting an interval .
Now I can successfully import matplotlib , but it seems there's no inheritance in the import , i.e. it imports matplotlib but won't recognise matplotlib.pyplot , for example .
Also look into ` LineCollection `
Regarding the comment , I quote from the ` numpy.histogram() ` documentation :
See ` colorbar.ColorBar.add_lines ` .
We are looking for some ` .line ` objects and there are two .
Ah , try ` get_children() ` instead of ` get_childern() ` and see if that helps .
I have condensed it to this command : ` CB.ax.get_children() [ 4 ] .set_linewidths ( 5.0 )` .
Or `" myfile{0}_{1} .png " .format ( *songs )`
inside plt.savefig() ?
Unfortunately , the ` Line2D ` objects are embedded in data_axes objects .
If I'm a guy who is familiar with matplotlib , I know what to expect out of a ` Line2D ` object .
If you want to drag the lasso on your own , this cookbook example might prove useful :
Right now I'm trying to do this with polyfit .
@USER ` regres = polyfit ( table1 [ ' log2 fold change misson '] , table1 [ ' log2 fold change '] , 1 )`
what is the type of table1 [ ' log2 fold change misson '] and table1 [ ' log2 fold change '] ?
Notice that my call to ` fig.canvas.draw() ` is not ignored by matplotlib , but only postponed to when ` onpick() ` returns .
See my answer [ here ] ( #URL ): you can change the number by using ` axes.legend ( scatterpoints=1 )` instead .
Note : I'm aware of * fill_between() * and * fill_betweenx() * .
` plt.plot ( x , y , linewidth= 6.0 )`
Maybe visually more appealing ( using the spanselector ):
I've added a SpanSelector version to my answer .
And ` matplotlib.get_backend() ` shows that I have the `' #URL backend .
Anyway , your code ( with %matplotlib inline and plt.show() ) works as expected on windows
This is what I tried : ` plt.text ( x_axis_labels , y_axis_labels , plotter , fontsize=10 )`
` plt.savefig ( ' watt ' + ' .png ' , bbox_inches= ' tight ' , pad_inches= 0.5 , dpi=100 )`
` stackplot ` might also make this easier .
@USER indeed , but for some reason I like the flexibility behind ` fill_between ` -- I feel better with fewer layers of packaging in utility functions ;-)
In the example snippet , ` CS ` is only used for ` clabel() ` .
` plt.autoscale ( tight=True )` ,
pyplot.suptitle() works OK
Do you have a ` plt.title = ' blah '` someplace in your code above this ?
plt.title told me that plt.title was a string .
The code was fine , but in the interpreter , I had previoulsy used incorrect xlabel() calls .
Even simpler , ` matplotlib.patches.Rectangle ` #CODE
matplotlib graphs doesn't appear without show() method
Try adding ` pyplot.ion() ` just after importing ` pyplot ` and you should be able to avoid the ` show() ` ...
But I'm not sure how to do that with plt.hist() and plt.plot() .
If I uncomment the ` ion() ` and ` plt.draw() ` it just draws a single frame and then hangs .
Cutting of unused frequencies in specgram matplotlib
* np.log10 ( Pxx ) to spectrum ?
This is pretty easy using ConnectionPatch in 2D .
customising line styles in Python using vlines
I pass unicode code-points ( u'hello ') to pyplot and it shows the characters as squares .
How can I change the linestyle of the line drawn by the ConnectionPatch ?
The ConnectionPatch code I was using is : #CODE
Both the arrowstyle and connectionstyle don't accept the above mentioned styles .
I am using the mplot3d example which uses PolyCollection for stacking XY-plots , #URL
` PolyCollection ( ... closed=False )` does the trick .
This works , but you can also do ` PolyCollection ( ... closed=False )` as @USER comment above .
mangacm = ListedColormap ( ctmp , name= ' manga ' , N=None )
The trick is that ` ax.plot ` in 3D has extra arguments : #CODE
Basically , anything in ` matplotlib.pyplot ` is auto-generated .
How about reading [ Pyplot tutorial ] ( #URL ) , hmmm ?
What happens when you run something similar to ` python -c ' import matplotlib.pyplot as plt ; plt.figure() ; plt.show() '` from the terminal ?
` ax = fig.add_axes ([ 0 , 0 , 1 , 1 ])` .
See ` matplotlib.pyplot.legend ` documentation
y = arange ( 100 )
y = arange ( 100 , 0 , -1 )
That is : ` matplotlib.use ( ' GTK ')` would exhibit the behavior , while ` matplotlib.use ( ' TkAgg ')` would not .
I would like to know is there a way I can do this using just one fig.text() command ?
if ` txt ` is an Text-object as returned by ` plt.text ` .
` plt.figure() ` will make a new window .
CB.ax.get_children() [ 4 ] .set_linewidths ( 1.5 )
It seems like calling the ` savefig() ` method directly on the ` AxesSubplot ` object ( like right on it , and not even on the variable assigned to it ) is the only way it can work for me .
The gcf method is depricated in V 0.14 , The below code works for me : #CODE
299 #cycles_series .show()
As mentionned in v0.14 the .gcf() method does not works
In the non-toy code I encountered this in , the solution of ` x = Foo() ` didn't work , presumably because in that case ` show() ` was elsewhere so ` x ` had gone out of scope .
destination object needs to die , the CallbackRegistry won't keep
A possible hack is by replacing ` plt.tight_layout() ` with #CODE
You can turn them off using ` ax.tick_params() ` : #CODE
If I understand you right , one way of doing it is by using ` plt.tick_params ( length=0 )` .
a = np.arange ( 10 )
from matplotlib import pyplot
pyplot.plot ([ 1 , 2 , 3 , 4 ] , [ 1 , 4 , 9 , 16 ])
pyplot.show()
You can do this with ` pcolormesh ` which takes the corners of quadrilaterals as the arguements #CODE
I guess , maybe 2d interpolation by using ` griddata ` will be what you want ?
If your domain is not convex , you will need to provide your own triangles to the triangulation , as default Delaunay triangulation meshes the convex hull from your points .
or ` fig , ax = plt.subplots ( 1 , 1 , tight_layout=True )` ( assuming your version of mpl is new enough )
or ` plt.figure ( tight_layout=True )`
What is the best way to compute ` C ` for ` matplotlib.pyplot.quiver ` , taking into account both magnitude and direction ?
a = asarray ( a );
b = asarray ( b );
return map_coordinates ( I , ( a [: , newaxis ] * linspace ( 1 , 0 , dst ) +
b [: , newaxis ] * linspace ( 0 , 1 , dst )) ,
@USER , Try ` ax.scatter ( datingDataMat [: , 1 ] , datingDataMat [: , 2 ])` .
like 15.0 *array ( datingLabels ) .astype ( float ) #CODE
It sounds like you basically just want ` plt.hist2d ` .
` plt.hist2d ( x [ y ! = 0 ] , y [ y ! = 0 ] , ... )` .
` plt.scatter ( x , y , marker=m )`
` plt.scatter ( x , y , marker=m ])`
updating matplotlib imshow from within a Tkinter gui
do not import ` pyplot ` if you are embedding .
@USER That makes sense , but if I'm not using ` pylot ` , how can I access ` imshow() ` ?
You should not import ` pyplot ` while embedding .
What i have is the below , but what I would love to do is to facet by one of the categorical variables as with ` facet_wrap ` in ` ggplot ` .
python -c " import numpy ;p rint numpy.version ;p rint numpy.file " ;
I just found a quick work-around : simply specify the ' ax ' argument in plt.text to be the original #URL ( im , cax=cax , ax=ax )
Try `` ax.text ( 0 , 0 , ' whatever ')`` .
By the quick work-around I just posted in my own comment , the call plt.colorbar ( im , cax=cax , ax=ax ) actually reverts gca() to ax .
I am using subplots_adjust , see below .
also , if you are embedding don't import ` pyplot ` ( but thank you for a non-embedded example of the problem )
I only included the Pyplot for a minimal example
Have you considered using ` plt.imshow ` ?
Now , how do I make the ticks reproduce this neworder , preferably using additionally ` MaxNLocator ` ?
Using the ` neworder ` to define positions and using it for the labels , I added ` plt.xticks ( neworder , neworder )` as tick-modifier .
The plt.xticks command is what you need .
plt.xticks ( labelPositions , newLabels )
Edit : Note that these commands must be issued after ` matshow ` .
Perhaps it's related to this line from the plt.matshow documentation :
The same thing can be accomplished using those tools , again after issuing ` matshow ` : #CODE
So to '` get_ticklocs `' and to reassign the labels is the trick .
In the notebook , I do have a method from the matplotlib package ( subplot2grid ) but in Wing , I do not have this method .
I know there are quite some questions on matplotlib and threading , also that pyplot is not threadsave .
Getting xkcd plots using matplotlib
I don't think the ` plt.xkcd ` works with the OSX backend .
Correct but since they are using ` loadtxt ` and 2D indexing I'm sure the variables already are numpy arrays .
It is tagged ` matplotlib ` so it's surely numpy loadtxt in question .
A minimal working example * of your problem and some more options for ` plt.colorbar ` that achieve what you are looking for : #CODE
I've tried a few variations with both ` gca() ` and ` gcf() ` without success .
Which gives me ` df.head() ` : #CODE
I suppose ` plt ` is ` matplotlib.pyplot ` .
BTW , I do remember changing successfully the zorder in ticklines when using ` imshow `
From the documentation for the ` matplotlib.artist.Artist ` class :
set_zorder ( level )
The ` matshow ` docs indicate that the options are mostly just passed to ` imshow ` ( docs ) .
Using python and mayavi to create a 3D streamplot
It is currently quite easy to produce a 2D streamplot with python and matplotlib because streamplot was recently incorporated to matplotlib by Tom Flannaghan and Tony Yu .
matplotlib streamplot co-author Tom Flannaghan's blog post on the topic
May be libpng and freetype are not installed That's why ` plt.savefig ( ' hist.png ')` can't be opened
matplotlib xkcd not working
** Edit** : `` xkcd() `` has been added in version 1.3.1 .
The ` xkcd ` module was added in matplotlib 1.3.1 .
` imshow ` has a ` origin ` keyword for this , see : #CODE
But i personally prefer setting the origin with imshow if that's sufficient .
I think if you change pyplot.savefig by fig.savefig it will work ...
If I adjust the rcParams can I just do this in each own .py file or do I need to specify a complete rcParams config file on its own ?
tight_layout might be able to help you out .
It works fine , after adding ` plt.cla() ` before candlestick ( ... ) and after putting ` plt.show() ` instead of ` anim.save ( ... )`
I have a an ` AxesImage ` object in Python from pylab .
Please see #URL This is what pyplot is doing underneath for you anyway .
xi , yi = np.mgrid [ 1:15 : 1 , 1:15 : 1 ]
How can I delet an axvspan line ?
This is the code that I'm using to create the axvspan line ( s ) #CODE
I'm trying to produce yaxis as HH : MM .
Pyplot is imported as plt .
Please try xticks() , I think this is what you need .
As I understood it , ` solve() ` should return a value , so I'm clearly doing something wrong here that I'm just totally not seeing .
Python -- sympy solve() returning another equation instead of value
If you want the numeric results , you need call ` subs() ` and ` evalf() ` : #CODE
Matplotlib : What's the meaning of the 3-digit parameter given to Figure.add_subplot() ?
The documentation on ` add_subplot() ` doesn't mention anything about this 3-digit parameter , other than showing it in an example ( without much explanation ) .
I was reading the documentation for matplotlib.axes.Axes.set_ylabel and it doesn't appear , from my understanding anyway , that such a multicolour capacity exist within these parameters .
r , g , b = np.rollaxis ( img , -1 )
` is equivalent to ` r = np.rollaxis ( img , -1 ) [ 0 ]; g = np.rollaxis ( img , -1 ) [ 1 ]` and so on .
I think it might be due to the fact that the surface doesn't fit the meshgrid and so the fourth corner is here a Nan .
triang = tri.Triangulation ( x , y )
Oh I noticed just now that ` refine_field ` uses cubic interpolation by default .
If this should rather be linear interpolation , pass a ` tri.LinearTriInterpolator ` object .
How do you define the tri.LinearTriInterpolator object ?
Working on a triangulation is definitely the right idea .
I also tried to implement this using FuncAnimation , but when using that with Blit=True , the script runs much slower .
show()
z = np.take ( y , i0 ) + ( xn-np.take ( b , i0 )) *dy / db ` warnings came from after I took out that line ?
set_ticklabels ([ ]) instead of set_ticks ([ ])
There's more information under FancyBboxPatch here .
You can rotate ticks using setp .
Possibly the invert_xaxis call is what you are looking for .
Joe's answer seems more fitted since the original question was about adding legends to a LineCollection , so I'll mark that one as accepted .
Also , how could I call autofmt_xdate() in this code so that my x-axis is nicely formatted ?
Also , set_ylim() doesn't really do what I want .
I have used ax.format_coord ( x , y ) to obtain the z value .
Looks like you need histogram() of months .
@USER : Those links explain why the two ways exist , but they don't really explain what the logic is behind which OO methods are exposed in pyplot and which aren't .
I tried ax.draw , ax.show() , plt.show() and fig =p lt.figure() , fig.add_axes ( ax ) , fig.add_subplot ( ax ) , and then doing fig.draw ... none of those work .
` plt.draw() ` should do it .
It seems to be a problem with the get_converter() method of matplotlib.units and arrays with quantities .
You might want to sub-class ` matplotlib.colors.Normalize ` as well .
I substituted ax.scatter for ax.plot so I could control the color of each point individually .
Pandas .plot() call freezing GUI
I have tried both , FunctionAnimation() ArtistAnimation() .
I've tried using ` tight_layout ` , but to no avail .
Yes , the return of ` np.linalg.eig ` has eigenvectors as columns , so after transposition they are in rows .
Unfortunately , ` ax.grid ` is a bit confusing in this regard .
What you need to do is call ` plt.minorticks_on ` or ` ax.minorticks_on ` in addition to calling ` ax.grid ( True , which= ' both ')` .
` raw_adc_ax.yaxis.set_minor_formatter ( FormatStrFormatter ( " %3d "))
This seems to be pandas related , because if you do ` ax.plot ( Df.index.values , DF [[ ' C ' , ' D ']] , ... )` it works ..
I tried ` ax.plot ( Df.index.values , Df [[ ' C ' , ' D ']] , linestyle= ' -- ' , marker= ' o ')` , but it is [ still not working for me ] ( #URL ) .
Superfluous white when using matplotlib pcolor
` fig.tight_layout `
See ` matplotlib.pyplot.scatter ` .
Do you want something like ` axhline ( linewidth=5 , color= ' black ')` ?
And ` df [[ ' sales_gr ' , ' net_pft_gr ']] .plot ( kind= ' line ' , use_index=True )` create line chart :
You can suppress this behavior by setting ` squeeze=False ` in the ` .subplots() ` command .
in my class i redefined enterEvent such that everytime the mouse enters the window it updates the xaxis .
A nice approach to this would be to create your own magic , like ` %imnoshow ` or something , that wraps just the part that invokes ` imshow ` , so that you do in-line handling of ` imshow ` output without having to see the output .
' PolyCollection ' object is not callable
How to ' turn off ' blurry effect of imshow() in matplotlib ?
` im = plt.imshow ( ..., interpolation= ' none ')`
[ matplotlib.image ]`
If so , just pass ` cumulative=True ` to ` plt.hist ` .
----> 1 ax.draw_artist ( line )
in draw_artist ( self , a ) 2096 """ 2097 assert
-> 2098 a.draw ( self._cachedRenderer ) 2099 2100 def redraw_in_frame ( self ):
525 renderer.open_group ( ' line2d ' , self.get_gid() )
in new_gc ( self )
96 def new_gc ( self ):
The ` matplotlib.cm ` module is also useful , for example for registering your own color maps .
I have defined matplotlib earlier using import " matplotlib.pyplot as plt " and " from matplotlib import * " is there something wrong with that ?
But since you have ` from matplotlib import * ` already , you just need ` lines.Line2D ` instead of ` matplotlib.lines.Line2D `
Previously I was setting the backend via ` matplotlib.rcParams [ ' backend '] = ' TkAgg '` right after launching Spyder .
The maddening part is when I queried ` matplotlib.get_backend ` it returned ` TkAgg ` !
` errorbar ` ?
Is it possible with Pyplot ?
in the _on_click method after the call to draw() , and
in the on_motion method just after the for .
` plt.legend (( p3 [ 0 ] , p2 [ 0 ] , p1 [ 0 ] , p7 , p6 [ 0 ] , p5 [ 0 ] , p4 [ 0 ]) ,
I have tried ` plt.colorbar() ` .
Apparently the automatic triangulation doesn't produce the right triangles for you , but you can specify how you want your triangles manually : #CODE
It works but was frustrated that your solution wasn't worked due to the initial triangulation .
Have you tried ` plt.tight_layout() ` ?
with ` plt.tight_layout() `
The gridspec solution worked .
Also look into ` LineCollection ` #URL
But it kept working , even without the multiprocessing , even with pyplot , etc .
I did yes ( including pyplot.close() ) .
I'm now trying the solution proposed with Canvas to bypass pyplot ...
But it kept working , even without the multiprocessing , even with pyplot , etc .
Thanks for ` imshow ` but ` pcolormesh ` is more what I was looking for : #URL
` pcolor ` and ` pcolormesh ` are very similar , but with performance differences .
thanks @USER Kassies and @USER Zwicker , you're right , it's better with ` imshow ` .
@USER - ` pcolormesh ` is explicitly for regular meshes .
It's ` pcolor ` that's very inefficient for a regular mesh .
The OP likely really does want ` pcolormesh ` , particularly if they want vector output .
That's the whole point of ` pcolormesh ` .
It's a faster version of ` pcolor ` for rectilinear grids .
` pcolor ` handles arbitrary shapes , as well .
@USER - Actually , nevermind , I thought ` pcolor ` handled non-rectilinear meshes , while ` pcolormesh ` didn't .
Now I'm a bit confused as to what ` pcolor ` can do that ` pcolormesh ` can't ...
Just FYI : There's nothing wrong with using ` pcolormesh ` in this case .
` pcolor ` is for irregular grids , and ` pcolormesh ` is an efficient version of ` pcolor ` for regular grids .
Also there's nothing wrong with using ` imshow ` for this either .
It's probably because the ` MultiCursor ` object uses blitting and you're using it as well .
( If so , just subclass ` MultiCursor ` . )
What I really want is the multicursor and drawing the rectangles as I showed earler in this other post #URL
One workaround I was thinking would be to disable the MultiCursor somehow on the click event , i.e. when I begin to drag my rectangles .
Then redefined the onmove() with the same check on that boolean .. but the cursors were always there ...
Having some issues using the SymLogNorm section in mpl_toolkits.basemap .
also , don't import ` pyplot ` if you are embedding ( I can't tell if you are ) .
@USER - Ether call ` plt.colorbar() ` , or if you'd prefer to be more explicit , do ` cax = ax.scatter ( ... )` and then ` fig.colorbar ( cax )` .
I've used ` fig.savefig() ` before when I'm just running scripts .
` imshow ` ?
So what I want is to have my pyplot ticks in scientific notation .
Yes this is what I want , but I don't know how to do that with ScalarFormatter rather than LogFormatter
The scientific notation is created using the LogFormatter , so I don't see your point .
You can call both scatter() and plot() before calling show() .
Or just call plot() with the line and point attributes as Steve Barnes described .
I only found that by googling for ' matplotlib get_xdata ' , not with the standard search of SO .
Many artists have ` get_data ` and ` set_data ` methods ( e.g. you can do ` x , y = line.get_data() `) .
I believe that you are looking for more control than perhaps ` set_useLocale() ` can offer .
One minor comment : to be consistent with the [ example cited in the original question ] ( #URL ) , it should be ` animation.FFMpegWriter() ` instead of ` animator.FFMpegWriter() `
Whats shown in red is the default ` twinx() ` behavior .
don't mix embedding with ` pyplot `
This can be done using the ` aspect ` keyword of ` imshow ` : #CODE
Numpy also has meshgrid and shortcut mgrid for slices and ranges for this purposes
Although it still does not appears to be very closely Weibull distributed .
What happens with ` import matplotlib.pyplot as plt ` ; ` plt.hist ( h )` ?
Then you can display it with ` pcolormesh ` .
Otherwise , you'll bin it and then display it with ` imshow ` ( or ` pcolormesh ` , if you want ) .
I finally got a fairly good result using hist2d , simply using the xdata , ydata and colordata arrays .
Is there an easy way to do this with pyplot or basemap ?
The imshow ( with interpolate= " nearest ") fills whole mesh rectangular areas .
rcParams [ ' text.usetex '] = True
: class : ` ~ matplotlib.axes.Axes ` instance backgroundcolor :
(: class : ` ~ matplotlib.path.Path ` ,
fontproperties or font_properties : a
: class : ` matplotlib.font_manager.FontProperties ` instance
I browsed the code of FontManager from Networkx , and I see only " sans-serif " .
PyPlot 1.1.0
Try calling ` plt.xlim() ` with the number of bins , e.g. #CODE
No ` plt.xlim() ` output :
Have you tried this #URL and using ` plt.text ` as done here #URL
How to compare Numpy.random ' s probability distribution functions
The ` xdata ` that you're passing in gets converted using ` matplotlib.dates.date2num ` .
I think genfromtxt is taking its intial formatting from that .
You might also want to look into [ ` numpy.vectorize `] ( #URL ) .
The documentation for RectBivariateSpline describes the ` __call__ ` method in terms of x and y :
The simplest way to do this is by calling ` plt.draw() ` just before the line #CODE
I would look into using ` PathCollection ` ( or what it uses underneath ) directly .
Something like this ( sorry for the long code , most of it is copied from the stardard ` axes.Axes.draw `) : #CODE
@USER ' s suggestion to override the ` Axes.draw ` method is definitely the most flexible way to approach this .
Chunking will give a significant speedup , but this method is always going to be slower than drawing a single ` PathCollection ` .
Problems with Pyplot
Trouble using np.genfromtxt in python method
File " C :\ WinPython\ python-2.7.5.amd64 \lib\ site-packages \numpy\lib\ npyio.py " , line 1356 , in genfromtxt
have you tried ` plt.errorbar ` ?
what does ' -b ' in ' line = pyplot.plot ( X , Y , " -b ") represent ?
are you looking for ` set_xlim ` ?
It looks like set_xlim is what I was looking for .
The user mouse input section changes the ` set_data() ` for several ` x , y ` coordinates .
` TypeError : unsupported operand type ( s ) for ** or pow() : ' NoneType ' and ' int '`
I have tried ` cla() ` and ` clf() ` and they don't appear to work in this case .
` ln , = ax.plot ( ... )` and then ` ln.remove() ; del ln ` should work just fine .
Also , it seems like the ` set_xdata() ` type solution is better .
The weird thing is using pcolormesh ( X , Y , Z ,... ) does the job so I was wondering if something similar existed with imshow .
I created the bins ` bins = np.linspace ( 0 , 0.009 , 10 ) .tolist() + np.linspace ( 0.01 , 0.09 , 10 ) .tolist() + np.linspace ( 0.1 , 1 , 2 ) .tolist() ` .
( I don't understand ` ax.set_xticklabels ` by the way . What is ` ax ` ? )
unexpected oscillations when using pandas plot()
Type ` help ( ax.annotate )` .
It can also be used through the helper class ` UniformTriRefiner ` :
I would prefer to not have to call ` plt.draw() ` until the end of the script .
If arrowstyle is specified then a FancyArrowPatch instance is created .
Do I need a gridspec ?
A ` matplotlib ` solution based on ` subplot2grid ` #CODE
You're right that the PathCollection has nothing to do with it then .
The pyplot documentation says for ` pl.axis ( ' tight ')` :
There are ` stackplot ` examples in the gallery : #URL
@USER - No , it's just that you fundementally can't do what you're wanting with ` stackplot ` .
AttributeError : ' module ' object has no attribute ' set_xticks '
plt.subplots :
And you could eschew setting the ` color ` parameter for each call to ` ax.plot ` by using ax.set_color_cycle : #CODE
For loop the ticklabels , and call ` set_visible() ` : #CODE
Just as an alternate way of doing the exact same thing : You can do ` plt.setp ( cbar.ax.get_xticklabels() [: : 2 ] , visible=False )` .
I can do the polyfit and basic graph .
return np.polyval ( fit , x ) #CODE
fill_between ( xfit , sdev_area_mn ( xfit ) , sdev_area_mx ( xfit ) , alpha= 0.25 , color= ' r ')
However remember " a " is a numpy.ndarray , so it doenot support those options ...
Thanks Py-ser for noting that the result from ` plt.subplots ` is a tuple and usually is a 2d-array .
Mtaplotlib AttributeError : ' module ' object has no attribute ' pyplot '
I read somewhere that this method is not very compatible with the original twinx() so that may be complicating things .
@USER : It's probably because I'm using an old matplotlib version , but that manual ` setp ` command does the trick , thanks !
` ax.grid ( which= ' major ' , axis= ' both ' , linestyle= ' - ' , color= ' r ')` would change them to red
So how can I do this with pcolor or pcolormesh ?
( #URL ) import matplotlib.pyplot as plt
z = ( 1 - x / 2 . + x ** 5 + y ** 3 ) * np.exp ( -x ** 2 - y ** 2 )
z_min , z_max = - np.abs ( z ) .max() , np.abs ( z ) .max()
plt.subplot ( 2 , 2 , 1 )
plt.pcolor ( x , y , z , cmap= ' RdBu ' , vmin=z_min , vmax=z_max )
plt.title ( ' pcolor ')
plt.axis ([ x.min() , x.max() , y.min() , y.max() ])
plt.colorbar()
plt.show()
` pyplot ` is a module not an object .
There is nothing special about Cartopy and pyplot - everything will work with matplotlib's OO interface too .
Something like this should work : ` ax.barh ( ds3.index , ds3 , ...
If so this looks like a bug to me , if you are running this as a script , I am not surprised there is something funny with eventloops getting started / not started in pyplot when running in a script .
Connecting two Sankey diagrams in matplotlib
Your problem is that you're putting two ` .add() ` calls .
3D-Stacked 2D histograms in matplotlib pyplot
But ` scatter() ` requires 2 arguments .
That works for me ... can you include ` dataframe.head() ` and ` dataframe.describe() ` in your question ?
Although the pyplot docs indicate it should be included .
Sorry , the pyplot docs were misleading .
Matplotlib polycollection in mplot3d
Matplotlib triangulation stops working on switching coordinates
i guess you did not notice the xtick labels in my solution to your other question
don't do ` plt.xticks ...
Using ` np.array ` also doesn't seem to work .
I do have plt.show() .
For me , I believe that was pyplot : ` from matplotlib import pyplot as plt `
Probably the easiest way to do this is with ` Figure.text ` #CODE
I tried suptitle but it does not work .
What about plt.title ?
Note also , that you don't need the ` plt.draw ` , since this will be called by ` plt.savefig ` .
that is basically output of ` __repr__ ` , see [ this ] ( #URL ) and [ this ] ( #URL )
@USER Try calling ` plt.show() ` , does that work ?
As shown in the matplotlib example for plt.scatter() : #CODE
Unexpected Interpolation when using LinearSegmentedColormap
I am hoping that matplotlib's LinearSegmentedColormap can provide such functionality .
This is happening because the default interpolation of ` imshow ` is bilinear .
" import matplotlib.pyplot as plt " in ipython notebook
I'm creating plots with matplotlib.pyplot and writing them to pdf .
As always , I'm amazed by the richness of Pandas's features , as I discover ` DataFrame.boxplot ` .
I understand this can be done with ` matplotlib.artist.setp ` but there's clearly something I don't understand about how ` pd.DataFrame.boxplot() ` works .
I've tried ` matplotlib.ticker.MaxNLocator ( symmetric=True )` but it doesn't seem to work .
@USER not sure , try with ` df.iloc [ i , j ]`
AttributeError : ' numpy.ndarray ' object has no attribute ' get_matrix '
Hard to say ... this works for me : ` a = np.random.rand ( 60000 )`
` a [ np.random.randint ( 0,600 00 , 25 )] = 25 ` ` plt.plot ( a )`
According to this page , ` tight_layout ` works only on position and padding of the graphs , and not on the ticks range and number .
In short , ` cbar = fig.colorbar ( heatmap )`
" Object has no attribute ' set_label '" .
The code below computes two histograms on the same datasource .
` plt.bar ( left , height , width= 0.8 , bottom=None , hold=None , ** kwargs )`
+1 i didn't know that DataFrame.plot that flexible , thanks
I believe that's because the slices aren't governed by line objects but by wedge objects .
What if you do ` np.genfromtxt ( ' gages.txt ' , usecols =[ 0 ] , skip_header=1 , dtype= ' i8 ')` ?
Finally everything will be updated by ` .draw() ` .
then stepping into the subroutine ` pyplot.sca ( ax )` #CODE
Just cited the ` sca ` func from the ` pyplot ` module .
Am I doing something wrong , or is this a possible bug in Pandas ' plot() ?
``` fig , ax = plt.subplots() ; ax.plot ( df.index , df )```
Are you doing the embedding your self or using ` pyplot ` ?
( Perhaps I need to give them a parent object and it will just work ? ) I am using pyplot.figure to create my figs .
Using pyplot while embedding is a bad idea ( tm ) .
Essentially I want daily candlesticks , generated as a boxplot() .
Tried the recipe , mysteriously set_useOffset ( False ) didn't work for me , but set_scientific ( False ) did :) Thanks a lot ~
@USER , an instance of [ ` matplotlib.pyplot `] ( #URL ) .
` up = pd.read_csv ( filename , delim_whitespace=False , skipinitialspace=True )`
plt.scatter doesn't accept four parameters like that .
plt.subplot ( 2 , 1 , 1 )
` imshow ` with the extent kwarg will do what you want .
` ax.plot ([ .5 ] , [ .5 ] , marker=r ' $\circlearrowleft$ ' , ms=100 )`
It sounds like you're trying to reinvent [ PCA ] ( #URL )
` xkcd ` is a standrad component of ` matplotlib ` since version 1.3 .
You can also do something similar with ` xs , ys = zip ( *sorted ( zip ( desc_x , rmse_desc )))` , but I prefer the numpy way
In this case , the gui mainloop ( i.e. ` plt.show() `) is called as a method of the class instance , and therefore , the class instance can't be garbage collected before ` show() ` ends .
So each one is a label in xaxis .
xaxis label positioning ( 2D )
If you are using 64 bit then try ` plt.ylabel ( " Number of occurrence " , horizontalalignment = ' right ')` instead
+1 for ` plt.hist() ` .
Pyplot pcolormesh confused when alpha not 1
I remember seeing something else that ` pcolormesh ` does not play nicely with alpha , but can not track it down .
As far as I understand , this is obviously a minor bug in pyplot , so there's nothing more to be done here .
For example , using the following input to ` pcolormesh ` : #CODE
Have you tried to call ` plt.show() ` after this line ?
as a strange side point ` r [ 1 :] - r [: -1 ]` is faster than ` np.diff ( r )` .
You should be calling it like ` FuncAnimation ( ..., frames=gen_data ( 3 ) ,... )` .
` matplotlib.ticker.LogFormatterExponent ` doc
For example : ` FuncFormatter ( lambda x , pos : ' { : 0.1f } ' .format ( log10 ( x )))` .
I discovered ` LogFormatterExponent ` while answering this question .
Here is more of the code for the init ( ) method in the FuncAnimation class : #CODE
from matplotlib.animation import TimedAnimation
Pyplot is the matlab emulation layer .
I'm not sure why the ` gcf() ` -first stuff didn't work with ` axes() ` and ` loglog() ` .
No : ` fig.set_size_inches ( fig.get_size_inches() [ 1 ] / fig_ratio , fig.get_size_inches() [ 1 ])` does it .
Example of the selector on / off from the RectangleSelector example : #CODE
check out the [ ` FontProperties `] ( #URL ) class of ` matplotlib.font_manager ` - it has ` get_file() ` and ` get_name() ` methods that may be useful .
what is the output of ` matplotlib.get_backend ( )` ?
in Matplotlib , what does 111 means in fig.add_subplot ( 111 ) ?
I'm running OSX 10.9.1 and , as noted in the code above , using ` OSXInstalledFonts ` instead of ` findSystemFonts ` produces the same result .
I think ` matplotlib.animation.FuncAnimation ` is what you're looking for .
This should be done by controlling 2 Sliders ( ` matplotlib.widgets.Slider `) .
You may want to specify a ` FontProperties ` instance , but even for that , it's usually easier to specify things through other keyword arguments .
Hexbin result :
Since OP want it as a translucent overlay , I suggest adding one ` imshow() ` line and using the ` alpha ` keyword for ` hexbin ` .
plt is a pyplot object
I saw somewhere , try using zorder = 4 in your pcolormesh command .
no module named numpy.ma
numpy.ma as ma No module named numpy.ma
A pyplot.scatter creates a Patch3DCollection in projection " 3d " .
I had forgotten plt.show() code in the post but actually i was implementing it .
try ` X = np.array ( X ) .T ` instead of ` X = np.array ( X )`
X = np.resize ( X , ( 25 , 1 ))
The tight_layout seems to be incompatible with ` matplotlib.use ( ' pdf ')`
The 0.8 in the ` tight_layout ` has been found by trials and errors .
` l.get_frame() .get_width() ` seems to always return 1.0 .
The ` show() ` command has no such option , so I cannot consider this to be really solved .
what is the output of ` filled.ix [ ' 2011-11-03 ' : ' 2011-11-04 '] .between_time ( ' 09:30 ' , ' 16:00 ')` ?
DatetimeIndex : 391 entries , 2011-11-03 09:30 : 00 to 2011-11-03 16:00 : 00
dtypes : float64 ( 4 )
For this ` pcolor ` is appropriate per my answer .
Your ` pcolor ` solution is great however in which you're assigning coordinates for every cell !
polyfit issues a RankWarning when the least-squares fit is badly conditioned .
Following is the definition of the ` .plot() ` method
Definition : df.plot ( frame=None , x=None , y=None , subplots=False , sharex=True , sharey=False , use_index=True , figsize=None , grid=None , legend=True , rot=None , ax=None , style=None , title=None , xlim=None , ylim=None , logx=False , logy=False , xticks=None , yticks=None , kind= ' line ' , sort_columns=False , fontsize=None , secondary_y=False , ** kwds )
Documentation for ` numpy.linspace ` can be found here .
I looked up how fill_between works , try my edit out .
don't mix object-oriented and pyplot .
` matplotlib.pyplot.table ` gives you already the tool to do what you need :
and then call ` plt.table ` ( although I suggest you to change to ` ax.table `) adding the ` cellColours=cellcolours ` keyword .
Matplotlib Errorbar behaviour with NaNs
( It was added in v1.0 . If you'd prefer , you can do ` fig = plt.figure() ; ax = plt.subplot ( 111 )` . )
File " C :\ Python27\lib\ lib-tk \ Tkinter.py " , line 1410 , in __call__
Using ` numpy.where ` : #CODE
or using ` numpy.nonzero ` : #CODE
IPython , QtConsole , ` matplotlib.pyplot.plot ` , ` qt ` backend .
I am working on my thesis on building a 2D-FEM solver for the poisson equation from " scratch " .
I tried to obtain a triangulation by using ` matplotlib.tri ` .
` refine_triangulation ` has , according to the documentation [ 1 ] , one optional return value ` found_index ` , which should contain the points of the original triangle ( before subdividing ) .
The picture shows the original triangulation ( black ) and the subtriangles ( red ) .
Also note that , in case you need to adapt ` matplotlib.tri.UniformTriRefiner.refine_triangulation ` to your particular case , it is pure python :
` imshow ` is even faster yet , if you don't mind raster output .
i.e. , ` plt.pcolor ( df > 0.5 , cmap= ' RdYlGn ')` . saves some typing , i guess .
How to speed up matplotlib savefig() ?
Python Pyplot proper candlestick timestamp epoch change and scale
I've tried many other things , for example I've called ` ax.imshow ( newdata )` instead or I've tried using ` figure.show() ` after ` set_data() ` .
From the ` savefig() ` docs , #CODE
Switch the ` plt.show() ` and ` plt.savefig ( ... )` line .
Try ` ax.scatter ( X , Y , Z , c= ' r ' , marker= ' o ')` ( instead of ` marker= ' 0 '`) .
Unfortunately , ` triplot ` doesn't .
However , ` triplot ` adds a ` PathPatch ` and a ` Line2D ` .
Okay , good to know that I cannot do much better than plt.subplots() .
and using the pyplot interface : #CODE
` ax.set_ymargin ( 0.1 )` ( accepts float from 0 to 1 )
Hmm , try set_ylim instead
@USER - ` ax.margins ` or ` ax.set_ymargin ` , etc are the standard way to do this in matplotlib .
Pyplot hist() with multiple NaNs causes incorrect binning
Bad automatic Triangulation with Mayavi for coloring a surface known only by its corner
Instead let see the problem as the left triangulation and I want something like the right with two nice triangles ...
Well the triangulation might be better if using X and Z coordinates then ...
When I call ` print p.draw() .get_tight_layout() ` I receive False .
So I think that means that tight_layout is not being used .
The ` tight_layout ` will be triggerd by the display hook of the inline backend , so you probably cannot programtically detect it has been used .
i.e. ` import matplotlib.pyplot as pl ` instead of ` import pylab as pl ` ?
It might also be worth mentioning ` ax.axis ( ' tight ')` , in this case .
Also , in many cases , ` ax.annotate ` is more useful that ` ax.text ` .
Python matplotlib : animate Line2d
Also you were using ` plt.colorbar ` instead of something cleaner like ` fig.colorbar ` .
` xmin , xmax = ax.get_xlim() `
` ymin , ymax = ax.get_ylim() `
The problem comes from this line ` fig , ax = plt.subplots ( figsize =( 8 , 4 ))` .
I think the correct syntax is ` fig , ax = plt.subplots ( figsize= x , y , (8 , 4 ))` .
if you want to be more verbose , you can do ` fig , ax = plt.subplots ( nrows=1 , ncols=1 , figsize =( 8 , 4 ))` .
ax.get_xaxis() .get_label()
plt.show
` plt.plot ( [ output [ i ] [ 0 ] for i in range ( 0,499 9 )])`
` plt.plot ([ i [ 0 ] for i in output ])`
It looks like ` set_xlim ` needs to come after ` set_xticks ` .
Other wise ` set_xticks ` redefines the limits .
Issue importing matplotlib.pyplot
" Out of bounds " -error when using PyPlot and ginput
For this I am using the pyplot package offered by matplotlib with Python2.7 .
I didn't know about LineCollection .
Note that point are generated with linear dependency due to nontrivial covariance paramether for multivariate_normal .
Pandas has this built in to the pd.DataFrame.plot() .
But doesn't ` plt.show() ` block until the window is closed ?
` plt.show() ` can be non-blocking , for example if you are running the code interactively in a shell
plt.figure ( 1 )
plt.subplot ( 211 )
plt.plot ( P1 )
plt.subplot ( 212 )
plt.plot ( P2 )
I removed the ' plt.axis ( ' auto ')'
I removed plt.axis ( ' auto ') and replaced it with plt.ylim , which seems to work .
I tried using .replace to this end , with no success .
` df = df.convert_objects ( convert_numeric=True )`
Pyplot exporting to .eps with alpha < 1
How can I make the show() method to not to change the scale ?
You might also want to read #URL for an explanation of the pyplot vs OO interface .
can you import ` matplotlib.pyplot ` from a python / ipython terminal ?
Streamplot mgrid - Python
The problem is ' cause my np.mgrid should vary from -1 to 1 and have the self.width and self.height .
I am using the ` imshow ` in matplotlib .
` if somecondition = True : nsub = 111 ; else : nsub = 211 ; ax = plt.subplot ( nsub )`
grid_z = griddata (( x , y ) , z , ( grid_x , grid_y ) , method= ' cubic ')
File " C :\ Python33\lib\ site-packages \scipy\interpolate\ ndgriddata.py " , line 210 , in griddata
@USER , thanks for the tip about ` griddata ` .
The obvious differences are that the ` imshow ` y-axis will be inverted ( w.r.t. ` pcolormesh `) and the aspect ratio is maintained , although those characteristics can be altered to look like the ` pcolormesh ` output as well .
In addition to what you mentioned , other major differences are : speed ( ` imshow ` is much more efficient ) , the ability / inability to display the cell edges ( ` pcolor ` / ` pcolormesh ` can , ` imshow ` can't ) , and the centering of the cells ( ` pcolormesh ` aligns the cells on their edges , while ` imshow ` aligns them on their centers . This is controlled by the ` extent ` kwarg or using x & y arguments to ` pcolormesh ` . )
Also , ` pcolormesh ` isn't limited to just rectangular cells .
Try with ` set_xlim ` and ` set_ylim ` like in this example : #CODE
added the answer with some information on datetimeindex as well ; which might be helpful
NB : ` pylab ` is ** not ** the same thing as ` pyplot ` .
line , = ax.plot ( x , y )
` axhspan ( ymin , ymax , xmin=0 , xmax=1 , ** kwargs )`
See [ example 2 ] ( #URL ) from the ` numpy.loadtxt ` documentation .
However , ` pandas.DataFrame ` s are .
Thank you very much , I didn't knew about ylim() , it's really useful !
did you try ` matplotlib.pyplot.imread ` ?
already figured it out but thanks , i used plt.xticks and plt.yticks
I have a problem using pyplot .
Usually ` pyplot ` is a compatibility layer for matlab for convenience , try to learn to do using the Object Oriented way .
For more information ( and a general overview of matplotlib's " mathtext ") , see : #URL
well together with ` pyplot.show ` method .
The problem with ` pyplot.ion ` is that it is not efficient .
But I used ` pyplot.ion ` instead of ` pyplot.show ` .
` Plot_date ( x , y )` looks like that ^^ too .
and using ` plot_date ( x , y , ' bo- ')`
You can keep adding ` plt.plot ` as many times as you like .
Why can't I specify legends by plt.scatter() ?
` scatter() ` works by specifying ` label ` .
Did you try simply ` plt.legend() ` ?
I saw two other functions for fast redrawing : the matplotlib functions ` blit() ` and ` draw_artist() ` .
Note : I called ` blit() ` and ` draw_artist() ` with ` wx.CallAfter() ` !
ax.scatter ( x , y , z , marker= ' s ' , c=areaImg [ x , y , z ] , s=marker_size , zdir= ' z ' ,
Note in practise this needs to be called before ` ax.plot ( ..
` set_xmargin ` and ` set_ymargin ` doesn't seem to do this .
` set_xticks ` is mildly dangerous .
` ax.plot ( x , 1 . / y )` or whatever it needs to be .
` a = np.arange ( 1 , 1e7 ); %timeit 1 .
See matplotlib.pyplot.legend documentation and this related question :
I've tried a few different methods with no success ( ` tight_layout() ` , setting the ` major_pad ` s in ` rcParams ` , etc ... ) .
plt.savefig ( " test.png ")
` plt.savefig ( " test.png " , bbox_inches= ' tight ')`
` plt.tight_layout() ` doesn't do the trick for me ...
For some reason , ` plt.autoscale() ` cuts it off too .
this worked in conjunction with fig.tight_layout() for me , good suggestion .
What exactly is preventing you from importing matplotlib.pyplot independently ?
` axvline ` is for creating x vertical line .
plt.plot ( merged2 [: -1 ] .lastqu , merged2 [: -1 ] .Units , ' bo ')
plt.hold ( True )
x = np.array ([ merged2 [: -1 ] .lastqu .min() , merged2 [: -1 ] .lastqu .max() ])
plt.plot ( x , y , ' r- ')
plt.show()
` error_kw ` takes the same key words as ` errorbar ` .
See the parameters for matplotlib.pyplot.bar #CODE
For example , I've entered ` plt.show() ` in a number of places , but , still nothing .
@USER : Yes , you need to import ` matplotlib ` , but nothing else ( e.g. not ` matplotlib.pyplot `) , and don't do anything before setting the backend .
atplotlib / font_manager .
I thought it might be the multiple plt.show() commands , but I tried commenting those out and only calling it once from outside my functions and I still got 2 windows .
I have been using ` matplotlib.finance ` to pull stock information .
Have you already looked into get_major_locator() / get_major_ticks() / get_majorticklocs() for this ?
These can be done with ` numpy.real ` or ` numpy.imag ` , or ` numpy.abs ` and ` numpy.angle ` .
But for most uses I would recommend the built-in mathtext renderer .
The ` usetex ` setting is particularly useful when you need LaTeX features that aren't present in matplotlib's built-in mathtext .
But it also provides somewhat better typography , and you don't have to worry about parts of mathtext that are nonstandard .
mathtext version #CODE
call the ` legend() ` method from the current ` AxesSubplot ` object , which can be obtained using ` plt.gca() ` , for example .
| xs | ys | zs |
e.g. xs = [ 1 , 2 , 4 , 3 , 5 , 5 , 4 , 3 , 1 , 2 .... ]
I solved this using lexsort .
a= a [ numpy.lexsort (( a [: , 0 ] , a [: , 1 ]))] .
( ` np.all ( np.diff ( lats , axis=0 ) > 0 ))` , similar fro ` lons `)
Could there be some problem with my pyplot installation ?
gcf() .show() also works .
Indeed , ` display.display ( gcf() )` should go ** BEFORE ** ` display.clear_output ( wait=True )`
Removing ` set_smart_bounds ( True )` for ` ax.spines [ ' left ']` works .
` ax.spines [ ' left '] .set_smart_bounds ( True )`
Either with invoking ` plt.show() ` , or without it .
` pyplot.show ( block=True )` will give and ` unknown failure ` , too
The griddata call is also invalid for ` scipy.interpolate.griddata `
Hi thanks for the replies , I think the old scipy griddata takes 5 parameters whereas the newer one takes only 3 ?
@USER , ALTERNATIVE 2 : Passing additional ` init_func=lambda : ( scope.line , )` to the ` FuncAnimation ` also solved the problem .
Frequency of matplotlib.pyplot is not integer ?
I am new in pyplot .
try changing the ` interpolation ` argument , ` OffsetImage ( ..., interpolation= ' gaussian ')` .
I am new to Python and I need to generate a graph using pyplot and matplotlib like the one in the attached picture .
Note that this is not particularly efficient since each segment used an individual call to ` ax.barh ` .
plt.bar ( X , a1 , width= 2.5 , color= " blue ")
so 1 on xaxis will have the respective magnitude of 1 .. and so on ..
numpy.cumsum solved my problems , thanks !
Try using ` numpy.cumsum ` .
Is there a way to control it via rcParams ?
And I assume ` plt ` is ` matplotlib.pyplot ` ?
rcParams [ ' text.latex.preamble '] = ' \usepackage{amsthm} ' , ' \usepackage{amsmath} ' , ' \usepackage{amssymb} ' ,
I've tried using a different backend ( for instance ` matplotlib.use ( ' Qt4Agg ')`) , but without success .
plot() doesn't work on IPython notebook
Could you try this command ``` import matplotlib.font_manager ```
In set_xticks . learning to effectively debug is the most important skill when learning to program .
I tried : ` axes.get_xaxis() .set_visible ( False )` and ` axes.get_xaxis() .set_ticks ([ ])`
Try with ` Axes.hitlist ` : #CODE
In this case , you'll still need to supply y-labels manually ( e.g. , via ` plt.ylabel ` as shown in the other answers ) .
Animating a Quadmesh from pcolormesh with matplotlib
Try ` plt.axvline ( x= 0.5 , ymin=0 , ymax=60000 , color= ' r ')` .
Did you try ` plt.axis ( " tight ")` ?
avoid using ` pyplot ` unless you really are using it interactively .
It looks like you are embedding , the event loop of ` pyplot ` can conflict with the event loop of the your gui .
You can do this with rcparams with out the need to mess with environmental variables .
import matplotlib.pyplot as plt
plt.plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] , [ 5 , 6 , 7 , 8 , 9 , 10 , 11 ])
print plt.plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] , [ 5 , 6 , 7 , 8 , 9 , 10 , 11 ])
You've already created ` ax ` with ` plt.subplots ` so don't you just need to pass ` ax=ax ` to ` merged2.fcast.plot ` instead of setting ` ax= ...
You've already created ` ax ` with ` plt.subplots ` so you just need to pass ` ax=ax ` to ` merged2.fcast.plot ` pandas call instead of setting ` ax= ...
still very early learning MPL / pyplot
I want to do a one-liner that just calls ` plt.plot() ` incorrect .
Heatmap with matplotlib using matshow
A comment in this answer states that the correct syntax is actually ` plt.close ( fig )` but the highest voted answer given here says that ` plt.clf() ` is enough and doesn't mention ` .close ` .
Do I need both ` .clf ` and ` .close ` or is one of them enough ?
Note that ` imshow ` returns a handle for you .
What does the ` set_data ` call do ?
` fig.subplots_adjust ( left =) ` is not a solution .
If I understand you correctly , you are looking for the ` labelpad ` parameter in the [ ` ax.set_ylabel() `] ( #URL ) method .
Are you calling ` fig.tight_layout() ?
How about ` df.groupby ( " class ") .feature .hist() ` ?
To see overlapping distributions you'll probably need to pass ` alpha= 0.4 ` to ` hist() ` .
This is the reason that ` tight_layout ` needs two passes .
text.get_window_extent() is the way to go .
pcolormesh ( ) and contourf() do not work
Unfortunately , that particular page doesn't proceed beyond generating plots with ` pyplot.figure() ` , so I am still trying to discover what the required steps are .
I was having trouble finding a resource that spelled out the structure clearly without referencing Pyplot .
I used pyplot instead of pylab , as I mentionned in my question ...
I found my solution using plt.xlim()
plt.plot ( Big_List_X )
plt.plot ( list_Y_to_X_index , Big_List_Y )
plt.xlim ( some_lower_bound , some_upper_bound )
Scipy Griddata Output Dimensions
Do I not understand how griddata works ?
It seems ravel() was the answer , and you graphic helped me realize I wanted a linear interpolation ( which now works with the ravel ) and not a nearest interpolation !
programming with matplotlib : plot() and draw()
it is using ` pyplot ` , and ` add_subplot ` with a quite straightforward syntax .
Then you can ` s.unstack() .plot() `
I'd suggest using ` ax = fig.gca ( projection= ' 3d ')` instead of ` ax = fig.add_subplot ( 111 , projection= ' 3d ')` .
It looks like MaxNoe is right in the sense that the problem is in the ` ax.cla() ` or ` plt.cla() ` call .
This is but a workaround , as it does not resolve the issue with ` ax.cla() ` pointed out by MaxNoe .
matplotlib plt.show() crashes in mac
ipython crashes with plt.show() and outputs :
code used : plt.plot ( da , stats.norm.pdf ( da , * stats.norm.fit ( datas1 , scale=02 , loc=0 ))) plt.hist ( datas 1,100 0 , color= ' b ' , ec= ' b ' , fc= ' b ')
1258 lines.append ( np.column_stack (( xp , yp )))
Problems with pylab errorbar and pandas
plt.savefig ( " Xrayplot.png ")
return fig.savefig ( *args , ** kwargs )
File " C :\ Users\Sam\AppData\Local\Enthought\Canopy\User\lib\ site-packages \matplotlib\ text.py " , line 753 , in get_window_extent
It should work if you also change the ax.quiver line ( see above )
calls ` show() ` multiple times .
is it possible to rotate matplotlib.axes.Axes as it is for matplotlib.text.Text #CODE
I have tried various ways using df.groupby , but not successfully .
May be text() does not recognize labels .
@USER , then what's ' scrambled ' when inverting the yaxis ?
How to sharex when using subplot2grid
import matplotlib.pyplot as plt
In other words : ax1.fill_between ( x , 0 , y_stack [ 0 , :] , facecolor = random.choice ([ ' g ' , ' r ' , ' c ' , ' m ' , ' y ' , ' k ']) , linewidth = 0.0 )
I've reviewed the standard matplotlib and pyplot documentation , as well as a number of tutorials found via google , but I'm not seeing something similar .
Seems that the method I was using has been replaced by the ` bin_boundaries ` method .
` tick_values ` doesn't seem to exist anymore ...
MaxNLocator ?? and other inherited class documentation
I need also define a point with similar syntax , using ax.plot() .
Displaying totals above stacked bars in barchart : matplotlib.pyplot
I am just starting out with matplotlib.pyplot and am a little stuck .
I am just starting out with matplotlib.pyplot and am a little stuck .
Matplotlib plt.show() isn't showing graph
` plt.close ` doesn't work with ` plot.show() ` ([ see relevant post ] ( #URL )) --- but using ` draw() ` doesn't seem to work either so long as program flow is continuing .
Here is an updated example with an ` imshow ` background .
For your graph you should should try with ` pyplot.table ` : #CODE
Python - window_none() in matplotlib.mlab.specgram
matplotlib.mlab.specgram ( x , NFFT=256 , Fs=2 , detrend= , window= , noverlap=128 , pad_to=None , sides= ' default ' ,
window : callable or ndarray
The quicker interface is through pyplot functions , - I think you want : #CODE
dtype : object
The plt.scatter line fails with the exception
I have issue after installing the matplotlib package unable to import matplotlib.pyplot as plt .
@USER The linked example in my answer #URL does a _great_ job of showing how griddata works .
So of you do ` ax = df.plot() ` , you can then call ` ax.set_xlim ( left=1 )` -- or something like that
` fig = plt.figure ( figsize =( 5 , 7 ))`
` strip() ` is not necessary .
[ ` str.split `] ( #URL ) without argument removes leading , trailing spaces .
This may be due to the singular nature of your input datamatrix ( which you are feeding to PCA )
` from pylab import * ` overwrites the griddata from scipy .
have previous called ` plt.ion() ` in your script , or
The location of this file is found by calling ` matplotlib.matplotlib_fname() ` .
Apparently it is a problem with np.array or np.append .
I would recommend using ` plt.imshow ` or ` plt.pcolor ` .
` pl.gcf() .autofmt_xdate ( bottom= 0.3 , rotation=-30 , ha= " left ")`
@USER ping me out-of-band ( email in profile ) if you want to chat about how to address those two issues / moving to using OO interface instead of the pyplot interface .
import matplotlib.pyplot as plt #CODE
' matplotlib ' instead of ' matplolib ' and ' plt.bar ' instead of ' pplt.bar ' ? or are those just typos here ?
The docs for ` dtype ` can be found here .
I think the most ` matplotlib ` ish way of doing it would be to issue a separate ` legend() ` once the plots were generated .
I'm generating overlaid plots using ` imshow ` and printing them to a multipage pdf using ` matplotlib.backends.backend_pdf.PdfPages ` .
Specifically , the alpha information is ignored in the ` imshow ` call , but not the ` cmap.set_bad ` call , which renders properly .
so I don't think it's a problem with converting these arrays to ` ndarray `' s
It's just ` setp ` in ` matplotlib ` .
However , ` plt.setp ` will operate on sequences of artists , which can also be handy .
I'm trying to write a simulation and I guess ` setp ` would be more useful .
Not sure if this helps , but there is [ get_lines ] ( #URL ) with an [ example ] ( #URL )
Similarly ` plt.plot ` basically does ` plt.gca() .plot ( ... )` .
There's nothing wrong with using ` pyplot ` for everything ( especially interactively ) , but it makes it easier to shoot yourself in the foot .
Figures created through the pyplot interface ( ` matplotlib.pyplot.figure `) are retained until explicitly closed and may consume too much memory .
Assuming you have imported ` pyplot ` as #CODE
` plt.close() ` closes a window , which will be the current window , if not specified otherwise .
@USER -h - Basically , the reason that ` del fig ` doesn't work is that giving it a ` __del__ ` method ( which would basically call ` plt.close ( fig )`) would wind up causing circular references in this particular case , and ` fig ` having a ` __del__ ` method will cause other things to not be garbage collected .
* ` as that is what they are calling and there is a low grade effort to kill ` pylab ` and convince people to stop doing ` from matplotlib.pyplot import * `
` ax1.title ` returns a ` matplotlib.text.Text ` object : #CODE
@USER yep , you need to call show() by default .
I don't understand why the dpi setting has this effect on the figimage y parameter , but this now produces PDF output with good quality .
` calories_list_ma = np.ma.masked_where ( calories_list == 0 , calories_list )`
` plt.plot ( datetimes_list , calories_list_ma , marker = ' x ' , color = ' r ' , ls = ' - ')`
fig.savefig ( ' out.png ' , dpi=100 )
The ` figsize ` argument is for ` plt.figure() ` , which can be passed as a keyword arg via ` plt.subplots ` , but not ` plt.subplot ` .
` plt.plot ( linex , liney , color = ( R , G , B ))`
I'm using matplotlib + numpy to generate linear regressions using the polyfit and polyval functions #CODE
In this case , and the loglog case , I usually think that ` polyval ` is not useful .
` fig.savefig() ` is the problem .
The problem is with the canvas , when using the fig.savefig() method .
I thought I had read or seen that ` fig.savefig() ` was supposed to work .
What remains is to construct a numpy recarray : which is what mlab.csv2rec() yields .
And ` DateFormatter ` as in : ` plt.gca() .xaxis .set_major_formatter ( dt.DateFormatter ( " %d / %m / %Y "))`
I tried , ` set_xticks [ 50.0 , 200.0 ]` but that doesn't seem to work !
But with ax.axis ([ 1 , 100 , 1 , 100 ]) , ScalarFormatter gives 1.0 , 10.0 , ... which is not what I desire .
It is better to ` ax.get_xaxis() .set_minor_locator ( ... )`
what about using ` str.split ` : #CODE
The standard ` ScalarFormatter ` takes an additional keyword argument ( ` useMathText `) which does exactly what you want .
Try wrapping your ` d.keys() ` in a ` list() ` call : #CODE
took me some playing to understand what's going on there with the xgrid :) There's an extra ' dfn = pd.isnull ( df )' that can be removed btw .
I'm looking into matplotlib's [ PatchCollection ] ( #URL ) , which should be better , but I've never used it before .
Given [ matplotlib examples ] ( #URL ) , [ the matplotlib gallery ] ( #URL ) and the [ pyplot manual on ` polar() `] ( #URL ) , what have you already tried ?
argument in ` pyplot.legend() `
And also avoid using ` plt.figure() ` which invokes the display .
Remember to do ` plt.show() ` to see your updates .
The ` line , = plt.plot ([ ] , [ ])` syntax is to make this line ` line = plt.plot ([ ] , [ ]) [ 0 ]` more concise using the unpacking feature of python assignment like on ` a , b = [ 1 , 2 ]`
` animation.FuncAnimation ( , , , , , , ...... )` , so I've been trying to modifiy examples I've found .
You can check the documentation of ` FuncAnimation ` here , and this is an example code that does what you want : #CODE
I still do not understand animation.FuncAnimation - the referenced doc is way too terse !
I don't think to_rgba accepts the datetime object .
What happens if you do ` fig.savefig ( ' foo.png ' , dpi= fig.dpi )` instead ?
If you define one yaxis range in terms of the other , I think you achieve what you want : #CODE
But , as of now , this is my ` xs= np.array ([ 1 , 2 , 5 , 6 , 9 , 10 , 11 )` .
plt usually comes from ` import matplotlib.pyplot as plt ` ; it's kind of an implicit convention .
Google `" plt.hist "` .
I tried this earlier but missed the v inside plt.contourf .
I've verified that this also works with ` tricontourf ` .
@USER : ` init ` and ` animate ` return tuples here to honor the specs for ` FuncAnimation ` .
` pd.to_datetime ( df.date )` may work .
You might try matplotlib PolyCollection , as in this answer : #URL
pyplot equivalent for pl.cm.Spectral in matplotlib
Do you have a ` plt.figure() ` in the ` for a in alphas ` loop ?
import matplotlib.pyplot as plt #CODE
The line objects have a label property which can be used to read and pass the label to the ` .legend() ` command .
In other words : ` boxplots = ax.boxplot ( myData , whis= np.inf )` .
Note : you could probably modify the artists contained in the ` boxplots ` dictionary returned by the ` ax.boxplot ` method , but that seems like a huge hassle
TypeError : ' NoneType ' object has no attribute ' __getitem__ '
What I had wanted to do was better done with an numpy.array .
Python - Stop FuncAnimation
Does anyone know the preferred method for stopping FuncAnimation ?
The ` FuncAnimation ` is a subclass of ` TimedAnimation ` .
Definitely do not import ` pyplot ` .
` draw() `
ax.annotate ( txt , ( x1 [ i ] , y1 [ i ]))`
ax.annotate ( txt , ( x1 [ i ] , y1 [ i ]))`
This command works if I do ` plt.scatter ` instead of ` plt.plot ` , but I want a line graph instead of x , y points .
The documentation reveals that ` FuncAnimation ` accepts an argument ` frames ` , which controls the total number of frames played .
Is there a way to cap the duration in ` animation.save() ` call itself ?
class matplotlib.ticker.MaxNLocator
` np.logspace ( -6 , -2 , num=5 )` gives : #CODE
#URL ` ax.get_yaxis() .set_major_formatter ( mticker.LogForamatter ( base= 100.0 ))` more-or-less works , but looks a bit funnier than I expect it to .
What happens when you do ` plt.savefig ( ' rosenbrock.eps ')` ?
ax.axis ( ' off ')
Pyplot Interactive Zooming
E.g. instead of doing ` plt.xlabel() ` , do ` full_fig.set_xlabel() ` .
Julia pyplot from script ( not interactive )
I just installed PyPlot in Julia .
I probably don't undestand the readme of PyPlot here #URL
matplotlib.pyplot.Figure ) by calling gcf() .
You can do ` show() ` just like in Python .
The tool you're looking for is called the ListedColorMap , see its docs here :
Actually I only used the NumPy datetime64 object because I thought it would help so just x = np.array ([ datetime.datetime ( 2013 , 9 , i ) for i in range ( 1 , 5 )]) does it .
Does [ ` tight_layout `] ( #URL ) help ?
` imshow ` might work better for you here ( it can be easily updated ) .
What happens if you do ` ax.legend() ` and ` plt.draw() ` ?
Unfortunately , when I call ` data.plot() ` ( which according to the pandas docs is supposed to be a wrapper for ` plt.plot() ` ) , the returned object does not support ` get_legend_handles_labels() ` .
` ax1 ` is a ` matplotlib.axes.AxesSubplot ` returned from the call to ` pandas.DataFrame.plot() ` .
ah , ` pcolor ` can't do direct color mapping like this .
try ` fig = plt.figure() `
` plt.Figure ` happens to be inside the pyplot namespace , but it's the " raw " class .
@USER - Yeah , I should have said " when you call ` plt.gcf() ` inside of ` set_canvas `" instead of " when you call ` plt.subplot `" .
This also works with a ` figsize ` parameter to the figure() call .
change : ` ax.minorticks_on ` to ` ax.minorticks_on() `
( e.g. start by calling ` plt.figure() `)
` np.array ( y , dtype=float )`
` ax.plot ([ 0 , 1 ] , [ 0 , 1 ] , transform= ax.transAxes )`
Gridspec did the trick perfectly , Thanks
what are ` xaxis ` and ` yaxis ` ?
( ii ) Then I needed hatch fill_between for one band .
I have tried adding the ` sharey ` argument in the line ` ax2 = fig.add_subplot ( 1 , 2 , 2 , )` .
matplotlib imshow - default colour normalisation
I have consistently had problems with my colour maps when using ` imshow ` , some colours seem to just become black .
DateFormatter takes the same formatting string .
I guess that [ ` ax.scatter `] ( #URL ) will do .
The for-loop didn't work for me though , I had to adjust it : for i , j in zip ( np.where ( significant ) [ 0 ] , np.where ( significant ) [ 1 ] )
significant = np.zeros (( 5 , 4 ) , dtype= np.bool );
for i , j in np.where ( significant ): print i , j
Note that using zip ( * ) you can avoid running np.where twice .
Matplotlib streamplot : equidistant starting points on top edge
You simply can't . citing the documentation , ` streamplot ` operates in a way that :
matplotlib - Getting rid of white spots in hexbin
Have you tried increasing the number of points in your ` linspace ` from 100 to 500 or 1000 ?
import matplotlib.pyplot as plt
.ArtistAnimation :
FuncAnimation
( You mentioned ` y ` in your question , but there is no ` y ` in your code ? ) How many times is that ` for-loop ` calling ` ax.plot ` ?
Look into ` set_major_formatter() `
@USER what would you recommend instead of ` set_xticklabels ` ?
And , I also reposition the " import matplotlib.pyplot as plt " to the top of module file and everything work fine
This can be done by setting the them to min() and max() of each x , y , z value : #CODE
This can be done with np.meshgrid() .
I am using pyinstaller on a python script that imports matplotlib.pyplot .
File " C :\ Users\Vern\Documents\Python\testplot\build\testplot\ out00-PYZ.pyz \ matplotlib.pyplot " , line 80 , in _backend_selection
mod_wsgi vs matplotlib - cannot import matplotlib.cbook
I can import matplotlib.cbook in python command line , just whenever it goes through the web I can't do it .
Please excuse the generality of this question , as it might be more about the theory behind a streamplot than python syntax itself .
I thought pyplot was simply a wrapper for the OO framework but I guess I'm just a noob .
Is there some way to attach pyplot to an instance of matplotlib.figure.Figure ?
` pyplot ` is just a wrapper for the OO interface , but it does a lot of work for you read the example you link to again carefully , the #CODE
You might be interested in matplotlib.pyplot.figtext #URL
Trying ` df.t ` gives me this :
There may be a better way , without calling ` draw() ` .
I had tried the get_text() method but I did not called the plt.draw() method and I was confused .
Just do ` indexes = np.arange ( 0 , 2*len ( labels ) , 2 )` .
Python matplotlib set_array() takes exactly 2 arguments ( 3 given )
" set_array() takes exactly 2 arguments ( 3 given )"
I experimented a little with ` plot() ` ( instead of ` scatter() `) .
` iteritems() ` already returns a tuple ` ( key , value )` .
Obtain frequencies in each bin for histogram2d
Importing matplotlib.pyplot and BeautifulSoup with cxFreeze
I got a workaround by not using ` cla() ` .
Why not just do ` ax.annotate ( ' ( %s , %s )' % ( i , j ) , ... )` ?
( Or if you're using the newer-style string formatting , `' ( {} , {} )' .format ( i , j )` . )
I just realized I can check the ` numpy.arange ` on python console as well .
` ax.annotate ` is a little more complicated : #URL
I've managed to do it with ax.text()
xx = np.linspace ( -5 , 5 )
plt.plot ( xx , yy , ' k- ')
The hist() part isn't working for me though .
I tried df [ ' author '] .value_counts() .hist() .plot() and then df [ ' author '] .value_counts() .hist() .show() but they don't seem to work for me .
@USER sorry , I meant ` df [ ' author '] .value_counts() .plot() ` or just ` df.plot() ` .
I tried ' clear() ' but not ' clf() ' .
Just been reading about .stackplot after trying to replicate this chart type using Pandas , IPython and Seaborn .
After that , show() is called in the same program which gives me a graphical output .
You're already accessing matplotlib functionality through the pyplot interface and ` numpy ` though the numpy namespace .
try ` plt.pause ` instead of ` sleep `
matplolib ' s plt.subplot ( 211 ) in layman terms
It seems the issue was that I had ` .values ` .
Thank you , I attempted to call show() but did not realize it was a method of plt .
The problem seems to be the call to ` plt.contourf ` ( which I do not strictly understand why is there ) .
For testing I made an little np.array #CODE
I dont know what exactly does " meshgrid " ... gonna search a little bit more about it .
Therefore , it's not being drawn with you call ` ax.draw_artist ( rect )` .
How is the computation of auto correlation in matplotlib different from other libraries like pandas.tools.plotting , sm.graphics.tsa.plot_acf etc .?
` V= np.arange ( - 0.5 , 0.5 , 0.1 )`
` cont = ax.contour ( X , Y , Z , V , cmap =p lt.cm.cool , antialiased=True )`
` xs = NP.array ([ 0.00062 0.00661 0.02000 0.01569 0.00487 0.01784 ])
` ys = NP.array ([ 0.99999 0.66806 0.50798 0.61230 0.83209 0.86678 ])
` zs = NP.array ([ - 0.24255 - 0.42215 - 0.31854 - 0.77384 - 0.77906 - 0.98167 ])
` ax= fig.add_subplot ( 1 , 2 , 1 , projection= ' 3d ')
` ax.grid ( True )
` ax.plot_trisurf ( xs , ys , zs , triangles = triangles , alpha = 0.0 , color = ' grey ')
with triplot with ` color = ' grey '` but this doesn't seem to work
Ok , so I've narrowed down the issue to the ` fig.tight_layout() ` call .
Notice I saved the return value of the scatterplot in ` sca ` .
You could to ` pd.scatter_matrix ( np.log ( my_dataframe ))` though .
why ` math.e **b ` instead of just ` np.exp ( b )`
I am using matplotlib.pyplot .
However , your current ` ndenumerate ` statement is exactly equivalent to : #CODE
The LineCollection sounds a lot more like what I'm after - if you can manage an example , I'd really appreciate it .
` Node() ` is just a object containing certain lists
` plt.show() ` with ` plt.show ( block=False )`
Or you can just ` df.fillna ( method= ' ffill ')` : #CODE
i added the following code : surf = ax.plot_surface ( X , Y , Z , rstride=1 , cstride=1 , cmap= cm.coolwarm , linewidth=0 , antialiased=False ) fig.colorbar ( surf , shrink= 0.5 , aspect=5 ) fig = figure() surf.plot_surface ( X , Y , probs ) show() now it says ax not defined , which it didnt say before
Try either ` np.array ( x ) .reshape ( 180 , 20 )` or ` np.reshape ( x , ( 180 , 20 ))`
I think you're a bit confused on what meshgrid does .
An explanation of ` numpy.meshgrid `
plt.contourf ( np.reshape ( yourx , z.shape ) , np.reshape ( youry , z.shape ) , z )
Also ` plt.setp ( ax.lines , linewidth=5 )` if you want a one-liner .
( In case the OP hasn't come across ` setp ` before . )
Then , I looked for and found the method that is really updating the aspect ratio : it is named ` apply_aspect() ` .
After seeing tight_layout() already in your code , I did a complete re-write of my answer .
` plt.errorbar ` accepts the same arguments as ` plt.plot ` with additional ` yerr ` and ` xerr ` which default to None ( i.e. if you leave them blank it will act as ` plt.plot `) .
If you want a shared x-axis , then you can provide ` sharex=True ` to ` plt.subplots ` .
have multiple copies of your rcparams file configured how ever you want .
@USER My guess is ` lm ` should be [ ` LogNorm `] ( #URL ) ?
It is a typo , I guess as well for ln / LogNorm .
How does your solution relate to using ` matplotlib.ticker.MultipleLocator ` , ` NullLocator ` and ` FixedLocator ` ?
As far as I can tell the ` ax.set_xticks() ` is just a convenience method that modifies the ticks , meaning a user doesn't have to worry about ` matplotlib.ticker ` objects .
No clue why it does not work without the ` .values ` attribute though .
Using ` plt.setp ` : #CODE
In some versions of matplotlib I think you may need to do a ` plt.ion() ` and / or a ` plt.show() ` .
Repeated calls to ` fig.colorbar ` will also result in adding additional colorbars independent how you are setting up the objects so this could have been demonstrated more simply with a ` pyplot ` -based example .
The output from ` np.histogram2d ` looks like this : #CODE
@USER You may want to check out [ numpy.corrcoef ] ( #URL ) or [ scipy.stats.pearsonr ] ( #URL )
Probably you are looking for numpy.indices ?
Matplotlib Radiobutton doesn't work anymore after clf()
If there is not , how ` matplotlib.pyplot.contour ` works , how does it
This solution to another thread suggests using ` gridspec.GridSpec ` instead of ` plt.subplots ` .
Have you tried ` norm= colors.LogNorm ` ?
basically , this way the ` pcolor ` is plotted in ` ax ` and the annotations are also on ` ax ` .
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
Also does matplotlib imshow as opposed to cv2 imshow work ?
AttributeError : ' numpy.flatiter ' object has no attribute ' get_offsets ' in python
` AttributeError : ' numpy.flatiter ' object has no attribute ' get_offsets '` .
Moreover , i can not anymore print the points that would be inside the ` lasso ` .
Then , the points out of the ` lasso ` are faded out .
I modified the code for triggering a lasso with shift+lmb .
There is also a ` matplotlib.style ` module which will be in 1.4 that will give style-sheet like capability .
This is a good case for avoiding the ` pyplot ` interface .
I'm just trying to dial my anti- ` pyplot ` crusade down a bit :)
There is a ` set_fontsize ` method : #CODE
When I try plt.gca() .title .get_lael()
Because I am feeling cranky about pyplot today : #CODE
Change the ticklabels by ` set_xticklabels() ` : #CODE
You can this modify the whisker elements of those dictionaries and feed the final version to ` ax.bxp ` .
( Edit ) matplotlib.nxutils has been depreciated and repclaed with matplotlib.path.Path.contains_points .
Here's a small snippet that uses Path.contains_points .
` numpy.gradient ` is basically going to return ` dy , dx ` .
Therefore , ` np.gradient ` effectively returns ` dy , dx ` instead of ` dx , dy ` .
In a nutshell : You're treating ` numpy.gradient ` as though it uses " column " , " row " indexing .
You might also consider using ` numpy.mgrid ` , both because it's shorter and for consistency .
( ` np.meshgrid ( ..., indexing= ' ij ')` fixes this , but the default behavior is a bit confusing . )
For #2 , you need to change the ` rcParams ` #CODE
ax.xaxis.set_major_locator ( MultipleLocator ( 1 ))` to addjust ` x ` ` majorticks ` .
That depends on the ` writer ` argument of the ` .save() ` method :
writer is either an instance of MovieWriter or a string key that
However , there is some behaviour from PyPlot that is undesired .
I have also tried display ( gcf() ) .
I have confirmed that isinteractive() outputs " true " .
I did a number of searches for information on how to address this , and that PyPlot issue page never showed up for me .
` np.loadtxt ` won't guess that ; you have to tell it that explicitly .
So : ` datestr , bid , ask = np.loadtxt ( ' GPBUSD1d.txt ' , delimiter= ' , ' , dtype= np.dtype ( np.str , np.float , np.float ) , unpack=True )` .
[ See the docs for ` np.loadtxt ` for more details . ] ( #URL )
have you tried ` subplots_adjust ( left=0 )` ?
Try to check the set_data_interval ( #URL ) .
Near the end of the code are two ax.scatter ( ... ) .
matplotlib imshow , ArtistAnimation and class attribute
When I try and run a script with matplotlib.pyplot.plot ( x , y ) nothing happens .
Try using plt.xlabel ( r " $x$ ") , instead of plt.xlabel ( " $x$ ")
sorry , was sloppy in writing , the problem is pyplot ( which is imported by pylab ) .
pyplot while using X11 forwarding
How did you " try functions in matplotlib.pyplot " ?
An example could be ` fig.subplots_adjust ( .1 ,. 1 ,. 9 ,. 9 , 0 , 0 )` .
Try adding ` fig.canvas.draw() ` before ` plt.show() ` .
Traditionally ` fig.canvas.draw() ` does the actual drawing and ` plt.show() ` enters the interactive event loop .
When using IPython or an interactive interpreter , ` ion() ` and ` ioff() ` toggle updating after each command .
I want aspect of 1:1 but using only ` set_xlim() ` and ` set_ylim ` I do not change aspect .
It's related to ` plt.show ` method .
What is 30 in the scatter() ?
plt.close()
It appears as if ` matplotlib.tri.Triangulation ` uses a buggy and possibly incorrect implementation of Delaunay triangulation that is due to be replaced by qHull .
So you need to pass both the points and the triangles from qhull to the ` Triangulation ` constructor : #CODE
Interesting , as I tried a similar approch using ` np.ma.masked_where() ` , and that didn't work .
Adding legends to plots when not using the pyplot interface
You could call ` ax.legend ` : #CODE
I am just importing pyplot and it is working .
I don't have to import matplotlib to make pyplot work .
it would do since importing pyplot imports alot to allow it to work , one of the 1st things the pyplot.py file imports is ... matplotlib .
See I have installed matplotlib and pyplot .
----- fit_fn = poly1d ( fit )
df = pd.DataFrame ( dict ( score=y , group=g ))
figure()
show()
labels = ax.set_xticklabels ( args [ 1 ] , ** kwargs )
File " C :\ Python27\lib\ site-packages \matplotlib\ axes.py " , line 2632 , in set_xticklabels
File " C :\ Python27\lib\ site-packages \matplotlib\ axis.py " , line 1515 , in set_ticklabels
TypeError : object of type ' NoneType ' has no len()
I tried ` plot() ` but it did not work .
ValueError when using matplotlib tight_layout()
Why is ax.axis ( ' tight ') necessary ?
The problem is that the keyword args accepted by ` draw_networkx_nodes() ` aren't passed on to ` scatter() ` .
matplotlib : Unexpected gridspec behavior
When using ` gridspec ` the indexing acts similarly to numpy arrays .
Matplotlib tight_layout causing RuntimeError
Matplotlib , TypeError : ord() expected a character , but string of length 0 found
from matplotlib import rcParams
rcParams [ ' text.usetex '] = True
AttributeError : This method only works with the ScalarFormatter .
might be useful to understand matplotlib vs pyplot vs pylab #URL
If that is the offending line , it means that plt.plot is the tuple .
As mentioned in the comments , you may have accidentally overwritten the value of ` plt.plot ` #CODE
If the problem persists in a new interpreter , you should see what the tuple is that ` plt.plot ` displays .
In a nutshell , call ` plt.close ( fig )` when you're through with it if you're using the ` pyplot ` interface and want to generate lots of figures without displaying them .
I tried using ` foo.set_data ` and ` foo.set_path ` but PathPatch doesn't have such attributes and therefore , they didn't work .
I have tried pyplot .
I don't know mpdld3 , but from what I understood from the doc , you just need to display it with ` mpld3.display ( plt.gcf() )` , or something similar .
No , look into ` plt.subplot() ` .
I never quite appreciated how much more performant is to just create boolean arrays than to do a ` np.where ` .
too large file created by the errorbar of matplotlib
` tight_layout() ` will automatically adjust the dimensions , and can also be used when you have ( for example ) overlapping labels / ticks / etc .
You could play with the value of nbins in MaxNLocator : #CODE
I'm embedding a pyplot graph in a Tkinter frame .
I bet the problem is the plt.show() command .
I'm able to make plots using ' pcolormesh ' or ' imshow ' using the #CODE
Especially the following statement about ` LogFormatter ` parameter ` labelOnlyBase ` :
The ` minorticks_on() ` method wasn't doing anything , so I commented it out .
An explanation of randint ( 2 ) < 1 in python , I cannot understand what the < 1 does
randint ( 2 ) 1 ,
Rather than filtering ` ax.get_children() ` , it might be enough to simply access the bars as ` ax.patches ` .
Pyplot no output
Sure , that is what plt.axis is what for .
` num_ellipse [ 0 ] .remove() `
These steps involves ` np.interp ` ` scipy.interpolat ` ` scipy.optimize ` and ` plt.fill_between ` , which you should look up .
It gives me ` AttributeError : ' module ' object has no attribute ' pyplot '`
gives me ` module ' numpy.random ' from ' / Applications / C #URL `
matplotlib's ` __init__.py ` doesn't include the statement ` import pyplot ` .
` ax.set_title ( ax.get_title() , fontsize=20 )`
( Generated whit arange ( 0 , 18 )) #CODE
The line I was missing ** ax.plot ( x , z , color= ' red ') ** now makes sense .
twiny() in matplotlib changes the y-axis scale
I've tried using the twiny() option and it does not change the scale : #CODE
Yes , basically is the same way , I can't realize why this happens , but I " fixed " it with a hybrid solution : ` ax.set_ylim ([ y.min() - 0.05 , y.max() + 0.05 ])`
MatPlotLib 0.99.1.1 rcParams [ ' axes.color_cycle ']
` matplotlib.rcParams [ ' axes.color_cycle '] = [ ' c ' , ' m ' , ' r ' , ' g ' , ' b ' , ' k ']`
Or ` LineCollection ` ( there are a couple of good answers by JoeKington on SO showing how to do that )
Something like this : 3D-Stacked 2D histograms in matplotlib pyplot .
Mostly likely yes as you have a line of ` xx= np.linspace ( x_vals [ 0 ] , x_vals [ -1 ] , x_points )` ?
I see , like one come out of ` meshgrid `
swe_array= np.array ([ x_vals , y_vals , swe_vals ] , np.float32 )
It looks like waitforbuttonpress should do what you want .
The Documentation on ` plt.plot ` says :
It looks like ax.set_position ( plt.subplot ( gs [ 0:2 ]) .get_position() ) should do what I want .
I know it's possible to animate in one dimension with ` ion ` and ` set_data ` .
ImportError : matplotlib requires dateutil ; import matplotlib.pyplot as plt
Say , I read , d = imread ( ' i.png ') .
im= Image.open ( ' i.png ') , arr= np.asarray ( im ) , tot= arr.sum ( -1 ) , F1 = tot.sum ( 0 ) .sum ( 0 ) .
So far I observed that ` plt.close ( fig )` does not do anything in conjunction with ` plt.show() ` .
I also tried experimenting with ` plt.ion() ` , but without success .
I said you that I was getting wrong result with image.sum() .sum() and I figured it out as the reason .
` np.asarray ( Image.fromarray ( image.astype ( ' uint8 ') *255 ) .convert ( ' L ')) .astype ( float ) / 255 `
` show() ` does not exist .
You need to call ` plt.show() `
I also had to change the figtext location : #CODE
plt.plot ( arr [ ' lapse_time '] , arr [ ' contact_angle '])
On the web I found 2 ways to ` vectorize ` :
What output are you getting when you call function() using the two options you presented ?
@USER .vectorize
TypeError : function() takes exactly 2 arguments ( 1 given )
For example ` griddata ` , ` Rbf ` , ...
Worse comes to worst , I could go with a manual ` text() ` insertion , but I'd like something more direct if possible .
` ax.xaxis.get_children() [ 1 ] .set_size ( 15 )`
Basically has the same behavior as a call to ` ax.tick_params() ` .
Sorry , ` xaxis ` , I will change that too
In combination with the above : ` ax2.spines [ ' bottom '] .set_zorder ( 10 )`
You can do : ` plt.plot ( x_data , y_data , color= ' black ' , alpha= 0.4 )`
scipy.interpolate.griddata issue with x / y pairs built from numpy.linspace()
Those parameters are to initialize the ` ConnectionStyle.Arc ` class .
class ConnectionStyle.Arc ( angleA=0 , angleB=0 , armA=None , armB=None ,
And as I have observed , it seems the ndarray read by io.imread is not equivalent to that was read by plt.imread .
You can read the color from the ` PolyCollections ` which form the stackplot .
Different behaviour of hexbin and histogram2d
I didnt now imshow() plotted something else then what I expected .
You can control this using the ` origin=lower ` or ` origin=upper ` keywords in ` plt.imshow ` .
I am using matplotlib.pyplot and np .
If so then you should have no problem fitting the ` numpy.fft.rfftfreq ` method into your own code .
` rfftfreq ` will work , as the other poster mentioned , if you have it in your system .
You also should not import pylab , you should do ` import matplotlib.pyplot as plt `
I've used import matplotlib.pyplot as plt before , and that worked just fine .
` print ` uses the method ` __str__ ` .
You can force the range of the colormap by using the ` vmin ` and ` vmax ` keywords arguments to the call to ` imshow() ` .
For updating plots do something like `` hh = plt.plot ( x , y )`` for initial drawing and `` hh [ 0 ] .set_daty ( x1 , y1 )`` for updating the line .
@USER what does ` pyplot() ` do exactly ?
is the area above the wedge ( perhaps a linear equation ? ) .
Have you tried : plt.tight_layout()
@USER I want to do something very similar to this however I am using dataframe.boxplot ( by= ' column1 ') this grouping doesn't seem to work with your example .
Now I'd like to make it look pretty when running the .imshow() command .
To do this you should look into ` matplotlib.mlab.griddata ` ( #URL ) .
Because I didn't know ` ion ` , I implemented several programs using ` thread ` .
For reference , see IP #URL and notice how ` matplotlib.use ( backend )` is called explicitly .
How can I animate images made with ` contourf() ` ?
What's the ` contourf() ` equivalent of ` set_data() ` ?
There ought to be a ` set_data ` method .
If you are like me and the matplotlib.animation doesn't work .
I installed ffmpeg from MacPorts so I added the line ` plt.rcParams [ ' animation.ffmpeg_path '] = ' / opt / local / bin '` and I ran into the problem discussed in ( Using FFmpeg and IPython ) , so I added ` FFwriter = animation.FFMpegWriter() ` .
plt.ion() # interaction on
I was wondering , however , if there is a more convenient way of doing it , rather than working with the LineCollection .
also search for ` LineCollection ` .
@ user3378649 I'm getting this error- TypeError : pie() got an unexpected keyword argument ' startangle '
now showing this one - pie() got an unexpected keyword argument ' radius '
Here you are creating new ` wedges ` ( which overwrite your old ` wedges ` instances ) and you are not setting them to be pickable .
I have tried it in two different ways , one by using the matplotlib.animation and #CODE
Formatting datetime xlabels in matplotlib ( pandas df.plot() method )
Ideally , I'd like to call ` strftime ( ' %Y-%m-%d ')` on them .
I've tried things like ` set_major_formatter ` but was unsuccessful .
The objects in the ` date_range ` DF are ` Timestamp ` objects .
Accepted yours because it let me call strftime and thus allows for more formatting options , as you pointed out
The documentation of ` plt.scatter ` expects input like : #CODE
And a secondary question : I am using griddata correctly , right ?
For displaying I am using OpenCV's ` imshow ` method .
I picked those coordinates for ax.text as an example .
You can do this with matplotlib's AnchoredText .
@USER ` PathCollections ` does not have ` set_data ` or ` get_data ` methods .
sorry , should have been ` get_array ` and ` set_array `
@USER The ` set_array ` and ` get_array ` methods only appear to change the colours of the points , not their positions .
From the answer you linked , it looks like the logical equivalent of ` set_data ` is ` set_offsets ` , correct ?
` plot() ` in ` pandas ` are build on ` matplotlib ` .
Matplotlib has ` filternorm ` and ` filterrad ` as filtering options in ` plt.imshow() ` , but they don't seem to do anything .
Exactly the same problem as Using ion() from pylab causes matplotlib to hang , but the solution doesn't help me .
I had problems on windows with ` ion() ` as well while my code worked fine on linux .
For my code , the behavior of the ` plt.draw() ` didn't seem to change anything about the output .
( assuming we imported ` pyplot ` as ` from matplotlib import pyplot as plt `)
Try plt.tight_layout()
Using GridSpec
What about using ` matplotlib.gridspec.GridSpec ` ?
GridSpec is very useful !
Seaborn is built on top of matplotlib , so you can access elements of a seaborn chart using import matplotlib.pyplot as plt , just like in the example above
plt.plot ( df.FALSE_ANSWER )
ax = plt.gca()
ax.yaxis.set_major_locator ( MultipleLocator ( 0.1 ))
ax.xaxis.set_major_locator ( MultipleLocator ( 10 ))
ax.set_xticklabels ( labels , rotation =90 ) ```
This might also be helpful for reading strings with ` genfromtxt ` : #URL
what does ` matplotlib.get_backend() ` give ?
Animating pngs in matplotlib using ArtistAnimation
belongs to the ` ArtistAnimation ` class .
Alternative approach using ` FuncAnimation `
It appears that the ` FuncAnimation ` approach is more efficient .
You don't always have to call ` plt.figure() ` .
What's passed to the ` use() ` method is called a backend .
from the documentation ( see method description for ` set_family ` or ` set_name `)
` matplotlib.dates `
I will be using more of qcut in the future ....
I create a ` RendererAgg ` and a ndarray share the same memory with it .
I tried with set_data but it is not working .
Matplotlib fill_between() workaround
Therefore I can see the reason why ` .set_dashes ` .
That means things such as ` .set_linestyle ( ' - ')` is not possible .
with the Poisson distribution , I want the x-axis start from 0-1 , I tried but I stock with that my code here :
I have removed the ` plt.axvline ( ... )` , ` plt.xlabel ( ... )` and ` plt.ylabel ( ... )` out of the ` for ` loop as you only need to call it once .
I've also removed the ` plt.legend() ` from the ` for ` loop for the same reason and have removed its arguments .
Surely that should be ` np.log2() ` ?
So it looks to me that matplotlib.mlab.entropy is incorrect .
You have copied the code in incorrectly then as I have ` fig.autofmt_xdate() ` not ` fig.autoftm_xdate() ` .
Can I do this by adjusting the tranform argument in axes.text ?
Simply call ` plt.tight_layout() ` before ` plt.show() ` when generating your plots .
import matplotlib.pyplot as plt
#URL I used ax.legend ( lab ) .
I have 10+ items in xaxis and each of them have string length of 10+ .
( mf , afm and tfm ) files . exporting to postscript or EPS works perfectly .
ax.bar ( ind-width / 2 ., b ) still now working
ax.bar ( ind-width / 2 ., b )
The easiest would be to provide the ` extent ` to ` imshow ` .
I expect this to be a solution in pandas , but anything else using matplotlib or pyplot is also fine .
If I comment out the ` FuncFormatter ` line everything works again .
I implemented the drawing of the ROI by using the ` matplotlib ` example Lasso .
If not I don't understand why you're using the Lasso manager to begin with .
Below is a functioning example , based on the official lasso example in the docs .
@USER I tried doing that , in addition to setting the ax.set_xlim .
` ax.grid() `
I solved it using the ` set_adjustable ( " box_forced ")` option as suggested by the comment of tcaswell .
I only added the ` set_xticks ` and ` set_yticks ` .
The string options are those given by ` strftime() ` .
import matplotlib.pyplot as plt
Which matplotlib.axes methods are safe to call from a background thread ?
Why does PolyCollection always closed ?
You are right , I now can have a non-closed and visually non-filled polycollection .
Try to using ` ion ` as #CODE
` plt.draw ` added
@USER Yes , I don't think it will work after a ` plt.show() ` .
fig = plt.figure()
ax1 = plt.subplot2grid (( 5 , 4 ) , ( 0 , 0 ) , rowspan=4 , colspan=4 )
ax1 = plt.subplot ( 1 , 1 , 1 )
ax1.spines [ ' bottom '] .set_color ( " #5998ff ")
fig.autofmt_xdate()
plt.show()
But setting ` plt.ion() ` causes a strange bug ( ? ) .
But i think Numpy's ` vectorize ` would be even better in this case , it makes the resulting code much more readable ( to me ) .
matplotlib GridSpec indexing yields unexpected results
And the docs for numpy meshgrid to see what type of object it returns -
ll [ 0 ] .set_clip_on ( False )
plt.axis ([ 0 , 100 , 0 , 1.2 ])` section ... however I am still pretty lost .
( e.g. , plt.grid() , and so on )
` matplotlib.animation ` apparently supports imagemagick as a writer for animations ( see here , for example ) .
Create The Legendre Formula Using Numpy
And it just passes the cmap kwarg through to ` LineCollection ` .
The way that the colormap machinery works if you pass a colormap object then it is happy , if you pass a string it uses ` get_cmap ` to look up the colormap object .
The way that the colormap machinery works if you pass a colormap object then it is happy , if you pass a string it uses ` get_cmap ` to look up the colormap object .
` set_xy ` ?
` FuncAnimation ` object .
You are on the right way with ` fig.subplots_adjust ( left=0 , bottom=0 , right=1 , top=1 )` .
` fig.tight_layout() `
Note the ` normed=True ` in the call to ` plt.hist ` .
for some reason the errorbar is vertical as well ( guess thats just a scaling issue .. )
matplotlib.pyplot vs matplotlib.pylab
However , there is also a package called ` matplotlib.pyplot ` .
pyplot .
The pyplot interface is generally preferred for non-interactive
spyder matplotlib UserWarning : This call to matplotlib.use() has no effect because the backend has already been chosen
Something in your IDE is pre-importing pyplot for you .
But still , it is great to know that the get_ydata() can do the same thing !
have you looked into using ` plt.subplots ` or ` gridspec ` ?
I will also check gridspec .
With gridspec : #CODE
9249 self._subplotspec = GridSpec ( rows ,
-> 9251 self._subplotspec = GridSpec ( rows , cols ) [ int ( num ) - 1 ]
I came up with something similar before seeing your solution based on gridspec.GridSpec and tight_layout , but yours is simpler and looks better .
As you mentioned I had trouble adjusting spaces with tight_layout .
fig , ax = plt.subplots()
One unfortunate side-effect of this is that it can seemingly " move " objects when you compare the output from ` plt.show() ` and the output from ` plt.savefig() ` .
But why don't I need to specify such high dpi , when I call ` imshow() ` only once ?
Combining imshow with a user input
Each pass through the for loop asks about a different candidate but the imshow window never actually shows the candidate .
I would throw a ` plt.draw() ` in before the input .
I tried ` plt.xticks ( labels )` , but it doesn't work .
Note : this must be after ` fig.tight_layout() ` !
` TypeError : cannot astype a timedelta from [ timedelta64 [ ns ]] to [ float64 ]`
There is also ` eventplot ` which might be what you want #URL
As @USER mentions in comments , eventplot is a good way to do this .
I think you are re-inventing ` eventplot `
I didn't know about eventplot !
The reason is that pcolor counts points on vertices .
Just a small note , using ` Y , X = np.meshgrid ...
What does ` matplotlib.get_backend() ` return ?
I'm worried that the interpolation that produces the ' Energy ' , ' D ' , and ' Pressure ' curves is not working correctly ( this is scigrid's griddata ) .
@USER : nitpick*nitpick _right and proper_ and after you have to write ` data= np.genfromtxt ( ' data.txt ')`
` plt.subplots_adjust ( right= .8 )` looks good for me .
I think axhline does what you want .
You are using the OO-interface for ` .imshow() ` , so why not for ` .plot() ` as well ?
I make plots using plt.plot ( x , y ) but for the colorbars what goes in plt.colorbar ( ? ) ?
` ax.scatter ( x , y , c=colors , ' o ')`
As Wicket said , I'm just calling ` tight_layout() ` again and again , but automatically .
The arguments to ` Basemap.plot ` are exactly the same as those to ` matplotlib.pyplot.plot ` , i.e. : #CODE
If you panned the window of ` ax1 ` far enough , you would have seen them ( which is the same as doing ` ax.set_xlim ( lat_bounds )` and ` ax.set_ylim ( lon_bounds )`) .
Updated - here is another option without using GridSpec .
In the latter case you could try * tricontour * #URL
For me setting ` ax.set_xticks ( np.arange ( 5 ) + 1.5 )` and ` plt.xlim ( 1 , 6 )` worked .
Your ` get_rgba_bitmap ( fig )` functions inverts the ` cmap ` of ` imshow ` .
2 ) pyplot , to work in a procedural way
class matplotlib.legend.Legend ( parent , handles , labels , loc=None ,
The ` get_children() ` chain is required because matplotlib wraps the line in several layers of horizontal and vertical packs .
Python pyplot.hist ignores range if it is larger than dataset ?
If that method does not exist , do ` import matplotlib.pyplot as plt ` then ` plt.show() `
To change the background you have to change the ` alpha ` using ` Text.set_bbox() ` : #CODE
Moving ` ion() ` so it is after ` show() ` does what I think you want .
gcf() .canvas .flush_events() does the trick .
I have tried to feed the arrays for imshow but it says invalid arguments .
Displaying pyplot Windows using Anaconda+Sublime
Setting colormap limits in pandas df.plot
Imshow and meshgrid are not working the way I thought .
It works much the same as ` imshow ` so you can just supply ` Z ` .
It seems , data.sort() doesn't work when I do data= np.loadtxt ( " . / data.dat " );
fig3 = plt.gcf()
matplotlib tripcolor - removing edges
There are ` set_scale ` and ` set_xticklabels ` for those : #CODE
Then ` imshow ` can give the wanted output : #CODE
Then run ` griddata ` on the points : #CODE
Note also that you must ` plt.draw() ` before getting the right width value .
The documentation for ` hist2d ` states :
matplotlib.pyplot.hist2d ( x , y , bins=10 , range=None , normed=False , weights=None , cmin=None , cmax=None , hold=None , ** kwargs )
closing of matplotlib.pyplot closes parent window also
I want only the pyplot to be closed when I click " x " on it .
You could definitely do ` ax.scatter ( tab_C [ 0 ] , tab_C [ 1 ] , zs=tab_C [ 2 ] , c=tab_t )` .
m = cm.ScalarMappable ( cmap= cm.rainbow )
plt.colorbar ( m )
but ScalarMappble don't have the methode set_label
' set_ylim() ' and ' set_xlim ' work for me but ' set_zlim ' always doesn't .
Python / Matplotlib : controlling the aspect ratio in gridspec
You can pass a ` subplot_kw ` dict into ` plt.subplots ` .
I had a misunderstanding of the width_ratios and height_ratios parameters in GridSpec .
Create multiple plots using pyplot and gridspec on separate ' windows ' ?
It seems that I was wrong about the ` mathrm ` environment requiring the ` text.usetex ` config setting - @USER ' s answer shows that it is implemented in mathtext .
python hist2d is not defined
true i have matplotlib 1.1.1rc , i don't found minimal version for hist2d .
It uses ax.transData and figure.get_dpi() : #CODE
This is what I had : fig = plt.figure ( figsize =( 600 / 96 , 300 / 96 ) , dpi=96 ) but I thought the labels looked stretched .
Why doesn't pyplot.show() work ?
-Then I tried to change the backend via code : matplotlib.rcParams [ ' backend '] = " GtkAgg "
What backend , etc .?
( as instructed in another answer here : Why doesnt pyplot.show() work ? )
ImportError : No module named ' matplotlib.pyplot ' ; matplotlib is not a package
Note that graph is an instance of matplotlib.figure.Figure
Is ` plt.colorbar ( z1_plot , cax=ax2 )` supposed to be ` plt.colorbar ( z2_plot , cax=ax2 )` , etc for 3 and 4 ?
Thus I do the following combining ` plt.hist2d ` and ` plt.imshow ` #CODE
If you do ` plt.clf() ` and ` plt.close() ` it will be cleared .
matplotlib hist() autocropping range
ax.axis ( xmin=xmin , xmax=xmax )
Or ` ax.set_xlim ( xmin=xmin , xmax=xmax )` .
I would like to be able to move a point ( matplotlib.patches.Ellipse ) along a vertical line .
From on_release I have its final position : #CODE
The ` setp ` machinery is just a convince method for looking up these functions .
Multiple ` subplot2grid ` in a for loop
try not putting an argument in ` plt.figure() ` .
By specifying a string as the argument to ` plt.figure() ` you are re-using the same figures
I have tried ax.fill_betweenx ( theta , 90 , r , color= ' 0.75 ') and that didn't work .
Also , using ` set_yticklabels ` is dangerous and should be avoided .
@USER : Instead of set_yticklabels , what would you recommend ?
So what I actually did was changing ` df [ ' net '] .plot ( use_index = True )` to ` plt.plot ( df.index + 0.5 , df [ ' net '])` .
try ` xlim() ` please
Matplotlib Gridspec " Cell " labels
Using GridSpec , I have a regular lattice of plots .
It is probably worth using ` linecollection ` #URL and #URL
if ` linecollection ` works in 3D
I tried it out . linecollection does not appear to work in 3D .
For imshow you also need to specify the boundaries ( extent ) like so : #CODE
` plt.hist ( x , number , label = ' STH ')` #CODE
matplotlib pyplot side-by-side graphics
You can achieve it using the ` ScalarFormatter ` : #CODE
Which usually works with Matplotlib methods , as imshow and streamplot , for example .
According to ` streamplot ` documentation : #CODE
In your case a verbose equivalent to ` Y , X = np.mgrid [ - 3:3 : 100j , - 3:3 : 100j ]` is : #CODE
and you can safely pass ` x , y ` or ` y , x ` to ` streamplot ` .
However , ( a bit lenient ? ) 2-d arrays seem to be accepted in case they are of the form ` X , Y = numpy.meshgrid ( x_1d , y_1d )` .
But unfortunately not ` Y , X = numpy.meshgrid ( x_1d , y_1d )` .
The problem appears to be that ` plt.streamplot ` wants the ` divergent_free_vector_field ` arrays to be indexed ` [ y , x ]` , instead of ` [ x , y ]` .
Resolved my issue with the idea of using plt.xticks() , so thank you very much for your help .
I appreciate the effort , but I also found my own solution in the end , without using set_array .
Afterwards , when I call ` plt.show() ` , it is simply ignored .
` ax.arrow ( LV.theta [ 1 ] , 0 , 0 , LV.mag [ 1 ] , width= 0.005 , length_includes_head=True , edgecolor = ' black ' , facecolor = ' green ' , lw = 2 , zorder = 5 )`
The same happens with just plain plt.scatter ( ... )
Could np.histogram2d have a problem with randomly scattered small numbers ?
The result with imshow looks like :
histogram2d ( y , x , bins =( xedges , yedges )
It seems like a mac issue , just try changing the backend using matplotlib.rcParams [ ' backend '] = ' TkAgg ' in your script .
Matplotlib pcolormesh , separate datacolor and color brightness information
I wasn't forcing a re-draw in my code , but the callback was calling a third-party method that was issuing a plt.show() .
As @USER pointed out , the problem was caused by the callback that was indirectly calling ` plt.show() ` .
Matplotlb tripcolor bug ?
The problem is that depending on the plane position ( ie the mesh ) tripcolor gives me sometimes good or bad results .
Results with tripcolor
I've heard that matplotlib's tripcolor is sometimes buggy , so is it a bug or not ?
It's probably because the Delaunay triangulation called by Paraview created a convex hull of the points ( as it should ) .
` fig.subplots_adjust ( bottom = 0 )
fig.subplots_adjust ( top = 1 )
fig.subplots_adjust ( right = 1 )
fig.subplots_adjust ( left = 0 )`
I am not completely sure if this is the kind of thing you're looking for , but ` legend() ` inside ` matplotlib.pyplot ` may be able to help you out .
matplotlib xtick labels not aligned
The documentation clearly states that an ` matplotlib.axes.Axes ` instance will be returned .
You may want to call ` fig.tight_layout() ` before calling ` plt.show() ` .
` plt.show() ` displays : #CODE
Note that ` realpath ` and ` abspath ` do not expand the ` ~ ` : #CODE
Try plt.clf() .
The answer is in the api docs of the imshow command [ 1 ] #CODE
imshow takes an optional parameter cmap , which controls the color mapping .
I am new to ` python ` and ` pyplot ` .
In the beginning it says there is a ` class matplotlib.figure.AxesStack ` , and then
try ` fig.get_axes() `
Or maybe the reference to ` AxesStack ` is just hidden somewhere internally in the ` fig ` object ?
python pyplot.quiver : Scaling of two superimposed vector fields
matplotlib - plt.figure() freezes
Using ` plt.pcolormesh ` #CODE
The problem is that meshgrid won't work apparently because the arrays are too big .
Now meshgrid seems to work fine .
Matplotlib : how to make tight_layout independent of ticklabels
Thanks , subplots_adjust works like a charm .
It may be a problem with ` imshow ` .
See the documentation for plt.bar for more details .
This is done in the call to ` plt.bar ` as : #CODE
But I want the others legends too , which I added with ` plt.gca() .add_artist ( leg2 )`
` legends = [ c for c in ax.get_children() if isinstance ( c , mpl.legend.Legend )]` works great for me !
yes it works quite nicely but I was thinking of numpy.genfromtxt for its features .
But it is draw() not show()
( eg . set_facecolor , set_edgecolor ) .
If I pass the extent parameter to the imshow method as below ,
Otherwise , a ` MultipleLocator ` would make more sense : #CODE
This basically means you can call the set_color_cycle with None as the only argument , and it will be replaced with the default cycle found in rcParams [ ' axes.color_cycle '] .
Luckily , the new ( broader ) alternative ` set_prop_cycle ` * does * accept ` None ` still ...
` for icol , column in enumerate ( with_transaction_frame.columns ):
ax.plot ( with_transaction_frame [ col ] , label=col , alpha= 1.0 , color=mycolor )`
You can pass a color code into ` plt.plot() ` as a third positional argument .
The syntax is a little byzantine ( it's inherited from MATLAB ); it's documented in the matplotlib.pyplot.plot documentation .
You can pass this argument to ` DataFrame.plot ` as ( for example ) ` style= ' k -- '` .
ax2 = plt.gca() .twinx()
Above is the ` pyplot ` version .
plt.tight_layout() `
I have a matplotlib.path.Path object .
matplotlib colororder and twinx
This is done through calling ` next() ` on ` ax1._get_lines.color_cycle `
probably what you need is subplots_adjust .
How do I do that using Matplotlib or pyplot ?
and then pass ` levels ` as an argument to ` plt.contourf() ` .
I am trying to write mathematical expressions in ` matplotlib.pyplot ` version 1.3.1 #CODE
the middle r in plt.text is actually r_0 .
Matplotlib is not recognizing the attribute set_xdata .
Out of curiosity , is set_xdata setting the x coordinate of a single point in the line ?
( Notice that a sequence is being passed into ` set_xdata ` . )
Result without using ' ax.legend ( handles , labels )' :
Resul using ' ax.legend ( handles , labels )' :
You can also try ` plt.tight_layout() ` .
If i interject ( e.g. before set_facecolor ) #CODE
The following ` set_facecolor ` does not change anything .
Therefore , after you call ` set_array ` , the original facecolors are ignored .
I know this is possible with other variants of 2d plots , but not with triplot .
ETA : Added a call to set_facecolor on the Poly3DCollection to make it white rather than follow a colormap .
From the panda's documentation I've read that when pandas.df.plot() is executed this is also executed with gcf() .autofmt_xdate() .
disparray = sol + ( arange ( 6 ) * .2 ) [: , None ]
you could try ` matplotlib.pyplot.spy ` #CODE
The problem is that you can't call plt.show() twice .
Is it really that bad if I call show() more than once ?
ncdump indicates they are 2D variables and I suspect that the issue is creating a ` meshgrid ` from ` lat [: , 0 ]` and ` lon [ 0 , :] ` .
When I handled coordinates like lon [ 0 , :] meshgrid produced mtx_lon like ( 83 , 79 ) .
The problem was with meshgrid .
Since the latitudes and longitudes in the netCDF file were already in 2D the meshgrid was unnecessary .
This is definitely a bug in the default OS X backend used by pyplot .
I could be very wrong , but you may be able to enforce the right one by passing im into colorbar() as the mappable .
I just used an idea from [ this answer ] ( #URL ) and used ` pause() ` instead of timer , and ` pylab.draw() ` instead of ` plt.show ` , I dont know why but it worked !
matplotlib.pyplot does savefig() but not show() in python3 but works in 2.7
but show() still doesn't work . what am i missing
What about ` axs [ 0 ] .plot ( ... )` ?
there is also ` plt.sca ( ax )`
Is plt.sca ( ax ) better than plt.axes ( ax ) ?
` plt.gca ` -- ` plt.sca ` , duh
Using .mean() in numpy
My question is , what does the ` T.mean ( 0 ) .mean ( -1 )` do ?
Or you may simply want to scale the y-axis : ` ax.set_ylim ( 1e-3 , 1 )` .
Then , you just have to make sure to do ` set_data ` instead of making a whole new ` plt.plot ` call .
To vectorize or not to vectorize - that is the question
Also , it is not always necessary to vectorize everything .
There ` numpy.vectorize ` is very useful .
matplotlib imshow force colorrange
What is wrong with ` plt.show ( fig )` ?
axes.plot ( x , y , ' g^ ')
axes.plot ( x , y , ' ro ')
axes.plot ( x , y , ' bs ')`
I had issues with different backends in the past , you might want to try something like `` matplotlib.use ( " Qt4Agg ")`` .
Furthermore , ensure your LaTeX installation works , e.g. `` ax.set_xlabel ( " $x$ ")``
from matplotlib import pyplot as plt
` class MyAxes ( plt.Axes ): def next_color ( self ): ...
I am aware of pcolormesh , but that does not seem to give me the y-axis functionality I seek .
Altering increment for x-axis labels in pyplot
Isn't that what [ ` pcolor ( X , Y , C )`] ( #URL ) does ?
That works well with ` ax.set_ylabel ` .
cbar = plt.colorbar() ..
The work-around is that a ` FixedLocator ` should also be used .
@USER , in version ` 1.3.1 ` , ` ax.margins ( x= 0.1 , y= 0.1 )` raise a ` ValueError : more than two arguments were supplied ` .
The suggested ` plt.figure ( figsize =( 6 , 2 ))` or ` plt.figure ( figsize =( 2 , 6 ))` has no good results for 3d diagramms .
I already both ` matplotlib ` functions but I want one color for each variable ( red for dependent , blue for independent etc . ) while using ` plt.scatter() ` as I used above .
It seems that show() is called automatocally .
strange behavior : pcolormesh and meshgrid ( easy )
The document of ` pcolor ` : #URL
` get_yaxis() ` does nothing .
Is using PCA to reduct dimensionality a common practice for svm classification plots ?
` pyplot `
Notice how you also need to generate a ScalarMappable with ` imshow ` , as explained in the API here .
Interestingly I needed to do the above before calling plt.show() .
show() `
That solution seems to work when using plt.plot() , but not when using plt.imshow() , which is what I am using .
` imshow ` is a bit strange in this sense .
This is actually exactly what ` matshow ` does internally .
In addition to this , there is ` ax.matshow ` which you used , as well .
Nice . plt.draw() does it .
I guess I thought that was either covered by plt.show() or plt.ion() .
Also , somehow I missed the fignum argument in the doc , and that will works too with plt.matshow() instead of ax.matshow()
This may help - I have been finding that moving away from general pyplot commands is a more robust way to make things work as expected .
Pyplot is essentially a big wrapper for the object-oriented calls .
+1 to avoiding ` pyplot ` .
( Using ` savefig() ` requires us to respecify the background color . )
setting plt.text() coordinates to a variable location
Did you try ` plt.ylim() ` ?
After the ` plt.hist() ` call ?
python pyplot : how to organize the layout ?
Change the line to ` ax3 = plt.subplot ( 325 )` and it should work .
Python : Generalized Pyplot stacked bars
If you want to run the code , ` import numpy as np ` , ` import matplotlib.pyplot as plt ` and ` plt.show() ` .
Thank you @USER , I accepted your post as the answer since this triplot makes it quite easy .
import matplotlib.pyplot failing : _tkagg.pyd not found but IS in the directory of calling module
import matplotlib.pyplot as plt
So what's wring with the output of ` DataFrame.to_html() ` , which allows you to scrape the cell contents with some fairly standard HTML analysis using something like Beautiful Soup ?
to_html code is [ here ] ( #URL ) .
` plt.plot ( sorted_data , np.linspace ( 0 , 1 , sorted_data.size )`
For more information on ` patch.set_hatch ` , see this example .
Therefore we need to do it without ` .plot() ` method of ` pandas ` : #CODE
See edit , just need ` ax.twinx() .plot ( x , df.another )` .
If your ` getSeries ` returns a ` ndarray ` or ` pandas.Series ` , then this will do : #CODE
You can verify it by calling ` plt.xlim() ` both before and after the ` pandas.plot() ` call .
plt.imshow ( img , extent =[ -axe_lim , axe_lim , -axe_lim , axe_lim ] , aspect= ' auto ')
As a result , I got xaxis : 0 ...
image_size_x from the left to the rigth and yaxis : 0 ...
` set_xticklabels ` is almost always a bad idea .
/ usr / lib64 / python2.7 / site-packages / matplotlib / font_manager .
Though , it seems ` crosstab ` isn't doing the right thing ?
That's different from ` crosstab ` ?
` a = 2* np.random.sample ( 100 ) -1 ` and
` b = 2* np.random.sample ( 100 ) -1 ` .
As I understand , ` fill_between ` allows to do this only for case of two inequalities .
Found a way using a " ScalarMappable " : #CODE
` pl.gca() .set_yticks ([ 0.0 , 0.2 , 0.4 , 0.6 , 0.8 , 1.0 ])
pl.gca() .set_xticks ([ 0.2 , 0.4 , 0.6 , 0.8 , 1.0 ])` ??
( And in case you are wondering , the ` ax.plot ` stuff is equivalent to ` plt.plot ` but using the recommended object-oriented interface . )
Tkinter input for pyplot graph
I found out that ` fig.savefig ( ' image.png ' , bbox_inches= ' tight ')` solves the problem .
Here ` add_subplot ` is called with ` 212 ` .
You can do this using ` fill_between ` .
I know that the problem is because of ` plt.show() ` .
Alternatives to tight_layout()
You are running into problems because you are combining the object oriented interface for Matplotlib with Pyplot , the state-machine environment .
You can make your example work by using Pyplot in ` new_plot() ` : #CODE
or by calling draw() from IPython interactive prompt after the calls to ` new_plot() ` .
You need to create some xdata by ` np.arange() ` : #CODE
Are you just using the pyplot interface or the actual object interface ?
I'm always using fig = plt.figure ; ax = fig.add_subplot ( xxx ) , ax.plot()
By using an external TeX installation ( in which case you have ` rcParams [ ' text.usetex '] == True `) .
By using the ` mathtext ` Tex clone built into ` matplotlib `
However is showing the extents as the ndarray dimensions ( from 0 to 20 ) .
I think a similar thing can be done with the ` mgrid ` , but I've never used that myself .
can you post some code that doesn't work by ` set_position() ` . the code I posted works on my PC .
lastly , the ax.step mentioned would be used if you had used #CODE
Ah !, thanks @USER , I was using twiny() instead of just twin() .
oh , there are twinx twiny too .
( This may be the very reason why ` twiny ` fails . )
I am trying to have multiple of imshow rows in one side , and having only the colormap on the ( right ) side , without having this large white area .
I used ` matplotlib.ticker.LogFormatterExponent ( base= 10.0 , labelOnlyBase=True )` but it does not quite do the job .
This should be added before the ` set_xlim ` command .
Define aspect ratio when using twinx
my attempt to define the aspect ratio for both ` y ` -axis while using ` twinx ` ( which does not work )
How do I define the aspect ratio when using ` twinx ` ?
What you most probably want is ` GridSpec ` .
` GridSpec ` can be used to produce some quite complicated layouts .
Using imshow as you suggested seems to have solved my problem .
and when i change the imshow line to #CODE
See the documentation for ` np.transpose ` : #URL
File " C :/ Users / VAIO / test.pyw " , line 52 , in on_release
I tried ` print ' 1 : ' , self.x1 , self.y1 ` in ` on_motion ` and it gives me ` 1 : None None `
And why you have #commented out ` on_release ` attributes such as ` set_width , set_height , set_xy ` ?
` color ` , ` edgecolor ` and ` facecolor ` are passed to the ` collection.Collection ` object ` scatter() ` returns .
if not you will not be able to create the abscissa value using np.linspace ..
it is that matplotlib remembers the figures you plotted . unless you say ` plt.close() ` the figures you previously plotted are still in memory .
You can either do line = ax.plot ( x , y ) [ 0 ] or do
line , = ax.plot ( x , y ) which takes advantage of parameter unpacking .
Matplotlib draw() Method Doesn't Do Anything
I think the show() method is hanging the session until the window is closed .
I see a fraction ` ( np.cosh ( u ) **2 ) / a )` .
One thing to note is that there are two functions called ` specgram ` : ` matplotlib.pyplot.specgram ` and ` matplotlib.mlab.specgram ` .
Thus ` pcolormesh ` receives non-monotonic Y coordinates and gets confused .
I haven't realised that pcolormesh doesn't work with non-monotonic arrays ( however you can expect this from my question ) .
In Python , I can create Matplotlib Radiobuttons using code like this : #CODE
Numpy pcolormesh : TypeError : Dimensions of C are incompatible with X and / or Y
I have already tried ion() command but nothing seems to work
` plt.plot ( my_data )`
The low numbers are important , so lognormal does give a nice representation .
If you really want to mess with people , you'll need to monkey-patch ` colorConverter.to_rgb ` instead : #CODE
I know that there is ` matplotlib.pyplot.fill_between() ` with which you can build a workaround for the y-error but that does not include the x-uncertainty .
` matplotlib.pyplot.fill_betweenx() ` leads to something like :
Until now I just specify ` fontsize= ` inside an ` ax.annotate `
The only functions I have found in the docs are ` set_xlabel() ` and ` get_xlabel() ` which only operate on the string value
You want the ` extent ` kwarg on ` imshow `
By the way , the ` set_xticks ` looks a bit odd .
If you want to do a weighted fit , you can supply a weight vector to polyfit with the syntax
m2 , b2 = np.polyfit ( a , b , 1 , w=weightvector )
If you want to do a least squares fit weighted by errors in BOTH x and y , I don't think polyfit does this - it will accept a weight vector for one dimension .
If you want to do a weighted fit , you can supply a weight vector to polyfit with the syntax m2 , b2 = np.polyfit ( a , b , 1 , w=weightvector ) .
Please see the ` numpy.loadtxt ` documentation .
` plt.show ( block=True )`
You can do that with ` plt.cla() ` and ` plt.clf() `
Are you aware of ` loadtxt ` ( #URL ) and ` genfromtxt ` ( #URL ) ?
Well it is working for me ( length returned by myBoundary is the same as the length of x ) , so I can suggest to print x before and after the line : x = np.array ([ float ( x0 ) for x0 in x ]) .
` .between ` is useful .
Is there a way to pass that to ` plt.errorbar ` via ` g.map ` ?
` df.dtypes ` returns : #CODE
df = pd.read_csv ( ' my_data.csv ')
I need to quit the queue of plt.plot , or something like this !
Plt is matplotlib.pyplot I suppose .
So you probably want to do ` plt.close ( fig )` instead .
Try removing that extra line , moving ` pp.close() ` to somewhere after the loop , adding ` plt.close ( fig )` inside the loop and see if that fixes your problem .
Should i write something else instead of ' pyplot ' ?
Check wether ` plt.isinteractive() ` is True .
Calling plt.show ( block=True ) helped showing the chart once for me .
As a side note you can shorten these statements a bit by using the following import command ' import matplotlib.pyplot as plt ' rather than ' matplotlib as plt '
I have a problem when using ` hist() ` .
I thought I'd give ` hist() ` a try : #CODE
I am not aware of a keyword in ` plt.subplots ` that does this , though .
maybe you need to call ` tight_layout() ` if the ticks are then out of the frame #CODE
` plt.figure ( figsize = ( 20 , 6 ))` .
to be consistent with ` imshow ` you want ` extent =( -3 , 3 , 3 , -3 )`
I am using the pandas hist() method with the ' by ' option , specifically : #CODE
df [ ' plotvar '] .hist ( by= ' Zone ')
I could do it just using plt.axvline in matplotlib , but not sure how to do it when I've made the original plots using pandas .
and then numpy , pyplot and scipy are included in pylab .
Are you using ` plt.hist ( df3 [ C '])` ?
For example , instead of ` plt.ylabel ( ' my_y ')` you do ` ax1.set_ylabel ( ' my_y ')` .
what does typing df2 [ ' C '] .values into an ipython session give you ?
If you don't care what they are and just want the surface , generate a meshgrid of integers in the given length : #CODE
Is plt pyplot ?
Usually people do from matplotlib import pyplot as plt but I'm not sure what your convention is .
i.e. points = plt.scatter ( whatever )
Non blocking pyplot GUI for GDB python pretty printer
ax.cla() was a large part of the answer .
Can you explain ( in a more simpler way ) how does .argsort() works ?
I used import ` matplotlib.font_manager as fm `
Nevermind , I typed matplotlib.pyplot.show() instead of ax.show() and it works out !
You should not mix the matlab like syntax like ` plt.axis() ` with the objective syntax .
python 2.7.6 and matplotlib.pyplot AttributeError : showMaximized
The distribution of the three input variables is not regularly spaced , but I think I already solved that part using the griddata method .
matplotlib.pyplot hist2d using hammer projection
on the page you have to search for gridspec and subplot2grid
subplot2grid is a very nice feature for more complicated layouts .
Is there anything that works like the .remove() method ?
[ tried .remove() and nothing happened . ]
You can control this behavior with ` np.seterr ` .
Re-seting the limits is not what I'm doing with : plt.xlim ( -1 , 1 ) , plt.ylim ( -1 , 1 ) ?
Try using ` ax.set_xlim ` and ` ax.set_ylim ` .
Right below calling ` scatter() ` .
try ` x , Temp = numpy.loadtxt ( filename , unpack=True )`
How to create grids in xkcd plots
` from matplotlib import pyplot as plt
x = np.linspace ( 0,10,200 )
plt.xkcd()
plt.plot ( x , np.sin ( x ) , zorder=3 );
plt.grid ( True , lw=1 , zorder=0 )
plt.show() `
It even said ' FormatStrFormatter ' doesn't exist !
from matplotlib.ticker import FormatStrFormatter
a ` plt.tight_layout() ` before ` plt.show() ` might help
This needs be inserted before ` plt.show() ` .
` axvline ` and ` axhline ` would be a better fit in this case .
I didn't know about this behavior of the ` imshow ` .
` left = 0.1 bottom = 0.03 width = 0.3 height = 0.3 ` with ` imshow ` :
For the ` imshow ` problem , try adding the keyword ` aspect= ' auto '` to ` imshow ` .
` set_sizes ` method on ` PathCollection ` .
@USER ` errorbar ` will actually do this
this can be done with ` errorbar `
This can be done with ` errorbar `
this can be done with ` errorbar ` !
Outlier removal in pyplot
File " C :\ Users\Ken Preiser\Anaconda\lib\ site-packages \matplotlib\ cbook.py " , line 1439 , in safezip
matplotlib.pyplot , numpy and scipy are included in pylab
matplotlib - imshow ' extents ' definiton killed plt.text
You can check your limits with ` plt.gca() .get_xlim() .
are you using ` ax.fill_between ?
from matplotlib import pyplot as plt
` plt.xlabel ` , ` plt.title ` , etc . are functions you call , not attributes to be assigned to .
` plt.xlabel ( " Example x ")` .
I want to change xdata of a Line2D in matplotlib , but I have problem that when I change xdata of one line xdata from the other line changes too .
Is it really possible for different objects of Line2D .
Anyway , axes.plot() should make copies , IMHO .
Maybe ` numpy.interp ( x , xp , fp , left=None , right=None )` can help you
LINE 4 : plt.show() ` is this the best practice will this always guarantee my labels and nodes will be aligned ?
fig.legend ([ line1 , line2 ] , [ ' series1 ' , ' series2 '] , bbox_to_anchor =[ 0.5 , 0.5 ] ,
I think it has something to do with the output of ``` matplotlib.get_backend() ``` : ' #URL , but not sure how to change the inline .
` ax.tick_params ( axis= ' z ' , pad=50 )`
The ` arange ` , unlike ` linspace ` , allows for a fixed increment ( the third input argument ) .
In a discrete time-series graph , I have tried replacing ` ax.plot ( x , y )` by ` ax.vlines ( x , y )` :
How does imshow handle the alpha channel with an M x N x 4 input ?
I don't think that's quite right , just because you don't see the same thing if you do ` ax.imshow ( d [ ..., : -1 ]] , alpha= 0.3 )` .
Also , did you install the same versions of Python , numpy , etc .?
Have you tried using ` ax.plot ( ax.get_ylim() , ax.get_ylim() )` ?
This works : ` ax.plot ( ax.get_ylim() , ax.get_ylim() )` .
For it to work in general , try doing ` ax.plot ( ax.get_xlim() , ax.get_ylim() , clip_on=True , scalex=False , scaley=False )` .
AxesSubplot has no attribute hist2d - Matplotlib
` hist2d ` is a relatively recent addition .
for label in legend.get_lines() :
for label in legend.get_texts() :
Thanks @USER Kington , it worked after using ax.get_legend() .
Drawing only one triangle with RegularPolyCollection .
` mu = np.loadtxt ( ' my_data / corr.txt ')` #CODE
Try ` usevlines=False ` and setting the parameters you want in ` acorr `
works for me : ` acorr ( x , color= ' r ' , linestyle= ' - ' , marker=None , usevlines=False
I'm trying to change the opacity of a tripcolor garph .
i think get_value should be getvalue()
The other issue with ` get_window_extent ` is that it depends on the renderer used .
Even if I do plt.show() I cannot see the graph .
I tried cbar = plt.colorbar()
Try adding ` matplotlib.rcParams.update ( { ' figure.autolayout ' : True} )` when you import matplotlib instead of using ` plt.tight_layout() ` .
` plt.show() ` with parens
Here's an example of how you can display multiple plots side-by-side below a larger one using Gridspec : #CODE
I could change the alpha on set_bad , but that gives me a non-preferred color of grey .
Just change the color in set_bad to anything other than ' k ' ( i.e. black ) .
` data={key : tuple ( zip ( np.linspace ( 0 , 1 , c_array.shape [ 0 ]) , c_array [: , i ] , c_array [: , i ]))
The ` fps ` argument of ` animation.save() ` would only control the speed of the video .
You are missing the ` save_count ` keyword on ` FuncAnimation ` .
` ax1 = fig.add_subplot ( 121 , projection= ' 3d ')`
Have you tried using alpha= in imshow instead ?
What you want to do is create a ` ScalarMappable ` which you can create with a ` cmap ` AND a ` normalizer ` which sets the range .
There's no need to explicitly make a ` ScalarMappable ` instance .
Adding hatches to imshow - Matplotlib
One alternative , by the way , would be another imshow / pcolor with alpha transparency .
PyPlot reverse y-axis and logarithmic
Is there a way to both reverse the y-axis with ` PyPlot ` and make it logarithmic ?
There are some missing modules : [ ' matplotlib.patches ' , ' matplotlib.path ' , ' matplotlib.pylab ' , ' matplotlib.pyplot ']
However , I am getting a static wedge , for a reason beyond my vision .
You are right Wedge doesn't have radius .
You'd have to do the same thing for the ` errorbarlines ` , and since these are a tuple of ` LineCollection ` s , you would need to pass a sequence of ` ( x0 , y0 ) , ( x1 , y1 ) , ...
( xm , ym )` to the ` .set_segments() ` method .
Up to now , the solution for the ` errorbar ` updating in ` matplotlib ` is truly non-trivial , hope it be much easier in the future versions .
Funny , I was trying df.groupby ( ' GENDER ') .count() .plot() before I saw your answer .
It easiest to control this using ` ax.ticklabel_format ( ... )` .
But even then , ` imsave ` does not work .
scipy also has an imsave
Note , that this will not work with imshow as per the example you gave .
.exe .log : #CODE
Corrected typo about ` set_title() ` .
Oh , sorry , I meant ` ax.set_title() ` .
You can change the defaults with the following fields in the ` rcParams ` dictionary : #CODE
Matplotlib figure.savefig() tkinter
The are of course other ways to do it , but I think ` pd.to_datetime ` is the most concise .
df.info() is :
dtypes : float64 ( 1092 )
and `` df.T `` doesn't work for you ?
That ` % ` ** isn't ** for modulus - see #URL It's effectively `" {0 :d }{1 :d } " .format ( a in set_1 , a in set_2 )`
That is to say that uncommenting the ax.contourf ( ... ) line causes the following exception : #CODE
what if you do : ` ind = np.arange ( data.shape [ 0 ]); X , Y = np.meshgrid ( ind , ind , copy=False )` instead ?
isn't it the same as matplotlib.pyplot.ylim ?
Yeah , YAxis will not help you there .
Have you tried fig.colorbar() ?
sns.FactorPlot is throwing me a TypeError when it tries to set_title .
I have two artists that are both pickable and are non-overlapping to begin with ( " holes " and " pegs ") .
With that pegs are pickable only when they're not superposed with a hole .
The FormatStrFormatter can accept other sprintf-like formatting options .
You can do this with ` plt.xticks ` .
You could also do something like ` plt.xticks ( ts1 [ 0 :: 12 ])` .
Note that ` df.filter ( regex= " a ")` is equivalent to ` df [[ ' a1 ' , ' a2 ' , ' a3 ' , ' a4 ']]` #CODE
does that work with imshow as well ?
@USER instead of ` ax.plot() ` write ` ax.imshow ( ... )` .
from scipy.interpolate import griddata #CODE
The ` matplotlib ` solution there is essentially the same as using ` pcolor ` , but the 3D arithmetics is carried out by ` matplotlib ` .
Labels are unreadable both in ` fig.show() ` as well as in the generated PNG .
Since it's very long , I used value_counts() so it will fit on this page .
I like using linspace to control buckets .
I'm not exactly sure how I didn't stumble onto just trying a plain-old-bar graph on the value_counts() .
pyplot not working in python 3.3 windows
matplotlib.animation : script works under Windows , and works under Linux for short animations , but hangs indefinitely for longer animations ?
I ran into this issue as well and found I needed to understand the concept of matplotlib backends , how to enable a specific backend , and which backends work with FuncAnimation .
plt.plot ( x , y )
plt.plot ( x , y )
plt.show()
` plt.gca() .invert_yaxis() `
I'll try the set_visible
Tried various combinations with ` set_visible ` .
Change FaceColor and EdgeColor of Matplotlib Streamplot Arrows
I tried to do it using ` c.arrows ` , editing ` c.arrows.set_edgecolor ` , ` c.arrows.set_edgecolors ` , ` c.arrows.set_facecolor ` and ` c.arrows.set_facecolors ` and nothing happened , even when I run ` plt.draw() `
It seems that ` streamplot ` does two things when it creates the arrows :
I've also tried loading it with matplotlib.image.imread and with PIL.Image.open to the same effect .
I switched the rendering backend using matplotlib.use ( " WX ") .
Not certain what the cause of the problem was , but I switched the backend to wxPython and images loaded with misc.imread or matplotlib.image.imread worked fine .
The same way I now have ` plt.connect ( ' button_press_event ' , self.on_click )`
I would like to have something like ` plt.connect ( ' each_five_seconds_event ' , self.on_timer )`
How does this integrate with what I already have ( plt.connect() stuff ) ?
ax = fig.add_subplot ( 111 , projection= ' 3d ')
` from matplotlib.cbook import _string_to_bool `
( Pdb ) np.dot ( trang_data [ ns.index ] [ -1 ] , np.add ( pctresults [ 0 ] , 1 )) .shape
I know ` imshow ` is more proper for my case and it has already worked successfully .
There is also ` set_bad ` which define what in does for ` np.nan ` and ` np.inf ` iirc .
@USER thanks for the suggestions , have added them as well as an example of ` matplotlib.colors.Normalize ` .
I've tried using matplotlib's ` plt.imshow() ` as well , which has the exact same result .
It is matplotlib.pyplot , I have reedited .
X = 10* np.random.rand ( 5 , 5 ) #CODE
And you can change the ` __class__ ` of the ` PathCollection ` object to ` DataPathCollection ` .
AttributeError : ' module ' object has no attribute ' get_ylim '
What is the proper way to call ` get_ylim ` ?
Do not import ` matplotlib.axes ` , in your example the only import you need is ` matplotlib.pyplot `
` get_ylim() ` is a method of the matplotlib.axes.Axes ` class ` .
after each plt.figure() , a new figure_manager is going to be generated .
As @USER Sharp mentioned plt._backend_mod.new_figure_manager_given_figure ( plt.get_fignums() [ -1 ] +1 , fig1 ) will create a new figure_manager for the fig1 .
So it cannot be closed by plt.close() , except directly call figure_manager.destroy()
This way plt.close() behaves as expected .
" ax.tick_params ( axis= ' x ' , pad=10 )" solved my issue .
How to keep constant spacing after ` tight_layout() ` ?
Note that ` tight_layout() ` is being used as well , so there must be a way to do it consistently .
It is also not linked to the question since what's mentioned there doesn't work with ` tight_layout() `
I have found that as well :) The only reference to " edgecolor " in matplotlib.text is talking about the edgecolor of the ` bbox ` which unfortunately is not what you want .
Answer to this question explain the numbers in ` add_subplot ` .
Thus the option of vector images provided by * pcolormesh * seems perfect .
It seems neither ` LinearSegmentedColormap ` nor ` ListedColormap ` can do this .
I think you can not do it in the same kernel as , unfortunately , you can't switch from inline to qt and such because the backend has already been chosen : your calls to ` matplotlib.use() ` are always before ` pylab ` .
If you want to have the automatic scaling offered by the ` tight_layout ` , then you'll have to do some maths of your own : #CODE
ax.annotate ( np.round ( p.get_height() , decimals=2 ) ,
TL ;D R ; ` ax.axvline ( x )` and ` ax.axhline ( y )`
ax.text ( 25 , 0 , " $20^{\circ}C$ " , rotation= ' 90 ')" code to let the reference line label 20 ?
Matplotlib errorbar not centered on marker
@USER thank you for your answer , I've tried with the date2num but I still have the same problem . and I've read the answer to the question which you have dupplicated my question , but it didn't help .
It looks like ` pandas.DataFrame ` has a ` to_latex ` method .
The output of ` to_latex ` is IIRC for the ` booktab ` package .
( I guess LogNorm() does that ? )
import matplotlib.pyplot as plt #CODE
But Yo might have used pylab interface , while I posted a solution tested with pyplot interface .
` ndarray ` is the class underlying numpy arrays .
The ` ndarray ` docstring says :
The convention is ` import matplotlib.pyplot as plt ` .
how to speed up imshow matplotlib ?
What you are looking for is ` imshow ` : #CODE
You could have reproduced the same phenomenon by replacing the 248 MB file by ` np.random.random (( 1000,100 00 ))` .
I know there is a ` colorbar() ` which can present the color range , but it is not satisfied .
` ax.errorbar ` returns three things :
Yes , there is , ` twinx ` .
I am trying to write a program that has a pyplot ( as in matplotlib.pyplot ) within a Tkinter GUI which can be updated .
After digging a little bit longer i found a satisfying answer myself , not touching the colormap but rather using optional inputs to ` pcolor ` ( see below ) .
` pcolor ` offers the optional input ` vmax ` and ` vmin ` .
Be sure it's executed before you import ` pyplot `
streamplot does not work with matplotlib basemap
Something like frames = np.arange ( 1 , 10 , 0.1 )
0f} ' .format ( height ) and that did the trick .
plt.gca() .lines [ 0 ] .get_data()
You have several locators ( for example : DayLocator , WeekdayLocator , MonthLocator , etc . ) read about it in the documentation :
I do this with imshow in 2D but I do not know how to make it in 3D .
and ` can_zoom() : ` #CODE
The reason that ` can_pan ` and ` can_zoom ` return true is that this functionality does not currently exist .
If ` J ` is just ` nan ` s , then the problem is in the way you're generating ` J ` and not the ` contour() ` call .
pandas matplotlib barh bars print bottom to top but label print top to bottom
You might want to define it differently using ` plt.hist ([ 1 , 2 , 3 ] , bins=3 )` .
So the later call to ` ax.legend() ` doesn't work correctly .
` import matplotlib.pyplot as plt
plt.show() `
If you import pyplot beforehand #CODE
Misplacement of the ticks on the secondary x-axis in pyplot
I am using twiny() to create the secondary x-axis but somehow the labels on it are not placed properly .
So the code was like plt.imshow ( img1 ) .
Per the ` help ( plt.imshow )` docstring :
cmap : ` ~ matplotlib.colors.Colormap ` , optional , default : None
In [ 2 ]: matplotlib.get_backend()
In [ 3 ]: import matplotlib.pyplot
----> 1 import matplotlib.pyplot
35 from matplotlib.gridspec import GridSpec
36 from matplotlib.image import imread as _imread
38 import matplotlib.colorbar as cbar
9 import matplotlib.artist as martist
36 import matplotlib.ticker as mticker
---> 38 import matplotlib.tri as mtri
----> 9 from .triangulation import *
10 from .tricontour import *
In this case ` show() ` does nothing .
pie() got an unexpected keyword argument ' startangle '
Perhaps try ` ax.xaxis.set_major_formatter ( matplotlib.dates.DateFormatter ( ' %I ' , ' US / Eastern ')`
You should try to stick with one interface or the other ( either pyplot or the object-oriented interface ) .
I was hoping for something much simpler , like , " plt.plot() .continueIndef " or something of that nature ?
The following uses ` FormatStrFormatter ` : #CODE
Possible duplicate of [ Getting xkcd plots using matplotlib ] ( #URL )
Your squashed graph comes from this ` fig.add_subplot ( maxLen-1 )` .
` ax.spines [ ' left '] .set_position (( system , poisition ))`
import matplotlib.pyplot as plt #CODE
Apparently ` plt.xlim() ` does the job , I will try and let you know .
it's ` ax = plt.gca() ; ax.get_xlim() `
1 and what ` matplotlib.colors.Normalize() ` does that's different from a plain numpy normalization ala :
As far as I know mainpoly was calculated correctly using the Polygon() method .
Im not really sure how to proceed to debug the instance " mainpoly " -I read the matplotlib.patches documentation but it is difficult to understand .
I think that's basically what's going on here with the way you're using ` plt.plot ` .
Actually for that specific example you can just do ` g.map ( plt.axhline , y=2 )` .
After the call to draw() I ask the user to press a key .
Did you try with plt.show ( block=False ) ?
Commenting out the fill_between calls generates a graph nicely
What is the purpose of np.r_ ?
I've had some success with the interpolation using matplotlib.mlab.griddata .
Imshow is in my opinion a bit stupid and displays things top-down instead of bottom-up , that is why .
When I run what you have above Python claims that ` label ` is not a keyword argument for ` plt.colorbar() ` .
plt.plot ( list_of_dates , y , linewidth= 3.0 )`
pyplot static color colormap
I'm using the following code to generate a pyplot with a colormap : #CODE
I've tried using something sharex=ax1 and sharey = ax1 in the subplot2grid call to no avail .
The ` matplotlib.offsetbox ` module has a number of methods to handle things like this .
Additionally , ax.set_xticks only allows transformations from one rectangular coordinate system to another rectangular coordinate system .
Matplolib / pyplot : How to avoid rescaling ?
So I read it in chunks using pandas read_csv() .
following your suggestion I tried ` plt.figure() for i in xrange ( 2 ): plt.boxplot ( df.ix [: , i ] .values )` .
@USER I try ` plt.figure() ; ax = plt.subplot ( 111 ); for i in xrange ( 2 ):
ax.boxplot ( df.ix [: , i ] .values , positions =[ i+1 ])` .
ok , the secret ingriedent was the ` ax.set_xlim() ` .
How to hide < matplotlib.lines.Line2D > in IPython notebook
Consider using [ ` numpy.loadtxt `] ( #URL )
File " / usr / lib / python2.7 / dist-packages / numpy / lib / npyio.py " , line 690 , in loadtxt
` matplotlib.colors.colorConverter.to_rgba ( ' mediumseagreen ' , alpha= .5 )`
just to clarify a couple typos : ` matplotlib.colors.ColorConverter() .to_rgba ( ' mediumseagreen ' , alpha= 0.5 )`
With gridspec it would not be hard , no .
As others said , using ` gridspec ` can do it for you .
Just a side note , why don't you do something like ` a += np.ones ( a.shape )` ?
@USER changing ` plt.scatter ` to ` ax.scatter ` doesn't seem to have an effect .
3 ) what you implemented as ` func ` is not a poisson
I would like to make " R Lattice " like plots on it using conditioning and grouping on the categorical variables .
However , I would like the layout to be generated from the number of levels in the categorical conditioning ( or " by ") variable ( s ) .
I am trying to embed a pyplot in a tkinter canvas .
I am opening a matplotlib pyplot in a tkinter window with the below code .
I've tried commenting out each of the plt.plot ' s but that didn't help .
You can number figures -- i.e. , plt.figure ( 1 ) -- and then work on them .
Don't even import pyplot .
I am trying to animate different objects in the same graph using pyplot's funcanimation .
Could you give a [ minimal example ] ( #URL ) including imports , etc .?
numpy.random.rand ( d0 , d1 , ..., dn )
I have also tried plt.pcolor ( dat3 ) with weird graph .
df.Date = df.Date.apply ( lambda x : dt.datetime.strptime ( x , ' %Y / %m / %d ') .date() )
I used matplotlib.colors.LinearSegmentedColormap as suggested in cookbook matplotlib .
Is it ok to call ` sns.set_palette() ` after calling ` plt.subplots ` ?
Can't we do this without using pyplot and only using pylab and pdf_backend ?
` the_table = plt.table ( cellText=cell_text ,
You need a call to ` axhline ` : #CODE
You are mixing the pyplot interface and embedding .
It's the ` ax.cla() ` that is the culprit ...
` ax.set_xlim ( left= ..., right= ... )`
` ax.set_xlabel ( ... )` and ` ax.set_ylabel ( ... )`
However , I found that ax.set_xticklabels (( ' my_fancy_names ')) can also do the trick .
ax.plot ( *zip ( *poly ))
The only thing I can't have properly are the vertical bars of a ax.errorbar .
I call it with lineerr , ( bottoms , tops ) , vers = ax.errorbar ( etcetcetcetc ) .
The value of plt.isinteractive() is false even after plt.ion() .
You can do differently sized plots using GridSpec .
` arange ` is not good for that .
This is than done ` plt.gca() .add_artist ( KIRKULOS [ ct ])` .
With ` matplotlib.ticker.FuncFormatter ` : #CODE
matplotlib FuncAnimation frame interval
I am currently experimenting with the matplotbib FuncAnimation and try some exmaples .
what markersize is for an ax.plot ( ..., ' o ' ,... ) point .
I have a program that generates an interactive matplotlib graph , using the .ion() call to enable that behaviour .
I tried ` ax.set_xticks() ` and ` ax.set_xticklabels() ` , and they seemed to be ignored ...
PathPatch object in julia with PyPlot
I was trying to reproduce this example from the matplotlib website using the PyPlot package for Julia .
As far as I know , the PyPlot is essentialy the matplotlib.pyplot module , so I imported the other modules of matplotlib that I needed ( with the @USER macro ):
@USER matplotlib.path as mpath
@USER matplotlib.patches as mpatches
So , there are incompatibilities of modules from matplotlib different to pyplot for Julia since the expected objects ( types ) are taken as functions .
uplim = np.zeros ( x.shape )
@USER - thanks , the add_axes is what I was looking for .
This can still be done using ` add_lines ` .
An approach could be to derive from ` patches.Patch ` .
Python memory issues with matplotlib.animation
displayed using ` plt.ion() ` through ` plt.draw() ` and
` ax.set_xticks ( x )` , if you're using the object-oriented interface like the OP .
a call to ` fig.get_size_inches() ` gives ` [ 8 , 7.475 ]` .
then a call to ` fig.get_size_inches() ` gives ` [ 6 , 7.475 ]` .
Try using ` pyplot.imshow ` : #CODE
ginput seems to work with figure() but not Figure() .
You can specify the levels however you want , and you could just , say , pass in ` levels= np.arange ( -5 , 6 )` to both .
So I used the fontManager and did : #CODE
matplotlib FuncAnimation issue
I also had the same problem using plt.ion() combined with plt.draw() .
` .set_text() ` method returns ` None ` .
Actually , what happens if you do ` matplotlib.style.reload_library() ` and then ` matplotlib.style.available ` ?
[ ` numpy.linalg.lstsq `] ( #URL ) might help you there .
` polyfit ` would work #CODE
Unsurprisingly , polyfit uses lstsq in the end ( line 1377 ) ...
GraphicsContextBase instance has no attribute ' get_sketch_params '
get_ylim()
and see my answer for how to do this without pyplot
To do this with out using the ` pyplot ` interface : #CODE
Alternatives to matplotlib.pyplot.annotate ?
Now ` ax ` looks like this with a ` plt.show() ` command :
This version includes ` xkcd ` .
Possible duplicate of [ Getting xkcd plots using matplotlib ] ( #URL )
In this case the minimal code is ` x = np.arange ( 7 )` ` x < 5 and x > 2 ` so it is not a huge burden .
In principal you can do this programmatically with ` plt.figure ( figsize =( 20 , 2 ))` .
plt.plot ( x , y );
The suggested import scheme is ` import matplotlib.pyplot as plt ` and ` import numpy as np ` .
does work with categorical labels . outside the faceting idiom .
` ax.set_xlabel ` and ` ax.set_ylabel ` don't work ?
Maybe gridspec would work for you ?
I am trying write a program for 1D FDTD wave propagation , everything is fine except the interval keyword argument of FuncAnimation .
fill_between not filling consistently
I see this example page on how to do it , but it includes a plt.figure() statement which I don't have in my code .
FuncAnimation goes past the frames argument
How to speed up plt.savefig
I am calling plt.savefig like this : #CODE
For some reason this required an explicit ` dtype ` .
Notice that you have two plots , so you have two plt.show() .
Your immediate problem is ` numpy.putmask ` .
AssertionError in matplotlib's tight_layout()
` rcParams ` output : #CODE
nothing spits out from rcParams ?
Is there a straightforward way to do this using ` df.plot() ` ?
Pandas ` DataFrame.plot ` is nice .
You could just reoder your columns like : ` cols = [ ' col4 ' , ' col2 ' , ' col1 ' , ' col3 '] df = df.ix [: , cols ]` see : #URL
I am trying to follow a MATLAB example of meshgrid + interpolation .
File " C :\ Python27\lib\ site-packages \matplotlib\ mlab.py " , line 2619 , in griddata
Is there a benefit to doing this in scipy's griddata() instead ?
( b ) scipy's griddata has more options than the one included in matplotlib .
However if i do matplotlib.pyplot as plt i am getting this following errors :
Waht I am trying to do is to have each of the 4 points in the errorbar chart have a different color .
From the ` plt.boxplot ` documentation :
` matplotlib.pyplot.violinplot() ` says it returns :
Methods of ` PolyCollection ` s include :
` set_color ( c )` which sets both the facecolor and edgecolor ,
` set_facecolor ( c )` and
I'd guess it's probably because the operation creates so many bits ( the aforementioned ` PolyCollection ` along with 5 other ` LineCollections `) , that additional arguments would be ambiguous .
patch.set_color ( color )` did the job !
Why doesn't fill_between work here ?
I am using Anaconda 2.7 and my ` fill_between() ` attempts are coming up fruitless .
@USER , Try ` df = pd.read_csv ( ' D1.csv ' , quoting=2 ); print df.head() ` .
Streamplot not working outside of the mgrid example
When I naively plug these into streamplot , i.e. #CODE
I can make a streamplot if I construct coordinate variables from mgrid , as in the example ( bounds modified here ) #CODE
change the positions and the labels for clabel
I would like to change the labels for ` clabel ` to ` label =[ r'1 $\sigma$ ' , r'1 .5 $\sigma$ ' , r'2 $\sigma$ ' , r'2 .6 $\sigma$ ' , r'3 $\sigma$ ']` .
try calling plt.ion() before the while loop .
try ` plt.draw() ` , ` plt.show() ` may not be the best option
plt.ion() not working .
@USER , that works for the ` ax.plot ` thing , but what about ` ax.scatter ` ?
stackplot in matplotlib 1.4
The demo ` stackplot ` code fails for me since upgrading to matplotlib 1.4.0 It works with 1.2.1
MatPlotLib uses its own typesetting framework ( MathText ) .
Your system's LaTeX rendering can be enabled by , ` rcParams [ ' text.usetex '] = True ` .
Adding the following line before the ` plt.show() ` #CODE
You need a ` plt.pause() ` to give the gui a chance to re-draw itself .
Turn hist2d output into contours in matplotlib
cm = plt.set_cmap ( ' Blues ') which I have now updated in my original code .
You need to pass the colour scheme you want as an argument to ` imshow ` .
Yes , the set_cmap method is perfect for what I need , ty .
I tried putting the ` plt.show() ` outside the loop , it didn't work .
I guessed that ` joint_kws ` accepts arguments from ` pyplot.hexbin() ` , so when I tried to tune the appearance with arguments from there , it worked fine : #CODE
Closing a pyplot window in wxpython with Ctrl-W causes a segmentation fault
See ` numpy.correlate `
The extra thin line is coming from the ` errorbar() ` call .
I typically have them in the ax.plot line .
file_data = np.loadtxt ( ' Input_File ')
File " / usr / lib / python2.7 / dist-packages / numpy / lib / npyio.py " , line 796 , in loadtxt
I did try ` ax.set_xticklabels ( label )` but that does not seem to work .
How about using ` interpolate() ` : #CODE
You'd be better off going with ` imshow ` or one of the ` pcolor ` variants like @USER suggests .
Basically , ` %matplotlib inline ` uses its own ` rcParams ` .
` inline ` cell magic uses a different ` rcParams `
Do you have ` rcParams [ ' text.usetex '] = True ` ?
You should be doing ` import matplotlib.pyplot as plt ` and ` import numpy as np `
I realized that the problem was my ` meshgrid ` , so I corrected both ranges ( ` x ` and ` y `) and used proportional steps for ` np.arange ` .
Note that ` X , Y = np.meshgrid ([ 1 , 2 , 3 , 4 ] , [ 5 , 10 , 15 , 20 ])` will give the same ` X ` and ` Y ` as above but more easily .
I have tried df.hist() but it is not working for me .
I've done problems like this a million times in Spyder using ` imshow() ` .
You can do that using ` np.genfromtxt ` with the ` usecols ` parameter to specify the desired columns .
np.trapz .
@USER The pyplot import is typically done as ` plt ` , not ` pl ` .
Matplotlib greek symbols differ in show() and savefig()
` plt.xlabel ( u'Wavelength ( \u03bc m )')`
` plt.xlabel ( r'Wavelength ( $\mathrm{\mu}$m )')`
import matplotlib.pyplot #CODE
` run_x = np.r_ [ self.line.get_xdata() , new_x ]
run_y = np.r_ [ self.line.get_ydata() , new_y ]` and
Since ` Pyplot ` handles ` datetime ` objects for x-axis , I was expecting the ` datetime.timedelta ` to be recognized and handled for width , and I'm surprised it isn't .
It is converting those line objects to strings , which gives ` Line2D ( ... )` .
Python / PyPlot- How can I specify the x / y-axis on plt.imshow ?
The solution I'm trying to work towards is getting the ` plt.contourf ` syntax to work for ` plt.imshow ` .
I suspect the answer will be meshgrid .
imshow.set_data() not working for FuncAnimation
The workaround seems to be using ` %config InlineBackend.close_figures = False ` and using ` plt.savefig ( ... )` ( answer from here ) .
matplotlib changing line color with rcParams
As mentioned in #URL , it has no affect on plot()
# lines.color : blue # has no affect on plot() ; see axes.color_cycle
There is a ` ticker.SymmetricalLogLocator() ` , which may be the solution , but it doesn't seem to have much documentation .
A workaround is to call ` to_pydatetimes ` : `` plt.plot ( df.index.to_pydatetimes() , df.RandomValues )`` .
You probably meant ` to_pydatetime() ` ( without ' s ' , same typo in your answer below ) , then it works great .
You could shorten it a smidge with ` df [ ' A '] [ df [ ' weekend '] == ' yes '] .plot ( style= ' ro ')` which is a bit more readable ( IMO ) but still , nice self-answer .
+ " plt.plot ([ " + d.x1 + " , " + d.x2 + "] , [ " + d.y1 + " , " + d.y2 + "] , ' k- ') \n "
On another computer ( matplotlib 1.3 ) it does not continue the code that follows ` plt.show() ` after I click the appropriate part of the window .
Instead , when I quit my GUI , it then decides to run the code that follows ` plt.show() ` .
I do know that if I turn ` block=False ` in ` plt.show() ` , the code will run but I cannot build my line , so I have a feeling it might be related to this .
` plt.ion() ` is also supposed to switch modes though I haven't tested it .
I've tried various combinations of ion() , ioff() , plt.show() , plt.draw() , but haven't succeeded .
I have experiemented with turning interactivity on and off via ` plt.ioff() ` , but to no avail .
Maybe I got something wrong with the BoundaryNorm ?
And you should define the vmin / vmax arguments of pcolormesh .
You can only ` fill_between ` two curves not four .
I feel like there might be a solution hidden somewhere in hexbin or RegularPolyCollection .
@USER : Did you try the other way : plt.gca() .get_yaxis() .get_major_formatter() .set_useOffset ( False )
It should be this way : import matplotlib.pyplot as plt
Another way is meshgrid
By design , a surface is a 2D-entity , here parametrised either by in [ R , u , v ] or [ X , Y , Z ] coordinate system , and due to the ease of [ R , u , v ] analytic description of a sphere surface , the meshing started in ` [ u , v ]` -grid produced by a pair of ` .linspace() ` methods , whereas remained ` R=const=10 ` .
does ` plt.title ( loc= ' left ')` work ?
@USER The lack of plt.show() was somehow tackled in [ this issue ] ( #URL ) , you might address your complaints there .
It would be far better to do ` fig , [[ ax1 , ax2 ] , [ ax3 , ax4 ]] = plt.subplots ( 2 , 2 )` .
import matplotlib.pyplot as plt
plt.plot ( x , y )
plt.show() `
I should mention that switching ` plt.show() ` for ` plt.savefig ( ... )` works !
It seems that this argument should be passed as a colormap to ` imshow ` but in my case it seems a bit of an overkill as I don't need continuous and , more important , I don't know how to define a custom colormap ( the matplotlib doc hasn't helped me with that ) .
It might be possible to vectorize that triple loop .
Are you using pyplot or the OO interface ?
There's plenty of questions out there about pyplot / pylab :-)
56 from matplotlib import afm
58 from matplotlib import rcParams , get_cachedir
59 from matplotlib.cbook import is_string_like
plt.plot ( np.arange ( 10 ) , marker= ' + ')
plt.show() ` Version 1.4.2 . for matplotlib and 0.5.1 . for seaborn .
MovieWriter -- Command stderr :
By default ` animation.MovieWriter ` uses a ` subprocess.PIPE ` to feed the frames to the writer .
Although ` hexbin ` might be nice if you have tons of ( x , y , z ) triples with x and y being well-distributed , it comes with a lot of rather unpleasant whitespace , if they're not ( and / or too few ) .
fig.savefig ( ' test.eps ')
in iter_ticks
in num2date
Am I using ` DateFormatter ` incorrectly here ?
If you need some window averages / convolutions , check out ` numpy.convolve ` and / or convolution / window functionality in ` scipy.signal ` .
As the matplotlib.image documentation says , the funtion ` imread() ` can accept as input
@USER you read the documentation for ` imsave ` .
Apologies , I should have included the line : ` import matplotlib.pyplot as plt `
Connecting flows in matplotlib sankey diagram
I am using matplotlibs ` sankey ` functionality and have a problem with connecting two flows .
Or have you tried explicitly using a non-interactive backend , ie supplying one of the strings in ` matplotlib.rcsetup.non_interactive_bk ` to ` matplotlib.use ` ?
Accuracy " , pure_accuracy_rate , plot=False , cache=False , save=True , analysis_type= i.func_name.title() .replace ( " _ " , "
ax.scatter ( np.array ( samples [ 0 ]) [: , 0 ] , np.array ( samples [ 0 ]) [: , 1 ] , zs= np.array ( samples [ 0 ]) [: , 2 ] , c=cmap [ x+1 ] , marker
Accuracy " , pure_accuracy_rate , plot=False , cache=False , save=True , analysis_type= i.func_name.title() .replace ( " _ " , "
ax.scatter ( np.array ( samples [ 0 ]) [: , 0 ] , np.array ( samples [ 0 ]) [: , 1 ] , zs= np.array ( samples [ 0 ]) [: , 2 ] , c=cmap [ x+1 ] , marker
It turns out that ` ax.scatter ` and ` ax.plot ` specify marker sizes differently .
Using ` ax.scatter `
Using ` ax.plot `
or using ` ax.scatter ` , #CODE
In the course of searching for an alternate solution I tried to supply a customized ` matplotlib.markers.MarkerStyle ` instance to the ` marker ` input option of ` ax.plot ` and ` ax.scatter ` , but this functionality does not yet appear to be supported .
What about ` plt.axis ( ' tight ')` ?
Ok the `` plt.axis ( ' tight ')`` made it work .
Provide [ ` get_shared_x_axes() `] ( #URL ) and ` get_shared_y_axes() )` the functionality you need ?
Approach #2 - Abuse ` set_bad ` , ` set_over ` , or ` set_under `
In this case , you'll need to manually specify the ` vmin ` or ` vmax ` when you call ` imshow ` .
As a quick example of using / abusing ` set_bad ` to do this : #CODE
And using ` set_bad ` , ` set_under ` and ` set_over ` is not a very good option as I would like to have a possibility to mark different pixels with different colours , and this limits their number to 3 .
You'll need to call ` nanmin ` and ` nanmax ` if there are .
` pcolormesh ` doesn't not give an ideal output either .
I think that you can try with ` pcolor ` .
matplotlib.pyplot.contourf docs
Edit : Trying ` fig.autofmt_xdate() ` :
If we were to leave ` fig.autofmt_xdate() ` out :
I tried ` df.hist() ` .
Did you try ` plt.show() ` ?
Why are you not using ` matplotlib.pyplot ` ?
I think matplotlib.pyplot.plot and pylab.plot is equivalent .
pyplot is built-in with matplotlib , you don't necessarily need to import * pylab* , is what I meant
` nimage =d ata [: , : , middle , :] ; plt.imshow ( nimage.transpose ( 1 , 0 , 2 ))`
plt.plot ( Y )
plt.show() The X and Y arrays are as I said above .
You should consider pre-allocating ` x = np.zeros ( n_range )` , though .
ax.plot() ` with ` ax.scatter() ` ?
Matplotlib errorbar not centered on marker
or run the code with ` np.random.seed ( 0 )`
@USER Does not imshow with interpolation method as hitzg used does not include the same method as you mentioned with interp2d ?
Unless you need to see the distribution of one of your variables , i.e. either pressure or volume , you don't need ` plt.bar ` but ` plt.histogram `
I have a pandas DataFrameGroupBy object that I am ploting like so ...
I am using the following rcParams : #CODE
I am searching for a solution using matplotlib.figure , so that i wont have to edit the whole code .
What does ` ax.plot ` return ?
Why is the ` plt.show() ` not working here ?
It seems that ` show() ` is not really intended for this purpose , but rather ` draw() ` is .
I was going with using strptime and included fig.autofmt_xdate() as well .
I tried using plot.scatter as well and it did not work either
` ax.get_autoscale_on() `
` ax.set_autoscale_on() ` .
@USER I just tried callling autoscale_view() and it fixes my issue . submitted a PR : #URL
How I can make a chart type COMSOL with matplotlib using 3D ( like tricontourf in 2D ) with different planes ?
matplotlib FuncAnimation input
` set_offsets ` expects a ` Nx2 ` ndarray and you provide a tuple of two 1d arrays .
I have a small issue with matplotlib.pyplot and I hope someone might have come across it before .
` plt.colorbar ( mappable=s , ax=ax , shrink= 0.7 )`
or ` np.vstack ` , ` np.dstack ` ` np.r_ ` , ` np.c_ ` , ` np.concatenate ` depending on the desired shapes .
@USER based on some cases I've had , using ` np.concatenate() ` can be considerably faster for 1-D arrays ...
` fig.colorbar() `
Do ` df.set_index ( ' graph ') .plot ( kind= ' barh ')` .
if I want the labels to be q1 , q2 and q3 on the yaxis .
How to turn off interpolation in pcolormesh() ?
Are you thinking of ` imshow ` ?
@USER No I'm thinking of pcolormesh .
There's no need for a vector representation of each pixel , and ` imshow ` will be much faster .
You can either downgrade your python to 2.7 or if you feel its too late to do why dont you give it a try to call close() #CODE
L-shaped Gridspec using matplotlib gs.update
I've sorted it anyway , gs.update ( hspace= 0.01 , wspace= 0.01 ) along with gs = gridspec.GridSpec ( 2 , 2 , width_ratios =[ 1 , 1.5 ] , height_ratios =[ 1 , 1 ]) .
Streamplot python module " ImportError : No module named streamplot "
I am trying to run this code BUT the problem is that `" ImportError : No module named streamplot "`
Try ` matplotlib.pyplot.streamplot `
According to its docstring , ` streamplot ` doesn't have an ` INTEGRATOR ` argument .
Try removing that argument from your call to ` streamplot ` .
An early development version of ` streamplot ` had an ` integrator ` argument , but it was removed : #URL
pyplot example with QT Designer
Can someone please direct me to a working example using Designer and pyplot ?
If necessary you may want to call ` matplotlib.use ( " Qt5Agg " , force=True )`
Warning : requiring " pyplot " did not define a corresponding module .
Warning : requiring " pyplot " did not define a corresponding module .
then i enter this : imshow ( m , cmap= " RdGy " , extent =[ - 1.5 , 1.5 , -1 , 1 ])
You provide some hints , for example , ` fig.add_axes ([ left , bottom , width , height ])` .
no , because that doesn't handle the aspect ratio required by the imshow graphic .
Matplotlib.animation not updating
Something like ani = animation.FuncAnimation .
` plt.sca() ` can be used to do this in a simpler way : #CODE
Avoid the ` pyplot ` state-machine when possible .
` plt.savefig ( " my.pdf " , dpi=600 )` This will improve the quality .
` from pandas.io import sql ` ?
How to eliminate whitespace in pyplot heatmaps ?
I am trying to make a heatmap using pcolor in pyplot #CODE
I've tried with plt.legend but it didn't work .
For the strings issue : try using the label keyword in the ` plot() ` command instead .
` pylab.isnan ( y ) .any() `
` pylab.isinf ( y ) .any() `
thanks for yoou help , but ` >>> pylab.isnan ( y ) .any()
and what does isinf give ?
You are right ` >>> pylab.isinf ( y ) .any()
Hmmm , I thought strpdate2num invoked strptime i.e. date2num ( strptime ( i , " %H : %M : %S ")) .
It sounds like you want ` plt.ginput() ` .
` plt.axvline ( x=location , ymin=0 , ymax= 1.0 , linewidth=11 , color= ' w ')
I think changing the arrowstyle will help here .
I know that np.polyfit returns coefficients .
But what is np.polyval doing here ?
Polyval according to Docs : #CODE
This will create the same output as polyval .
matplotlib.figure() doesn't work when executing a script in Enthought Canopy IDE
When I execute the ` pyplot.figure() ` in the Python shell of the Enthought Canopy editor a graph menu is displayed .
Figures created through the pyplot interface ( ` matplotlib.pyplot.figure `) are retained until explicitly closed and may consume too much memory .
FuncAnimation Matplotlib difficulty
matplotlib hexbin gap removal
( e.g. ` imshow ` or ` pcolormesh ` , etc ) .
@USER - ` pcolormesh ` doesn't expect a keyword argument called "` C `" .
I don't understand in the link I have given what is the line ` plt.plot ( x [ below ] , y1 [ below ] , ' b -- ')` does ..
How do you import an xkcd fig to html using mpld3
I am trying to import a matplotlib to html with xkcd theme .
That is not going to work because the ` pcolor ` does not have the right range .
` matplotlib.pyplot ` works fine .
It should be ` vmin= np.mean ( lvls [: 2 ])` .
I found an example for np.vectorize() but somehow I am struggeling to understand how to work with these arrays .
For example , in your case : ` plt.imshow ( z , interpolation= ' nearest ' , cmap= ' Blues ' , extent =[ x.min() , x.max() , y.min() , y.max() ])` .
The comments have a good solution that utilizes ` imshow ` .
You need something like matplotlib.animation module :
Look into the ` BoundryNorm ` and ` NoNorm ` normalization methods and search on discrete color maps .
AttributeError : ' int ' object has no attribute ' add_patch '
Exp1 : xs = np.linspace ( 0.005 , 0.75 , 10 )
Exp2 : xs = np.linspace ( 0.015 , 0.035 , 20 )
I feel like ` plot() ` should just work , unless you've hit a bug in pandas .
I kept getting " QApplication was not created in the main() thread " and " Xlib : unexpected async reply " .
Running ` import matplotlib.pyplot ` causes a GTK ` ImportError ` .
or : fig , axis_array = plt.subplots ( 7 , 1 , figsize = ( pic_width / 7 , pic_width ) , subplot_kw = { ' aspect ' : ( whatever you want ) } )
by the way np.linspace .
possible duplicate of [ import matplotlib.pyplot hangs ] ( #URL )
I cannot make it play nice with df.plot() method ....
Isn't it ` bivariate_normal ` that chokes on your inputs ?
This only works after ` plt.show() ` is called ( unclear to me , maybe a separate question for SO ) , but it works .
----> 1 weather_mar2012 [ ' Temp ( C )'] .plot ( figsize =( 15 , 5 ))
ax.set_xticklabels ( xticklabels ) 1053
-> 1063 labels = axis.get_majorticklabels() + axis.get_minorticklabels() 1064 for label in labels :
in get_majorticklabels ( self ) 1155 def
in viewlim_to_dt ( self )
624 def viewlim_to_dt ( self ):
--> 626 return num2date ( vmin , self.tz ) , num2date ( vmax , self.tz )
344 if not cbook.iterable ( x ):
347 x = np.asarray ( x )
Edit : For my purposes , Hooked ' s example below , using matshow , is exactly what I'm looking for .
` matshow ` is exactly what I'm looking for .
Try ` plt.bar ( df.index , df.Units )`
Similarly ` plt.plot ` basically does ` plt.gca() .plot ( ... )` .
There's nothing wrong with using ` pyplot ` for everything ( especially interactively ) , but it makes it easier to shoot yourself in the foot .
` plt.clf() ` or ` plt.figure() ` are two functions that can do it dor you .
pyplot plots different outputs in Spyder and iPython notebook
Kind of , you can print df.set_index to see what happens .
Note that ` plt.violinplot ( a , positions= np.array ([ 2 . ]))` works as expected .
I guess I was confused because the violinplot works nicely .
You should be able to do this in dataframe.plot() #CODE
So what is the problem in the ` plt.plot ( pat_ ... )` ?
matplotlib xkcd not working on mac
I've small problem in visualizing matplotlib xkcd plots .
pyplot generates two different graphs ?
Perhaps there is some parameter that I need to pass to specgram ?
I'm pretty sure ` specgram ` uses a Hanning window as the default , which may mess with what you expect from your scaling .
` RuntimeWarning : invalid value encountered in true_divide `
The reverse of ` polyfit ` is ` polyval ` .
Quoting from the ` matplotlib.pyplot.boxplot ` documentation :
` set_xdata ` ( or ` set_ydata ` ) and ` get_xdata ` ( or ` get_ydata ` ) .
I think the problem is that you're creating a new ` ax2 ` by calling ` twinx ` again .
` XX ` and ` YY ` are just what ` numpy.meshgrid ` creates , iirc , x and y arguments can just be straight lists , but i haven't tried it .
I have trouble with matplotlib / pyplot / basemap .
fig.gca() vs . fig.add_subplot()
Try specifying vmin=0 and vmax=4 , or maybe vmin=- 0.5 and vmax= 4.5 , in your call to pcolor .
Try this ` plt.figure ( figsize =( 23.39 , 16.53 )` and check
Understanding matplotlib magnitude_spectrum output
The documentation says that the default is a Hanning window .
` person_name ` sounds categorical , perhaps you are looking for [ ` factorplot `] ( #URL ) ?
Pyplot color maps showing different results
Playing a bit with some scikit-image code samples and pyplot I've found different results on my images depending on how I'm applying my color maps , and I don't know why .
` bound method DatetimeIndex.to_pydatetime of class ' pandas.tseries.index.DatetimeIndex '
The mistake you are doing is adding ` ( i , 0 )` in the ` matplotlib.Patches.Rectangle ` section .
I've been trying to make a diagram using PolyCollection very similar to this one :
there seem to be a couple of questions on here about PolyCollection .
It is sufficient to ` import matplotlib.pyplot as plt ` .
imshow() and matplotlib() are not working together
cmap = matplotlib.colors.ListedColormap ([ ' #ff0000 ' , ' #0000ff ' , ... ])
possible duplicate of [ Defining a discrete colormap for imshow in matplotlib ] ( #URL )
I'm trying to print a result in pyplot using plt.legend , but the superscript #CODE
Would it be ` x = ( np.sin ( theta ) * np.cos ( phi )) / 12 ` ?
It would be : ` x = ( np.sin ( theta ) * np.cos ( phi )) / np.sqrt ( 12 )` .
If you want to change the circles to be transparent , ` patches.Circle ` takes an ` alpha ` as argument .
I've also tried imshow .
` plt.plot ( df.index , df.yournumbercolumn )`
Alternatively , you could have used ` np.ma.vstack ` .
I had tried with ` for coll in plt.gca() .collections : ` Thanks !
Sorry , my bad - ` remove() ` ** also works with 3D contours** .
Here's an example of what I want the graph to look like ( sorry for the rubbish xkcd powerpointedness of the graph ):
Again , this applies to ` pyplot ` , but may also work for ` pylab ` .
legend() missing 1 required positional argument : ' labels ' , Matplotlib
` legend() missing 1 required positional argument : ' labels ' .
The ` labels ` argument is required , meaning you need to a ` labels = ( ... )` arg in your ` fig.legend ` call .
Well you can do so by using the ` set_style ` parameter #CODE
I've also tried tight_layout but that didn't work .
change xaxis range using ` plt.xticks `
` matplotlib.axes.Axes ` instance .
Sorry , I googled a bit and it seems that I should delve a bit deeper into matplotlib.animation .
AttributeError : ' NoneType ' object has no attribute ' ravel '
Thanks for mentioning ` matplotlib.animation ` API .
In Django calling the ` .plot() ` displays the graph fine , but displays a blank page to the HTML template .
I've also tried using Numpy's ` genfromtxt() ` and ` loadtxt() ` , but to no avail .
I.e. of the four parameters to " plt.legend ( bbox_to_anchor =( 0 ., 1.02 , 1 ., .102 ) , loc=3 , ncol=2 , mode= " expand " , borderaxespad=0 . )" is it 0 .
Analyzing a CSV file using Django Pandas and Pyplot
Pyplot colormap line by line
Is there something I'm missing in the .plot() implementation of pandas ?
plt.boxplot draws fliers despite setting sym = ''
` df.loc [: , ' T1 '] .values [ 0 ] ==> datetime.time ( 0 , 15 , 43 )`
I am afraid I have no general answer to offer , but do you know about add_axes ?
I appreciate the suggestion , but I am aware of ` add_axes ` .
/ usr / local / lib / python2.7 / dist-packages / matplotlib / pyplot .
Figures created through the pyplot interface ( ` matplotlib.pyplot.figure `) are retained until explicitly closed and may consume too much memory .
The plt.show() call works just fine .
In the post you link , it shows that ` set_xlabel / set_ylabel ` are methods , not attributes .
From that , you can generate the heatmap either with ` imshow ` or ` hist2d ` from ` matplotlib ` .
Although the documentation states that MarkerStyle is the type to pass for ` marker= ` , this doesn't seem to be implemented correctly .
But I think the problem is , that you call ` plt.imshow() ` repeatedly .
Question : plt.imshow creates an AxesImage object ?
The pyplot class in matplotlib provides a direct toolbar , i want to have a similar thing , but there i cannot customise that toolbar ,
Try adding ` parse_dates =[ 0 ]` to the ` pd.read_csv ` command .
But df.index = pd.to_datetime ( df.index ) works fine .
For exmaple , ` line = ax.plot ( ... ); return line ` .
plt.plot ([ 1 ])
plt.show()
Try using ` fill_between() ` like so : #CODE
The issue is in the green errorbar caps , which are shifted to the left .
Matplotlib errorbar not centered on marker
There is nothing in the ` matplotlib.pyplot.plot ( *args , ** kwargs )` documentation about that .
Extracting the boundaries of a pcolor in matplotlib
Maybe a stupid question , but have you tried ` plt.draw() ` and ` plt.show() ` , including parentheses ?
Getting the rescale to work requires code from : set_data and autoscale_view matplotlib
1 ) It is ingrained in pylab , 2 ) it has a pyplot interface , and 3 ) it has its underlying object interface .
Your code currently uses a mishmash of the latter two , which can actually cause problems - pyplot does more behind the scenes than just make the plots .
Pyplot can interfere with that if you aren't very careful .
Unfortunately with my limited matplotlib experience I can not tell what part of the code is pyplot and which part is an object method .
Is this part of pyplot or is it an object method ?
Pyplot can pretty easily be identified by the ` plt .
` , because it is usually imported like ` import matplotlib.pyplot as plt ` .
You are looking for the ` MaxNLocator ` ( Documentation )
For instance , ` np.mgrid [ 0:5 , 0:5 , 0:5 ] .shape == ( 3 , 5 , 5 , 5 )` .
Actually , it does have an effect ... compare ` x = np.ones (( 3 , 4 , 5 )); y = np.linalg.norm ( x , axis=0 )` to ` x = np.ones (( 5 , 4 , 3 )); y = np.linalg.norm ( x , axis=-1 )` .
And the answer is still to overload ` Figure.add_subplot ` .
Furthermore , ` add_artist ` is too general for this .
You actually want ` add_patch ` ( ` plt.Circle ` is ` matplotlib.patches.Circle `) .
` plt.plot ( sx1 , " r^ ")` for example .
pandas.Series inducing KeyError in pyplot.hist
It was simply that I was passing ` plt.hist ( u83 )` instead of ` plt.hist ( u83.values )` ....
Before ` plt.axis ( ' off ')`
After ` plt.axis ( ' off ')`
So I managed to determine that the problem is not in ' plt.axis ( ' off ')' part of the code .
However there is possibility that images have a small padding like in the imshow issue I linked .
If you're still having issues , it's probably because you're using ` fig.savefig ( ..., bbox_inches= ' tight ')` .
@USER - Are you using ` fig.savefig ( ..., bbox_inches= ' tight ')` ?
On a side note , you can pass the rotation directly into ` plt.ylabel ` .
( e.g. ` plt.ylabel ( ' y ' , rotation=0 )`)
matplotlib FuncAnimation : when to stop ?
FuncAnimation ( fig , func , frames=None , init_func=None , fargs=None , save_count=None , ** kwargs )
See ` Axes.autoscale ` and ` Axes.relim ` #CODE
I've tried both with and without running relim() without luck .
Can't handle an ImportError calling matplotlib.use
I didn't because I understand that ` matplotlib.use ( ' MacOSX ')` calls it - this work on my Mac !
After your suggestion I tried ` from matplotlib.backends import _macosx ` within ` try ... except ` before using ` matplotlib.use() ` .
I had now warning ` matplotlib.use() must be called * before * pylab , matplotlib.pyplot ,
So you call it before ` pylab ` or ` pyplot ` ...
You can do it by customizing ` rcParams ` .
You could even call the ` plt.close() ` right after the ` display.display ..
GridSpec is what I needed .
In the meantime , I did it rearranging ` GridSpec `' s output and using ` GridSpecFromSubplotSpec ` .
In your case , that would be your ` P ` object , returned by ` fig.add_subplot ` .
You can monkey-patch ` ax.format_coord ` , similar to this official example .
( By default it only pops up when clicked . ) Note that ` mpldatacursor ` does handle the ` extent ` and ` origin ` kwargs to ` imshow ` correctly .
matplotlib retrieve color from plt.plot command
How to obtain the color used by plt.plot after calling it ?
matplotlib xkcd with utf-8 label
On Windows or OSX the default is probably Comic Sans for matplotlib with XKCD .
The problem is in plt.xticks line of code
Using ` matplotlib.pyplot ` is generally recommended as opposed to using ` pylab ` .
I'll modify the answer to make it explicit that the problem was overwriting the ` p ` variable , and that my newly written code is different ( using pyplot ) .
matplotlib.matplotlib_fname()
df.plot seems not to work in Pandas ?
You're currently using ` figtext ` .
Using Python 3 - using matplotlib axes.table() .
I am designing a simulation viewer in which points are animated using FuncAnimation in matplotlib .
Otherwise it is garbage collected before ` plt.show() ` is called : #CODE
[ cc , pp ]= meshgrid ( 0.5 : 0.01 : 1.5 , 0.1 : 0.01 : 0.9 );
How to understand the code for matplotlib.pyplot.contour ?
Pyplot lemniscate
` autoscale() ` doesn't seem to work , as tested in [ this example ] ( #URL )
Matplotlib TypeError when importing matplotlib.pyplot
And somehow it works now ( the problem is the line ax.hold ( False ):
I can tell that on this machine , DejaVu Sans is used by matplotlib.pyplot .
I found this in the unit tests of the ` font_manager ` :
I've tried suggestions from other threads like using ` plt.xlim ( extent [ 0 ] , extent [ 1 ]))` with no luck .
It does appear to work correctly when using ` twiny ` instead , so it feels more and more like a bug in mpl .
Fill_between giving type errror on matplotlib
See matplotlib ` legend() ` docs for more information .
With a standard axes.plot I can do something like : #CODE
As you are embedding mpl in a larger application using the OO interface , you don't even need to import pyplot .
Are you using the pyplot interface or the actual object methods ?
I've adjusted the limits a bit using ` plt.xlim ` and ` plt.ylim ` to make it easier to see .
using ` Z / np.amax ( Z ) * np.amax ( zpos )` will scale your ` Z ` -data to the magnitude of ` zpos ` .
The following screenshot shows my xaxis .
However , pyplot truncates the bottom such that I'm not able to completely read the labels .
Here's a ` subplots_adjust ` example : #URL
( but I prefer ` tight_layout `)
comparing rows in recarray
But in my situation in which ` matplotlib.figure.Figure ` is used to embed ` matplotlib ` into ` tkinter ` , ` figure.canvas.mpl_connect ` should be applied instead of ` fig.canvas.callbacks.connect ` , otherwise an ` AttributeError ` will be raised .
From ` pyplot.pie ` documentation :
You need to change the color of ` autotexts ` ; this is done simply by ` set_color() ` : #CODE
` def home() :
ax.set_xlim ( original_limits_x )
ax.set_ylim ( original_limits_y )
In this case the colormap is generated using ` ListedColormap ` and I added the yellow color for y=5 .
For ` pcolor ` the x and y vectors represent the corner points of the tiles .
I tried ` ax.get_yticks ( transform= ax.transAxes )` , which does not work .
Check if ` plt.table ` has a kwarg call ` bbox_to_anchor ` .
Basically that command changes the same parameters of plt.subplots_adjust() overriding it
Than I will just try to make it work without ` tight_layout() `
or plt.ion : #CODE
Researching what exactly plt.ion() does is what led me to the eventual solution , so thank you !
If so , you might consider using ` plt.ginput() ` instead .
Python / Matplotlib -> to_rgba : Invalid rgba arg
The advantage is that it's basically one line , ` ma.masked_less ( y , 1.1 )` , for a threshold of ` 1.1 ` .
If this involves writing a lot more code in ` myfun ` , then it might be more convenient to just have ` z , fig = myfun ( 2 , 3 ); plt.show ( fig )` .
Is there a kwarg in FuncAnimation I am missing ?
How to display just the mesh of meshgrid
The width of each cell in the meshgrid will be 0.55 and height will 0.5 .
I assume you see something like ` Out [ N ]: line2D object ` ?
Try ` np.savetxt ` for writing to a csv file .
The issue was ` ax.set_xlim ` .
` plt.fill ( x1 , y1 , x2 , y2 , ... yn , xn , alpha= 0.01 )`
I tried ` set_yscale ( 1 ,. 5 )` but it was unsucessful , looking for how to do this .
awesome . and thanks for the np.transpose tip , too .
My mistake was using the ax.plot method , so it didn't have the option for setting edgecolor and facecolor .
The solution to my problem is to pass ` weak=false ` to ` connect() ` .
Tried df.colors [: 10 ] .sort ( ascending=0 ) .plot ( kind= ' barh ') , didn't work .
top_colors [ -10 :] .plot ( kind= ' barh ')
multiple savefig() ' s with different styles
Not sure if it is possible using the ` pandas.DataFrame.plot() ` method .
I'm trying to create and play a video , using matplotlib.animation and ffmpeg , on a webpage which I built using Django .
But I want to change the color of the marker based on a third categorical variable .
The categorical variable is in a string form .
It's important to have the height / width ratio as a certain value which is why I was messing with floats in set_size_inches before .
It is not the problem of pyplot , nor is it the problem in your code or your version of iPython .
You can pass four 1-D arrays to ` plt.quiver ` : #CODE
` import matplotlib.pyplot as plt , matplotlib
_plot = plt.plot ( range ( 5 ) , range ( 5 ) , label = ' a ')
` import matplotlib.pyplot as plt , matplotlib
_plot = plt.plot ( range ( 5 ) , range ( 5 ) , label = ' a ')
Adding ` fig.set_facecolor ( ' w ')` overlays whatever is in the background , so the new plots are started with a white sheet ( but not a blank one , I guess ) .
You may also like the look of ` GridSpec ` .
Because of this , set_ydata doesn't work ( xdata is changing length ) .
Otherwise ` ax.plot ( simulation_cycles_geomean_df1.index , simulation_cycles_geomean_df1 )` should do it .
` ax.plot ( simulation_cycles_geomean_df1.index , simulation_cycles_geomean_df1 )` worked very well .
output of DF.info() :
dtypes : float64 ( 5 ) , int64 ( 2 ) , object ( 2 )
Here is an example showing your code works if ` df.index ` is a DatetimeIndex : #CODE
Is there a way of using fill_between() on these objects ?
There should be no problem ; ` plt.plot ` and ` plt.fill_between ` accept arrays of dtype ` datetime64 [ ns ]` just fine .
Try fig.draw()
or using ` pyplot's twinx() ` you could try : #CODE
@USER Jones : Regarding 1 ): See [ in the matplotlib FAQ ] ( #URL ) . pylab is pyplot directly imported into the namespace , hence they are the same in that respect .
I recommend using [ ` np.genfromtxt `] ( #URL ) .
[ ``` pyplot.twiny() ```] ( #URL )
But it seems that the set_data and set_3d_properties are not working correctly .
However instead of writing myself that 2 , I'd like to write something like ` plt.text ( x , y , r ' $%fx+ 3.5 $ ' , a )` .
I suspect it is using a ` PatchCollection ` .
I suppose that the problem lays in the orientation part of the matplotlib.colorbar.ColorbarBase .
Both ` cb1 = matplotlib.colorbar.ColorbarBase ( ax1 , cmap , orientation= ' vertical ')` and ` cb1 = matplotlib.colorbar.ColorbarBase ( ax1 , cmap , orientation= ' horizontal ')` work for me
" in matplotlib.colorbar.ColorbarBase .
matplotlib.colors.Normalize .
AttributeError : ' AxesSubplot ' object has no attribute ' autoscale_None '
show()
import matplotlib.pyplot as plt
mpld3 tooltips fails when changing XTick locations
Adding ` ax.set_ylabel ( ylab )` seems to work fine .
But using ' ax.set_ylabel() ' partially solves the problem for me .
plt.plot ( self.DateArray1 , self.kVAArray2 )
plt.show()
plt.plot ( self.DateArray1 , self.kVAArray2 )
plt.show()
You can call ` plt.subplots ` twice to create two figures : #CODE
Note that ` plt.show() ` starts a GUI event loop and so generally it should only be called once per script .
Wouldn't the OP have enough with ` plt.ion() ` ?
: If you know how to do this with ` plt.ion() ` please post an answer .
Claim 2 : no set_ydata
Enough background , the 0th one can be solved by the set_ydata method if your number of iterations is not large ( or you don't care about memory ) , but case 1 and 2 ?
The code above can be made ' real-time ' just by replacing the sleep ( 0.3 ) with plt.pause ( 0.3 ) , no other change is necessary .
Here is how I did it using Axes.set_visible() .
plt.savefig ( " c.pdf ")
plt.show()
From this topic : How to maximize a plt.show() window using Python #CODE
I've tried the ` which ` kwarg of set_position too , and that also appears to do nothing .
` plt.legend ( bbox_to_anchor =( 0 ., 1.02 , 1 ., .102 ) , mode= " expand " , borderaxespad=0 . )`
I think this is generally done using something like ` plt.plot ( xdat [ bool_array ] , ydat [ bool_array ] , ... )` .
yes , the condition is : np.any (( np.log10 (( O3 / HB )) < 0.61 / ( np.log10 ( N2 / HA ) - 0.05 ) + 1.3 ) .any() ) .
O3 = np.array ( new_OIII )
HB = np.array ( new_Hbeta )
N2 = np.array ( new_NII )
HA = np.array ( new_Halpha )
O1 = np.array ( new_OI )
S2 = np.array ( new_SII )
HE2 = np.array ( new_HEII )
It is better to ` import pyplot ` directly .
I don't know pyweave , but have you tried something like ` plt.figure ( 2 , figsize =( 10 , 6 ))` ?
If I do , then the aspect ratio changes whenever I change parameters in ` subplots_adjust() ` .
but I wonder if there exist a better solution , e.g. one that would look like ` plt.plot ( c , marker = ( ' * ' , ' D '))` .
Also , I don't understand why you redefine these variables using ` np.histogram ` .
df [ ' b '] .plot() File " C :\ Python27\lib\ site-packages \pandas\tools\ plotting.py " , line 2511 ,
Now imagine that we didn't measure the continuous variable ` x1 ` , and we only know about the other two ( categorical ) variables ( i.e. , we have a 2x2 factorial design ) .
import matplotlib.pyplot as plt
The functionality you're looking for is included in ` pyplot.tripcolor ` .
and triangles in the triangulation it is assumed that color
` runfile ( ' thescript.py ') ; fig.text ( ....
How to revert cmap of matplotlib.pyplot ?
I used plt.set_cmap also .
Matplotlib : What is the OOP equivalent of Gridspec or plt.subplot2grid
Part of the answer lies in the ` pyplot.subplot2grid ` documentation :
How about ` ax = fig.add_subplot ( subplotspec )` and then ` ax.plot() ` ?
I am new to pyplot and wondering what I'm doing wrong here .
If I simply call show() , the result is plotted properly but execution is blocked until the window is closed .
When running it from the cmd prompt , plt.show ( block=False ) , works fine !
plt.imshow ( H , cmap =p lt.gray() , extent =[ -5 , 3 , 6 , 9 ])
It works correctly when using ` plt.subplot ` instead .
Here's how I solved it- the problem of not rotating was indeed with ` host_subplot ` and it works correctly when using ` plt.subplot `
Internally ` hist2d ` uses ` numpy.histogram2d ` .
This Code plots some boxplots in a row for every weekday .
is this possible without the rather complicated gridspec lib ?
Try ` ax1 = plt.subplot ( gs [ 0 , :]) ` and ` ax2 = plt.subplot ( gs [ 1 , :]) ` .
plt.axes ( ax1 ) worked :) thanks .
( i.e. , ax ` .plot ( ... )`
This is why the ` pyplot ` interface is so bad .
On a side note , ` imshow ` will be much more efficient in this case .
You can also implement it using ` np.correlate ` , if you don't mind the overhead incurred by ` np.hstack (( y [ 1 :] , y ))` : #CODE
However , it is binary file , so neither ` np.genfromtxt ` nor ` pandas.read_csv ` will work .
I'm wondering if OP used " genfromtxt " and posted " fromfile " instead ?
np.roll
dim= np.arange ( 1 , 25 , 1 )
In general using ` set_xticks ` is a bad idea , it would be better to do #CODE
I am currently using matplotlib.pyplot for the display and mpldatacursor for interaction .
you want ` plt.xlim ` and ` plt.ylim ` , for example : #CODE
Unpause pyplot.show()
g . , is there an alternative command to pyplot.show ( ) ?
` plt.savefig() ` uses ` edgecolor ` and ` facecolor ` kwargs but not ` color ` , so it's probably being ignored .
I ended up using imshow which is quite similar .
I cant call plt.colorbar() inside or outside this piece of code , above or below set_cmap .
I had tried something similar but I think I used index() instead of reindex() and it didn't work .
try calling ` plt.draw() ` instead of ` plt.canvas.draw_idle() ` .
While Padraic is absolutely correct about your ` return ` statements not making sense , the actual cause of the problem is your indentation and placing of the ` plt.savefig ` command .
pythons matplotlib twiny() changes limits of xaxis
Without ` twiny `
It works fine , except for when I import matplotlib.pyplot to visualize the result : #CODE
prevent scientific notation in matplotlib.pyplot
However , ` ax.ticklabel_format ( useOffset=False )` should have worked ( though you've listed it as one of the things that didn't ) .
The most convenient way is the ` ax.ticklabel_format ` method ( or ` plt.ticklabel_format `) .
To your code before ` plt.show() `
And do you understand the consequences of assigning the results of a call to ` plot() ` to a variable ?
Maybe another way to handle this is to change what plt.show renders and how .
Try ` df.plot ( ax=ax )` .
I tried to follow the basic examples online ( here and the SO question here ) but I have trouble with ` meshgrid ` causing a ` MemoryError ` .
because you are trying to call ` .values ` on an element of prediction .
sorry couldn't see for looking- what does ` .shape ` produce for ` y_test ` ?
Note that ` bar() ` also accepts a ` yerr= ` argument : #CODE
` plt.hist ` accepts additional keyword arguments that are passed to the constructor for ` matplotlib.patches.Patch ` .
fig , ax = plt.subplots()
using twiny with both x and twinx
From the ` pyplot ` API docs :
But thanks for the link , ` subplot2grid() ` seems very handy .
EDIT : using plt.tight_layout() makes it even worse :
I guess gridspec may work in your case , see my editing of the post
You could also modify the GridSpec Layout .
Also , using ` ax.set_yticklabels ( ax.get_yticks() )` is an awful idea and some what dangerous .
x = np.array ( range ( -10 , 10 ))
It's much faster by using ` LineCollection ` : #CODE
The plt.plot label keyword argument is not for automatically creating labels on the grahs .
` labels.dtype ` will then be unicode ( `' Ux '`) instead of string ( `' |Sx '`) and therefore ` ax.annotate ( ' ( %s )' %l , ... )` will work .
Coloring the x or y-labels or the y-ticks works well : ` host.xaxis.label.set_color ( ' red ')` and ` par1.axis [ " right "] .label .set_color ( ' red ')` and ` par1.tick_params ( axis= ' y ' , colors= ' red ')`
But I can not color the y-axes so this does not work : ` par1.spines [ " right "] .set_color ( ' red ')`
I have tried using set_xticks but this requires the positions of the ticks as well as their labels .
Wouldn't pyplot.xlim() or pyplot.figure.set_xlim() work in this case ?
Is there a particular reason you are using ` pcolor ` rather than the faster ` imshow ?
` In some cases , ` pcolor ` is really what is desired , but those cases are rare , in my opinion .
I was just using pcolor by habit , i guess .
the ` connect() ` method runs perfectly fine and I see the intended changes to the canvas upon clicking and moving the mouse .
Have you tried ` ax.scatter ( x , y , z )` ?
ax= fig.add_subplot ( 111 , projection= ' 3d ')
If you lack scipy and cannot be bothered to install it , this is what arange() produces : #CODE
matplotlib.pyplot.stem ( *args , ** kwargs )
Other stackoverflow questions have suggested using ` fig.clear() ` but this also results in the page not rendering ( the same hanging effect )
The issue was resolved with jenshnielsen's suggestion to change the backend that is being used before importing ` pyplot ` #CODE
I have problem with pyplot window .
I would also recommend ax.plot ([ 105 ] , [ 200 ])
such as ax.plot ([ 105 , 106 ] , [ 200 , 201 ]) and the graph will draws from x.105 to x.110 and from y.200 to y.201
I can make it by using : ax.plot ( 105 , 110 , ' or ')
Specgram is not calculated for the given signal
From the syntax it looks like you've somehow imported ` pyplot ` twice , once as ` py ` and once as ` plt ` .
I just want specgram to be calculated for a single vector , one-dimensional signal , which in this case is consisted of 1127 float numbers , and to be expressed in the same x-axis as the signal i .
You need what's known as a ` ListedColorMap ` : #CODE
My ` rcParams ` are not read .
I am making standard Matplotlib boxplots using the plt.boxplot() command .
File " / usr / local / lib / python2.7 / site-packages / scipy / sparse / csr.py " , line 253 , in __getitem__
This is with PCA : ` from sklearn.decomposition import PCA
pca = PCA ( n_components=2 )
Matplotlib : ' module ' object has no attribute ' FFMpegWriter ' / ' Writer '
mywriter = animation.FFMpegWriter ( fps=15 )
AttributeError : ' module ' object has no attribute ' FFMpegWriter '
` plt.show() ` is probably missing .
` plt.hist ([ 1 , 2 , 3 ])`
Hi I am using fill_between command in python , but it seems that the fill_between is always below the line plots .
Have you seen matplotlib's ` specgram ` ?
Right now its hard to judge why ` specgram ` would not suit your needs .
look into the ` MaxNLocator ` .
I think you are looking for ` LinearLocator ` ( docs ) #CODE
` bin ( 1 ) .zfill ( 4 )`
I have tried using plt.waitforbuttonpress and plt.ion , but this doesn't seem to be working .
You're right in that something about ` fig.colorbar ` doesn't pull the ` BoundaryNorm ` instance correctly .
date2num is the command you're most likely looking for in combination with plot_date command .
plt.plot ( plot_time , M_s_J_Io )
plt.show()
` plt.xlim ( -a*length , b*length )
Are you sure that you don't have a ` plt.show() ` somewhere else in your code ?
So there is a ` plt.show() ` somewhere else in the code .
So everything you do with set_x() is overridden later .
Do that with ` major_axis_formatter ` and ` set_major_locator ` #CODE
In the script you can do that by ` plt.subplots_adjust ( bottom= .3 )` or some other value .
` for j in np.nditer ( i ): `
ah , sry , I missread , that's ` num2dates ` not ` date2num ` .
Ultimately you must change your code so that ` set_gid() ` only receives string parameters .
And there is ` sca() ` ...
It's more verbose , as you can't just call ` fig = plt.figure() ` .
Normally , when you call ` plt.figure() ` , it :
You can't call ` plt.show() ` , so you need to start the gui's mainloop yourself .
Have you tried ` plt.ylim ( -2 , 2 )` ` plt.xlim ( -2 , 2 )` ?
Just found an answer which works specifically for ` plt.imshow() ` .
Have you tried setting dpi in the ` savefig() ` call ?
` plt.savefig ( " mandelbrot.png " , dpi=300 )`
I am using the ` savefig() ` one now .
I had never seen fill_between .
` ax = plt.gca()
plt.setp ( ax.get_xticklabels() , rotation=90 )
import matplotlib.pyplot as plt in shell returns UnicodeDecodeError
No ` plt.show() ` call is required .
I have also tried switching backends through ` plt.switch_backend() ` .
If you could just send us DataFrame.head() that should clarify most of the errors .
----> 2 matplotlib.font_manager.findfont ( ' monospace ')
AttributeError : ' module ' object has no attribute ' font_manager '`
Try this import statement instead . import matplotlib.font_manager
Also , can you please paste your imports and code leading up to .plot() Thanks !
Then , ` matplotlib.rcParams [ ' datapath ']`
` import matplotlib.font_manager `
Try df.hist() instead
I am using python and matplotlib.pyplot to produce various plots .
Isn't ` plt.close ` what you actually want to do ?
plt.ioff()
If you don't specify the range and number of bins , matplotlib.pyplot.hist() will guess guess the range and default to 10 bins .
However , I'm having trouble getting my hexagons sized correctly using matplotlib.collections.RegularPolyCollection .
However , an easier route for what you're doing is probably to exploit ` hexbin ` .
I'm pretty sure it is a bug in text() .
You can rotate the xtick labels with : #CODE
` ax.grid ( False )`
Thanks to @USER and @USER for pointing out that ` ax.get_tightbbox ` almost solves this problem .
Hi , to clarify , I distinguish beween ` set_yticks() ` and ` set_yticklabels() ` .
Your plt.plot line should read something like : #CODE
A universal way through ` .get_window_extent() ` method
This is described in the documentation for ` use() ` :
There is an experimental ` switch_backend() ` but this is for image-only backends , and does not work with the Qt or MacOSX backends .
LineCollection doesn't seem to support datetime objects on the x-axis .
I'm building an application in which there is a colorplot plotted with ` pcolor ` .
This should work equivalently for ` pcolormesh ` .
e.g. ` colormap = np.array ([ ' ' , ' r ' , ' g '])` ?
The solution is to provide a datatype that can be indexed using lists -- ` np.ndarray ` comes to mind immediately .
` pyplot.show ` perhaps ?
calling ` fig.savefig() ` seems to work fine inside notebook cells here .
As I said , I think I have gotten set_offsets wrong , but I don't know how I did so .
Did you see #URL Because that seems to work , and also looks like it's using set_offsets differently .
I am ( pretty ) certain that I am just not passing the right thing to set_offsets() , but I am having trouble figuring out what the right thing to pass is : my case is different enough from the example you pointed to that I can't quite see what is wrong .
IPython notebook stops evaluating cells after plt.show()
Note that it does not call ` plt.show() ` #CODE
In this example I want to force xtick labels when ` i=3 ` .
AttributeError : ' Line2D ' object has no attribute ' set_facecolor '
` np.meshgrid() ` is your friend : #CODE
The ` matplotlib.colors ` module is what you are looking for .
The ` matplotlib.colors ` module documentation has more information if needed .
You could do this just before calling ` plt.show() ` : #CODE
Is there a way to do it in one line , preferably inside the pyplot.plot ?
I want to create multiple imshows via plt.subplots .
You can change the numbers with either ` plt.xticks ` or ` ax.set_xticks ` ( the same for y ) but this does not allow you to change the labels of the ticks .
For this you need ` ax.set_xticklabels ` ( the same for y ) .
Your problem stems from using ` np.tile ` rather than ` np.repeat ` .
plt.imshow ( Xt [ 0 , :] .reshape ( 105,105 ) .T , interpolation= ' nearest ' , cmap= cm.Greys_r ) and it gives me the correct flipped output .
So what I have is , a bumpy ndarray , which has 28 rows of 11025 dimension .
175 m = asanyarray ( m )
Xt2= np.rot90 ( Xt [ 0 , :])
plt.show()
The ` Line2D ..
It looks like your logic is right , you just need to call plt.show() .
Is it possible to create a RegularPolyCollection with static sizes ?
I'm not sure if this is a bug , the documentation for ` plt.contour() ` specifies that ` linewidths ` should be a [ ` None ` | number | tuple of numbers ] while you provide a number as a ` string ` .
What is your default codec in ` matplotlib.rcParams [ ' animation.codec ']` ?
The problem stems from mixing two approaches to using ` plt.legend() ` .
` plt.bar ( left_edge , height , width )` does exactly what you want .
when you are importing ` matplotlib.pyplot ` and then calling ` plt ` , it doesn't make sense !!
you should ` import matplotlib.pyplot as plt ` and then call ` plt.plot `
The property ` ndim ` is short for " number of dimensions " .
Can anyone please explain what set_array does , and how I should deal with this ?
Artists such as PolygonPatch don't create this mappable , so you need to do it yourself using ColorbarBase()
If you really need hard-set locations , even after scaling / changing , then look up ` matplotlib.ticker.FixedLocator ` .
I think ` figimage ` may be useful to you ... this question possibly a duplicate of [ this ] ( #URL ) question ...
AttributeError : ' AxesImage ' object has no attribute ' get_datalim '
The file-reading line should look like ` sepFile = readFile.read() .split ( ' \n ')` , as it is ` \n ` and not ` / n ` that ends a line .
This means that on the wedge : #CODE
did you try ` plt.show() ` ?
bar_2020_18 = plt.bar ( left_bar_positions , eighteen1 , bar_width , color= ' red ')
Is it simply ` fig , ax = subplots() ` ?
matplotlib.animation not working
Also , to answer 1 : ` plt.xlim ( xmin , xmax )` .
From the matplotlib hist() docs :
The linked answer also works for me ; apparently imshow isn't context-conscious and ax.plot is .
I did not know about ` rc_context ` !
Also tried matplotlib.pyplot.ioff() .
Solved : I had imported pyplot in another module , which I turn imported before setting the matplotlib backend .
So matplotlib was saying that the matplotlib.use() call had no effect .
d ) Feed this marker to plt.scatter .
In the call to plt.figure ?
like previous answers suggested but it didn't work , as well as using ` matplotlib.rc ` or ` matplotlib.rcParams ` which also didn't work .
` ax.boxplot ( data_to_plot , sym= ' k . ')`
matplotlib imshow interpolation grey edges
Python matplotlib.pyplot : on_key is not triggered using canvas.mpl_connect
Because ` plt.show() ` should be inside your ` __init__ ` method .
Putting ` plt.show() ` inside ` __init__ ` does work .
Are you looking for [ ` np.rot90 `] ( #URL ) ?
Per jedwards comment , I fixed it by changing my legend() call to : #CODE
Labeling every xtick and ytick will make the graph too crowded .
However , ` ax.xticks ' , ` ax.set_xticklabels ` might be enough .
PyPlot double x-axis with correlated ticks
The returned object is a ` GridSpec ` which is dependent on the cell dimensions of the ` SubplotSpec ` that was used to create it .
You are looking for the ` LineCollection ` command .
results in a Segmentation fault when calling tricontourf
For ` plot() ` note :
Create matplotlib PolyCollection colormap mapping each cell to a color
ListedColormap .
However , if you've made the ` PolyCollection ` through ` ax.pcolor ` or otherwise called ` collection.set_array ( some_data )` in another way , you'll need to disable the scalar-color-mapping behavior by calling ` collection.set_array ( None )` .
I didn't know ` collection.set_array ( None )` would turn off the scalar color mapping !
normed & stacked options in matplotlib.pyplot.hist
additional keyword arguments are delegated to LineCollection
matplotlib.ticker.ScalarFormatter has a scientific notation option : #URL
Or , possibly better for your purposes , a FuncFormatter : #URL
import matplotlib.pyplot as plt
I should note that it appears set_aspect does nothing with semilog plots .
As the traceback shows , you were calling ` ax.scatter ` with the argument ` lebel ` instead of ` label ` .
matplotlib.pyplot in a wx.Panel
` axes.set_yticks() ` needs to be done before ` .set_yticklabels ` , for the labels ' position to be right .
Note that ` share=False ` in ` plt.subplots ` .
It has to do with how pcolormesh creates the QuadMesh object .
I want to extend my python class with the pyplot module from matplotlib : #CODE
* " I want to extend my python class with the pyplot module from matplotlib " * - why ?
Why not just create your own module that imports ` pyplot ` and defines the additional functionality you want ?
Now- there are classes inside the Pyplot module - you could inherit from those , and enhance their behavior - and you would import your inherited classes in your code , from your own module .
Unfortunatly there is nothing like the view() command afaik .
mwaskom , can you elaborate on the twinx part .
I tried using ` plt.tight_layout() ` but it didn't affect the problem .
I think you're better off using ` imshow ` instead ( which I believe is what ` matshow ` calls .
' I've had similar troubles with pylab , usually cured by the recipe above ` import matplotlib.pyplot as plt ` then replacing ` pylab ` with ` plt ` everywhere .
` import matplotlib.pyplot as plt
This is an example of what it can look like ( with ` x = np.linspace ( 0 , 1000 , 1000 )`) :
I think you want ` griddata() ` .
See the docs for ` ax.tick_params ` here for more parameters that can be modified .
Look into PatchCollection .
Adding rcparams requires adding the logic into the code .
Are get_current_fig_manager() and full_screen_toggle() not matplotlib commands ?
set_aspect() and coordinate transforms in matplotlib
This point should really be added to the docstring for set_aspect , and I'll see if I can do that .
` is the pyplot interface which you probably want to avoid for a GUI .
This overrides your aspect ratio definition in the call to ` imshow ` .
See this answer for a demonstration of the different aspect ratio settings for ` imshow ` .
` fig.savefig ( " { #URL ( framenumber=counter ))`
you could try plt.plot ( x , y , ' k . ' , markersize= 0.1 ) , or a different markersize .
Thank you very much . the trick was in using ax.set_xticklabels .
" #using - proxy-artist " .format ( orig_handle ))
I have tried pyplot.hist ( nrs ) as well , with the same problem .
are you sure you don't have ` plt.show() ` or ` fig.show() ` anywhere in your code ?
` plt.ioff() ` would turn * autoploting * off .
Before importing pyplot solved the problem .
Removing the ` ax.set_aspect ` functions fixes this , but now the proportions are wrong .
How to properly import file with always used code ( matplotlib , pyplot , lab work ) ?
import of numpy and matplotlib.pyplot as np and plt #CODE
Then just pass ` *args ` and ` **kwargs ` to ` loadtxt ` .
Have you used ` plt.yticks ([ 0 , 0.01 , 0.02 , 0.03 ] , [ ' 0 ' , ' 0.01 ' , ' 0.0.2 ' , ' 0.03 '])` ?
Pyplot historgram with more than 7 datasets
Pyplot lets you create stacked histograms of multiple datasets ( like this one ) .
Ambiguous truth value for meshgrid and user-defined functions using if-statement
how can i color specific pixels in matplotlib imshow ?
dtype in numpy 1.9.1 broken ?
` np.dtype ([( u'a ' , np.float ) , ( u'b ' , np.float )])`
It is better to pass the color and linestyle via kwargs ` ax.plot ( x , y , color= ' b ' , linestyle= style.next() )` .
Herein is ` Z ` the results of the ` np.histogram2d() ` .
The underlying histogram2d is plotted with ` imshow ` .
plt.tight_layout() doesn't work .
imshow() uses plot() .
was using version 1.3.1 , updated to 1.4.3 and ` matplotlib.style ` is there now :) Thanks !
Splitting numpy arrays based on categorical variable
Try savefig() from the fig instance instead of plt
When I include the ` savefig() ` created pdf files in latex , I always to #CODE
To prevent using scientific notation on the y-axis I used ` ScalarFormatter ( useOffset=False )` as you can see in my snippet below .
When I try to import ` pyplot ` : #CODE
matplotlib : plt.isinteractive() returns 0 instead of True or False after plt.ion() is called , when the script is being run in a terminal ?
But ax.get_children() [ 12 ] .remove() finishes with #CODE
So how can it be , that np.linspace() does not produce constant spacing or what am I missing ?
ax = plt.gca()
ax.get_xaxis() .get_major_formatter() .set_useOffset ( False )
` get_paths ` .
Here's the docs for pyplot.plot() .
So ` line ` is a Line2D object .
Here is the documentation for Line2D.set_dashes() ; see if that answers your other question .
Setting the color bounds for a matplotlib streamplot
There's no ` set_clim ` , ` vmax ` or ` vmin ` .
( ' PathPatch ' object has no attribute ' _xy ') .
A PathPatch has ` get_verts ` but no ` set_verts ` ; try replacing ` D [ ' boxes '] [ 0 ]` with a PathPatch with the vertices you want .
import matplotlib.pyplot as plt #CODE
The problem is that the call to plt.pcolormesh fails , with #CODE
That is how pcolor mesh should work ....
I'm fairly sure that resampling / combining myself then using imshow would be faster , though .
plt.imshow ( img )
Altering height range of matplotlib histogram2d
I guess only the position part of this BboxImage should be returned
I was used to doing this with Line2D objets by adding a coma , example : return lineobject ,
If I were you I would enter that line by line , hitting ` plt.draw() ` after every line of matplotlib code to see what exactly is going on .
Even if I change the yaxis by using ` ax1.set_ylim ( 0 , height )` , the x-axis changes ..
This is pointed out in the documentation for ` plt.subplot ` .
savefig() saves different aspect ratio than show()
Links to printScreens of plt.show() and plt.savefig()
Note that there is a similar command ` ax.set_ylim ` for the y-limits .
Note that if you're just using the pyplot interface , i.e. without using ` fig ` and ` ax ` , then the command is ` plt.xlim() ` .
If you weren't writing a gui , you could simplify some of this by using ` matplotlib.animation ` , but you'll need to handle it directly if you want things to be interactive .
In matplotlib terms , you want a combination of ` fig.canvas.copy_from_bbox ` , and then alternately call ` fig.canvas.restore_region ( background )` , ` ax.draw_artist ( what_you_want_to_draw )` and ` fig.canvas.blit ` : #CODE
You may be looking for ` rc_context ` .
And when I call each of the instructions inside f() individually it gives me an other result ( which is correct ): #CODE
From the docs of ` imshow ` : * MxN float arrays may be normalised .
` imshow ` normalizes internally , mpl should not be mutating user input .
The question referenced by @USER is similar , but using ` imshow ` and not ` specgram ` .
I'm not sure ... they both inherit from ` TimedAnimation ` I think , but for the nitty gritty I suspect you'd have to dive into the code itself .
( e.g. ` plt.rcParams [ ' font.family '] = ' Helvetica ' ; plt.subplots() ; plt.show() `)
My question involves the orientation of the vlines .
It sounds like you don't want ` vlines ` , instead you want rectangles .
Are you sure you didn't somehow inadvertently pass in ` plt.scatter ( a , b )` instead of ` average_a , average_b ` ?
Also , there's no need to call ` tolist() ` .
I wouldn't have thought ` plt.scatter ` would even work if you used ` import matplotlib as plt ` .
That should be ' import matplotlib.pyplot as plt ' .
Thanks Julien , this does the trick :) I'd love to know why the ( very much simpler ) invert_yaxis doesn't seem to be working for me , though ...
Unfortunately , I don't know why invert_yaxis wasn't working .
PCA ( X ) is not the same thing as PCA ( X.T ) .T
It seems that requiring numrows > numcols is a limitation of matplotlib PCA .
I have two separate plots made by ` pyplot ` using code like this : #CODE
` plt.show() `
I've read the doc about griddata , it says it returns a
Yes xkcd is the one to blame .
How can I do this with plot() ?
This will return a ` matplotlib.axes ` object , which you can fine-tune however you want .
TypeError : object of type ' int ' has no len()
TypeError : object of type ' int ' has no len()
Pandas and Matplotlib - fill_between() vs datetime64
meshgrid showing the mesh points## Heading
When plotted with ` imshow ` , the two will behave identically .
The object returned by ` vlines ` is of type ` matplotlib.collections.LineCollection ` and does not provide such a method .
Probably ` set_offsets ` or ` set_verts ` .
There are are few ways to do animations in matplotlib , the matplotlib.animation provides a framework but this can be a little involved .
Probabaly the easiest way to do it is using plt.ion() .
[ numpy.argmax ] ( #URL )
am puzzled by : left yaxis goes down to 0.1 , but is labeled by " Number of NEAs " ; do NEAs really come in counts less-than-one ?
Then I replaced PCA with FastICA for the visualization part .
So there should be ax.text ( '') , but by not explicitely importing pyplot , there will be no ax.xlabel .
The issue with performing normalization is that you don't know how many points are in each bin until after the hexbin is created .
One part that I missed in my previous attempts is the " reduce_C_function= np.sum "
Matplotlib griddata fails
I tried converting x , y , z to regular Python lists with the tolist() method , but it didn't work .
` ax.plot ( np.arange ( 2000 , 2010 ) , range ( 10 ))`
` ax.get_xaxis() .get_major_formatter() .set_useOffset ( False )`
` plt.tight_layout ( pad= 2.0 , h_pad= 6.5 , w_pad= 4.5 )` gives the desired result ( Fig.3 ) .
Running fig = plt.figure() in pandas opens two figures
If so you don't need the ` plt.show() ` call as matplotlib will be configured to be inline
So you are correct that the ` plt.figure() ` is not needed in this case .
The ` plt.figure() ` calls in the pandas documentation should be removed , as they indeed are not needed .
plt.bar ( matplotlib in python ) does not make bars
plt.plot ( Fk )
ax = gca()
ax = gcf() .gca ( **kwargs )
( This is the ` set_array ` method of anything that inherits from ` ScalarMappable ` . )
I am using specgram to analyze acoustic signals and am confused about 2 aspects of the results .
The example includes both ` pandas.DataFrame ` s and matplotlib figures .
It's a ` pd.DataFrame ` so you can manipulate it with the usual methods and slicer , e.g. ` df.describe() [[ " column1 " , " column2 "]]` .
I have googled and apparently if I do this before importing pylab or pyplot : #CODE
The arguments you're passing to ` cohere() ` are wrong .
` plt.cohere ( r1 , r2 , NFFT=256 )`
That looks to me like a leetle typo in the string-formatting passed to a DateFormatter .
have you tried ` plt.gca() .invert_yaxis() ` ?
To change that , you can redefine your ticks to be going from 1 to 8 , using ` ax.set_xticks() ` and ` ax.set_yticks() ` .
The only thing I could think of to try was adding ` sticky= ' NSEW '` to ` canvas.get_tk_widget() .grid ( row=0 )` , but that doesn't work .
Unable to " import matplotlib.pyplot as plt " in virtualenv
However , I had another virtual environment with Python 3.4 and matplotlib 1.4.3 and this environment worked fine when I imported matplotlib.pyplot .
What is the ` plt.draw() ` for ?
Have Pyplot windows appear as topmost window in Windows 7
I'd love that too , but as far as I've read , this is a pyplot thing and can't be altered much .
matshow in python with extents that make ticks in the middle of squares
How to make a custom colormap using PyPlot ( not matplotlib proper )
See the PyPlot ColorMap documentation .
there's no way to do this just using the subplot() command ?
Here is some discussion on how to compare cyclic numbers : #URL It would be kind of nice if numpy had a datatype that was " cyclic " and overrode ` __add__ ` , ` __sub__ ` , etc ... to always give the desired angular result .
It is required for mathtext support . pip / easy_install may attempt to install it after matplotlib .
I am trying to create a scatterplot using Python Pyplot .
` ax.set_zorder ( -1 ))` has not worked so far either .
As @USER said , you need to force a ` draw() ` call begore ` background = canvas.copy_from_bbox ( ax.bbox )` .
Annotating the points can be done with calls to ` plt.annotate ` .
I don't have access to the latitude and longitude outside of the ` df.iterrows() ` .
Do not call ` plt.scatter ` with each iteration of the loop .
For example , ` X = np.arange ( -5 , 5 , 0.25 ); X , Y = np.meshgrid ( X , X ); Z = np.random.random ( X.shape ); ` .
` df.plot ` returns an AxesSubplot , which has a ` axvspan ` method .
` pandas.DataFrame.plot ` will return the matplotlib ` AxesSubplot ` object .
Still curious why would you prefer right mouse click to ` fig.savefig() ` ...
I have read another code and they had added : ax.add_patch ( circ ) and it works .
There appears to exist no " good " solution , ` set_offsets ' is for 2D plots , ' _offsets3d = ( xlist , ylist , zlist )` ( or with np.ma.ravel , #URL ) is described as a hack #URL
That's what ` ndarray ` s are for ...
Would matplotlib's hist2d work for you ?
Example added , and it's in the docstring for hist2d , and it's the same argument numpy's histogram2d uses .
` imshow ` has its own labeling standards .
In this case , that's only one level up calling ` math.log10 ` on an integer gives you a ` float ` , but calling the ` log10 ` method on a ` Decimal ` gives you a ` Decimal ` , so : #CODE
matplotlib.pyplot.imshow , issue with plt.legend()
Make sure you call ` plt.show() ` outside the ` for ` loop
There do exist other threads on this topic like Matplotlib python show() returns immediately but those solutions don't work for me - I tried ` matplotlib.interactive ( False )` and choosing various different backends for matplotlib ( currently I'm using `' QT4Agg '`) .
What happers when you move ` plt.ioff() ` before ` plt.figure ` ?
And I'm afraid I don't see anything in the matplotlib.pyplot docs / SO / google pointing me in the right direction , even what to call it .
We can compute the area of your labels = thresholded areas by using np.where to give us the positions of pixels , then counting the number of items : #CODE
Look for twinx() .
I'm creating a heatmap from a pandas pivot_table as below : #CODE
I also strongly recommend using ` pyplot ` instead of ` pylab ` , i.e. ` from matplotlib import pyplot as plt ` .
` plt.imshow ( bool_array [: : -1 ])`
Additionally , what is ` i ` in ` np.logical_and ( i > = min_y , i <= max_y )` ??
What does ` matplotlib.get_backend() ` return ?
The to_datetime was what I needed .
@USER see edit for ` get_window_extent() `
mathtext support . pip / easy_install may attempt to
I have taken ax =p lt.figure() .gca() .
ax is a ' matplotlib.axes ' object ([ link ] ( #URL )) .
I have narrowed it down to the fact that ` xs ` , ` ys ` , ` zs ` need to be 2D arrays .
Each column consists of ` xs ` , ` ys ` and ` zs ` respectively .
To start , replacing your call to ` plt.plot ` with this : #CODE
I have tried using ` plt.draw() ` and ` pt.canvas.draw() ` but I can't seem to implement it correctly .
I have also tried ` plt.clf() ` which didn't work for me either .
By using ` plt.ion() ` you can make the ` plt.show() ` command , that is usually blocking , not block .
This works nicely , I took this answer with ` plt.ion() ` and incorporated it into my answer .
When I return both im0 and im1 , the video file created only has im1 , although the plt.show command works as expected ( showing both the videos ) .
The output from ` plt.subplots() ` or something ?
fig.savefig ( " / Users / richieabraham / tests / 1 / masks% d.png " %i )
Python : matplotlib ' numpy.ndarray ' object has no attribute ' has_data '
The ` delete_masked_points ` documentation says :
Well you might not be calling ` plt.xticks ` , but you still modify the ticks via ` ax.set_xticks ` .
@USER , Your suggestion of ax.set_xticks led to the solution .
ax.set_xticks ([ " 1975-01-01 " , " 1980-01-01 " , " 1985-01-01 " , " 1990-01-01 " , " 1995-01-01 " ,
ax.set_xticklabels ([ " 1975 " , " 1980 " , " 1985 " , " 1990 " , " 1995 " ,
Displaying a png in subplot2grid
I haven't been able to stitch this in my subplot2grid code block , as in : #CODE
( I've also tried setting the format_coord attribute manually but that doesn't seem to work ) .
You can play with the graph by altering the parameters to the plot()
opening and closing plots with matplotlib.pyplot
I " m running into issues when trying to interactively make plots with matplotlib.pyplot .
5 ) copying and pasting commands again , again ending with plt.show() .
The edgecolor parameter is just passed straight through to ` plt.scatter ` .
What do you intend to achieve with ` np.delete ` calls ?
This helped a lot ( although the example with no argument for ` AutoDateFormatter ` doesn't work for me )
` ax.xaxis.set_major_formatter ( dates.DateFormatter ( r ' \textbf{%m / %Y} '))`
can you try ` fig.colorbar ( heatmap1 , ax=axes [ 0 ])`
From the docs for ` add_axes ` :
However , adding ` plt.ylim (( 10^ ( -1 ) , 10^ ( 0 )))` doesn't seem to change anything .
You invoked the demons of ` matplotlib.pyplot ` which has its own eventloop .
Printing out ` print ( " % 2.32f " % plt.hist ( t1 , bins ) [ 0 ] [ 1 ])` gives the value as precisely zero .
` plt.bar ` does not seem to produce it , so thank you for that suggestion .
After this , upon commenting out ` plt.show() ` again , the python inline evaluation in LightTable becomes inactive ( except with a restart of LightTable ) .
Delaunay Triangulation of points from 2D surface in 3D with python ?
These artefacts do occur when the triangulation is done by the inbuilt Delauney triangulation .
It's also worth noting that the Delaunay triangulation in older matplotlib might be bugged .
My violinplot produces only 1 graph ( left side ) , so it's ok .
try with ` ax.autoscale ( True )` ( instead of setting it to ` False `)
try ` ax.set_xlim (( 0,204 ))` ..
before the call to pyplot.show() .
In this case , I was able to override whatever was causing the change by using ` setp() ` , like so : #CODE
I'm also using mac , and don't know why " plt.show() " can't call out the labels .
The problem for why ` plt.show() ` isn't working is to do with a ( known ) bug in matplotlib .
` plt.gca() .set_xticklabels `) .
` yy , locs = plt.yticks()
plt.yticks ( yy , [ a / 1e6 for a in yy ])
xx , locs = plt.xticks()
plt.xticks ( xx , [ a / 1e6 for a in xx ])`
NOTE : I've placed plt.legend both inside and outside the loop with the same results .
Gettings point coordinates from matplotlib.pyplot.plot
and ... have you not plopped the MultipleLocator into the example yourself ?
TypeError : histogram() got an unexpected keyword argument ' new '
And also can you try with just importing ` plt ` and ` randn ` ?
Psychopy can import matplotlib but can't import pyplot though it's on my Mac
I'm having problems importing pyplot into psychopy on my MacBook running OS X Yosemite .
Thank you for the great tipp with ` plt.hist ( img.ravel() )` !
Python - multiprocessing for matplotlib griddata
test_w = mlab.griddata ( x , y , z , xi , yi , interp= ' linear ')
File " / usr / lib / pymodules / python2.7 / matplotlib / mlab.py " , line 2619 , in griddata
What's wrong with simply doing ` np.fft.fft ( hTArray [: , 1 ])` for your signal ?
Would using the python rfft avoid this issue ?
Not storing them , it turns out , as a Wedge is defined partly by its location .
( Setting the edgecolor has to be done ( redone ? ) after the ` collection.set_array ` call , apparently . )
I'm probably not doing this the best way , but I'm insetting it using the add_axes command and just manipulating the position argument to give what I want .
Or ` ax2.get_xaxis() .set_visible ( False )` .
You want ` ax.scatter ` #URL
After that call to ` ax.bxp ` creates the graph .
Is it possible to do it with FuncAnimation ?
I noticed people suggest using plt.tight_plot() or fig.autolayout in rcParams , but that doesn't seem to work .
Does ` my_img = np.random.random (( 500,500 ))` ,
What is the ` dtype ` ?
try giving pcolor a try .
It sounds like ` plt.plot ( x , -y )` would do exactly what you're looking for .
e.g. df23 [[ " a " , " a* 1.1 "]] .sort ( " a ") .plot ( ax=ax , x= " a ")
Have you tried using ` set_xticklabels ` on x-axis ?
To clarify the point , I added ` ax.get_xlim() ` in my example code .
` pyplot ` , however , does .
And the bins to be on log10 scale too , but that is easy enough with bins= np.logspace ( -2 , 2 , 20 ) .
Still , it is worth knowing about ` applymap ` in case you need to call
I did not know about ravel() .
@USER It reads fine with ` pandas.read_clipboard() ` , which is better than a lot of pandas questions .
Right , I just want to know if there are resources showing you what ` pyplot.hist ` does , in that case .
I just have a small problem with pyplot .
` MaxNLocator ` sets the amount of ticks , and with the ` plt.gca() .yaxis ` you make this happen on the y-axis .
plt.gca() .yaxis .setmajor_locator ( MaxNLocator ( 3 ))
----> 1 plt.gca() .yaxis .setmajor_locator ( MaxNLocator ( 3 ))
AttributeError : ' YAxis ' object has no attribute ' setmajor_locator '
This helps in the Randomised Lasso case .
Similar columns , etc .?
I don't know if you're using pyplot , but it's pretty common .
Usually ` plt ` is used when people do ` import matplotlib.pyplot as plt ` .
fig = plt.hist ( x , bins )
Such as ` plt.step ( new_bins , n )` .
The docstring for ` plt.bar ` says : #CODE
Change ` plt.figure() ` in ` Figure() ` like so : #CODE
Trouble with pyplot displaying resized images in python
How to make the both calls to the solve() and image_jpeg() from the same same AJAX call ?
thanks , I manually adjusted the x positions of the labels in ax.bar ( ... ) and now it works .
` TypeError : boxplot() got an unexpected keyword argument ' label '`
There are functions to do this in matplotlib.colorbar .
` myColorbar = matplotlib.colorbar.ColorbarBase ( myAxes , cmap=myColorMap ,
I've also used ` tight_layout ` with ` w_pad= 0.0 ` to avoid label clashes .
` axes.xaxis.get_ticklabels() [ 2 ] .get_text() ` yields `' $10^{1}$ '`
` axes.xaxis.get_label() .get_text() ` yields `' \\$ x \\$ '` .
Why the ` plt.draw() ` command ?
` xaxis.set_major_formatter ( matplotlib.ticker.FuncFormatter ( format_date ))`
It would be nice if there was a ` matplotlib.rcparams ( ' axes.dateformatter.use_locale ')` , analagous to ` matplotlib.rcparams ( ' axes.formatter.use_locale ')` ( Which does exist but only handles numeric ticks , as far as I can tell . ) I don't believe there is .
PS if arr was already an ndarray the you could do : #CODE
I just wondered about the performance of matplotlib.pyplot.savefig() .
` matplotlib.rcParams [ ' font.family '] = prop.get_name() `
if t.get_window_extent() .contains ( event.x , event.y ) or inside ( p ):
Would I be able to see these in the output of np.histogram2d , you think ?
Sorry I posted an answer and then deleted it but was ` df.plot ( style= ' . ')` what you were after ?
matplotlib.pyplot.imshow() shows blank canvas
When you don't specify a dtype , #CODE
I think that your approach to do such a modification is appreciable , it avoids making calculations by hand ( see HSL and HSV ) .
Using a different color model is possible , both HSL and HSV allow to change the hue without affecting other parameters , but that is only an other way to do it and not a better one .
from matplotlib import pyplot as plt #CODE
I cannot make my code run for a ' bifurWidth ' ` numpy.ndarray ` generated using ` loadtxt ` .
Why does this happen when both are ` numpy.ndarray ` s ?
Maybe there's something in ` patheffects ` .
( rummaged in ` patheffects ` for a bit which was informative about what Strokes can do : offsets but not , AFAICT , the kind of expansion and trapping that printing programs can do . I think adjusting the ` x , y ` is going to be necessary . )
The most complicated version is a ` RRuleLocator ` which gives complicated calendar control .
See the example of the RRule ; the general principle is
plt.show() hangs on OSX with Anaconda Python
Are you sure it's ` plt.show() ` that hangs and not the import ?
The hang definitely happens with ` plt.show() `
Matplotlib animation.FuncAnimation : Custom frame generator only yields once
@USER No , this doesn't work - animation.animate() treats a generator object as a sequence and tries to determine it's length with len() - which is not possible on a generator sequence and quits with a TypeError .
[ `` numpy.genfromtxt() ``] ( #URL )
this code works when ` x ` and ` y ` are of type ` numpy.ndarray ` . numpy arrays support indexing and slicing as python standard syntax .
@USER - Can you please help me out , how to do that .?
fig , ax1 = plt.subplots ( figsize =( 10 , 20 )) Change 10 and 20 accordingly .
I've got a question on pyplot.text() when in a cycle .
I tried ` plt.ion() ` , nothing happens .
I misread ` suptitle() ` to ` subtitle() ` .
` matplotlib.image.NonUniformImage `
` matplotlib.image.PcolorImage ` is very similar to the above
` matplotlib.axes.Axes.pcolorfast ` :
for 1D point coordinates uses ` PcolorImage `
` matplotlib.axes.Axes.pcolormesh ` seems to be the winner so far
I could request that ` pcolorfast ` be polished and finished off , but the docs pretty much label it as WIP , so they know about it .
and then call ` plt.colorbar ( a )` .
With : ax.set_xticklabels ( labels , minor=False )
ax.axis ([ xmin , xmax , ymin , ymax ])
Then , I make a ` PathCollection ` of ` MyPolygonPatchCollection ` objects .
I don't think that ` PathCollection ` s can have other ` PatchCollection ` s as subelements though , as far as I understand the documentation ?
errorline_g , caplineg , barlinecolg = ax.errorbar ([ ] ,
Line2D ( _line9 ) c
Instead , it will only be drawn when you manually call ` draw_artist ( artist_with_animated_set )` .
Note that I commented out ` fig = plt.figure() ` .
I did more research and found that I shouldn't be using show()
I truly did that in my meshgrid code :
` x_list = np.linspace ( 0 , 99 , 100 ) #THE START AND END SHOULD BE ACCORDING TO THE ROOM WHICH ARE X_MIN , X_MAX , Y_MIN , Y_MAX
y_list = np.linspace ( 0 , 99 , 100 )`
More specifically , it's shorthand for ` artist.draw ( renderer )` .
` x = np.arange (( - np.pi ) / 4 , ( np.pi ) / 4 , 0.001 )`
` x = np.arange (( - np.pi ) / 4 , ( np.pi ) / 4 , 0.00001 )`
` x = np.linspace ( #URL #URL npoints )`
The linspace is better for floating point inaccuracies .
Yeah , I know , that is why ` x = np.arange (( - np.pi ) / 4 , ( np.pi ) / 4+ 0.001 , 0.001 )` is better .
I explained in my answer how arange works .
The manual of ` arange ` remarks :
to swap the location of the left and right ytick labels .
TypeError : unorderable types : str() int()
After that the ` split() ` is fine .
I'm using matplotlib's magnitude_spectrum to compare the tonal characteristics of guitar strings .
( spectrum , freqs , _ ) = magnitude_spectrum ( onesec , Fs=fs , scale= ' dB ')
spectrum2 = 20* numpy.log10 ( spectrum )
I suggest using ` LineCollection ` for this .
` fig = plt.figure()
ax2 = fig.add_subplot ( 2 , 1 , 2 )`
matplotlib.pyplot.scatter ( x , y , s=20 , c= u'b ' , marker= u'o ' , cmap=None ,
I am looking for a solution that fixes the signs but keeps the default formatting in pyplot otherwise .
I am looking for something that provides the default behavior of pyplot but just changes the hyphens to minus signs .
Python pandas and matplotlib pcolormesh doesn't work ?
But ` plt.pcolormesh ( df )` doesn't work ?
I learned here that I can just do ` plt.imshow ( df , interpolation= ' nearest ')` , but I'm still curious to know , why ` pcolormesh ` doesn't work .
Apparently this can be done with ` imshow ` but I have no idea what the syntax would be .
It sounds like you want ` pcolormesh ` instead of ` imshow ` .
Have you tried ` ax.set_ylim ` ?
< bound method PolyCollection.get_paths of < matplotlib.collections.PolyCollection object
I am using hexbin and create the following output : " hex31mm " , which is a : #CODE
Scaling pyplot in matplotlib
CS = plt.contour ( dataset1 [: , :])
df.describe() returns #CODE
You can do ` df.describe() ` also
df.info() doesn't output anything btw .
matplotlib gui imshow coordinates
However , this seems to have disappeared when I embed the imshow in a pyqt GUI .
Perhaps you should be calling ` axvline ` on ` ax2 ` instead of calling the ` pyplot ` method ?
Below is how I would proceed with ` hexbin ` .
I didn't know plt.step :) .
then do ` plt.plot ( *zip ( * ( points+points [: 1 ])) , marker= ' o ')` instead of ` xs , ys = zip ( *points )
plt.plot ( xs , ys , ' o ')
plt.plot ( xs , ys , ' - ')`
`` fig = plt.figure() ;
fig.show() ``
Embedding plt.matshow in a Tk.canvas
Here's what I tried , copying what I had done for the usual plt.plot : #CODE
From the matplotlib.image.imread doc :
You should prefer [ ` matplotlib.pyplot.imshow `] ( #URL ) ...
The above code doesn't work because of the call to ` plt.colorbar ` .
The correct form is plt.show() .
no , in my code , I used ` plt.show() ` .
With your ` matplotlibrc ` file , the variables ` mp.rcParams [ ' lines.linestyle ']` and ` mp.rcParams [ ' axes.grid ']` are correctly specified and this works as expected ...
Here is a MWE that uses ` ax.plot ` to do what I want ( per the link below ) .
matplotlib imshow() and pixel intensity
Matplotlib's ` imshow ` has 3 parameters that control the graycolor of each pixel :
You are setting the range of your x-axis with ` ax.set_xlim ([ ' 2014-06-30 00:00 : 00 ' , ' 2014-07-01 02:00 : 00 '])` .
There are some built in tools to provide blocking mouse input ( see ` plt.ginput ` ) .
python matplotlib.pyplot imread
i'm using plt.imread for reading big .tiff images .
plt.imread ( filename , [ #URL #URL )
In terms of shading though I do like titusjan's own suggestion of using HSV , which gives this result :
I tried HSV before but again was not getting what I was expecting , I will certainly try your approach as well .
Matplotlib imshow with EPS
I am using the imshow() in matplotlib .
How to do it other ways , e.g. by repeatedly calling ` add_subplot ` , has been discussed elsewhere .
If there is no such method using ` plt.subplots() ` , then I'll accept that as an answer , face the music , and learn the ` gridspec ` interface instead .
But to my knowledge , you cannot specify anything akin to ` colspan ` / ` rowspan ` using ` plt.subplots ` .
Is there a way to separately specify the frames of reference for the x- and y-transformations applied to a ` matplotlib.text.Annotation ` ?
Later I pass them to ` plt.plot ` .
However , it only works with .split() rather than .strip() .
With .strip() it doesn't like the float argument .
SpanSelector with Fourier analysis
Variable type : Continuous variable ; Continuous variable ; Categorical variable 1 ...
4 ; Categorical 2012 ...
You can change the dtype of the column using ` df [ ' x_col_name '] = df [ ' x_col_name '] .astype ( int )`
I tried to do that using python and numpy but triangulation does not seem to work .
then ` ax.set ` will receive this dictionary : ` { ' key ' : 1} ` ( and not ` { ' foo ' : 1} ` ! ) .
a = np.zeros (( 4,100 )) #CODE
` plt.plot ( range ( 3 ) , label=4 ); plt.legend() ` Does that work as expected ?
\matplotlib\ lines.py " , line 595 , in recache
` help ( plt.imsave )` says a " file-like object " can be used instead of a filename .
There is a way , using imshow instead of imsave .
Instead of creating the two interim images like my answer above , an alternative way is to make the two arrays using ` imshow ` , like in the example below .
To do this with ` imsave ` and a file-like object , you need ` cStringIO ` : #CODE
Thanks for ` np.argwhere ` and ` matshow ` ...
As far as I understand , it uses ` pyplot.scatter ` behind the scenes .
So I assumed that if I specify colour for scatterplot as a sequence , I would then be able to just call ` plt.colorbar ` , but it doesn't seem to work : #CODE
If I'm trying fig.savefig ( sys.stdout , type= ' png ') - I'm getting ieroglighs , unreadable symbols , like : #CODE
what exactly is polyval , and should python know what it is ?
I have known that pyplot.show() will create a blocking window with unlimited timeout ; pyplot.show ( block=False ) or pyplot.draw() will make the window non-blocking .
Calling ` plt.close() ` is not enough to exit the
special method ` __call__() ` is a good approach for such
The 2d streamline with imshow() is here
I already had plt.grid() , which I assume is the same .
iPython automatically runs ` plt.show() ` .
using matplotlib streamplot
I have problem using matplotlib streamplot .
The documentation for streamplot : #CODE
so I used numpy.transpose ( ) and everything worked !
return " #URL % imgbuf.getvalue() .encode ( " base64 ") .strip() `
` plt.bar ` has a ` yerr ` parameter that should help .
OR using ` time.sleep ( 10 )` and ` plt.close ( fig )` this way #CODE
How to maximise plt.show() using python on mac ?
` fig = plt.gcf() ; fig.tight_layout() `
Here's my minimal working example for the above using genfromtxt rather than loadtxt , in case it is helpful for anyone else .
For example ` matplotlib.use ( " Qt4Agg ) ` ?
I only added ` import matplotlib ` and ` matplotlib.use ( " Qt4Agg )` to the beginning of the code .
Correct usage of pyplot.xticks() in an Ipython notebook
matplotlib.pyplot.draw() and matplotlib.pyplot.show() have no effect
Try deleting the line ` matplotlib.use ( ' Qt4Agg ')` .
Also works with ` matplotlib.use ( ' TkAgg ')` .
So you tried it with ` matplotlib.use ( ' Qt4Agg ')` and it didn't work for you either ?
For the top graphs you might like to consider axhspan instead of bars .
I like @USER idea with axhspan .
I also tried ` ax.get_xaxis() .get_offset_text() .set_y ( 1 )` but that had no effect either .
Apparently , it's just a bad idea to generate pyplot figures within a Thread object .
The code below uses CheckButtons to represent three variables , x1 , x2 , x3 .
what about ` plt.figure ( figsize =( x , x ))`
Also , the method I think you want is ` set_xticks ` , which can be used as follows : #CODE
thx ! but in the end this worked : ` ax [ 1 ] .bar ( bins [: -1 ] , 1 . *hist / N , np.diff ( bins ) , log=True )`
and issuing just before ` show() ` :
if you don't mind using ` numpy ` , ` np.genfromtxt ` can do this a lot more simply : #CODE
this worked now : ` plt.bar ( bins [: -1 ] , 2-abs ( np.log10 ( 1 . *hist / N )) , np.diff ( bins ) , bottom=-2 )`
How about ` ax.set_xticklabels ([ ])` and ` ax.set_yticklabels ([ ])` ?
` plt.tight_layout() ` might do it .
or ` fig.subplots_adjust ( left=0 , right=1 , bottom=0 , top=1 )`
For example , ` pcolor ` : #CODE
Or ` imshow ` : #CODE
Python FuncAnimation is saved only 30%
` subplots_adjust ` will do it .
` imshow ` has that ability .
Can I do something similar with ` pcolor ` ?
NOTICE : the line cs= m.pcolormesh ( xi , yi , np.squeeze ( smooth ))
Mathtext is a subset of regular TeX .
PyPlot Documentation :: pyplot api
which is provided by the matplotlib.pyplot module .
Note Pyplot s state-machine environment behaves similarly to MATLAB
interface , in which pyplot is used only for a few functions such as
matplotlib plots in GUI applications the pyplot level may be dropped
fig.savefig ( imgdata , format= ' svg ')
For what it's worth , the root of your problem is calling ` plt.figure ( 1 )` .
In this case , it would be better to avoid ` pyplot ` entirely , however .
@USER Thanks for this note , I also found , in extensive testing , a definition such as ` matplotlib.use ( " Svg ")` should still be used even when not outputting SVG files , such as PNG files -- this works , seems necessary , still , based on the above code , however , the ` use() ` routine does not accept " PNG " as an input .
` plt.figure ( 1 )` ...
` plt.figure ( 1 )` was the reason that multiple figures were being combined in your original question .
I am afraid of wrong utilization of the functions just like ` linespace ` , ` enumerate ` or ` mgrid ` ...
` tt = np.linspace ( 0 , 19 , 20 )` looks like it should be 201 instead of 19 ?
1- Necessity of the equivalence regarding the provided dimensions of the ` linespace ` and ` mgrid ` functions ...
2- I didn't understand that how did you legally replaced ` sigma ` with ` np.sqrt ( 2 ) *n ` , as it should be 1 ...
plot() and imshow() relationship
Sure , ` imshow() ` allows me to color each point differently .
Does it help when you move ` plt.tight_layout() ` just before ` plt.savefig ( ... )` ?
matplotlib fill_between does not cycle through colours
For some reason this is not the case for fill_between() .
Strange , it seems that even calling ` ax._get_patches_for_fill.set_color_cycle ( clist )` or ` ax.set_color_cycle ( np.roll ( clist , -1 ))` explicitly doesn't reinstate the color cycle ( see this answer ) .
Debug shows that when the program points to the drawing command of the ` matloptlib ` , i.e. ` plt.show() ` , this crash will happen ...
` x , y , z= np.loadtxt ( ' example.txt ' , usecols =( 0 , 1 , 2 ) , unpack=True )` ,
` w= np.arange ( 0 , 0.5 , 0.01 )`
` plt.plot ( w , 1- ( x / w ) , ' k -- ' , color= ' blue ' , lw=2 )` as well
` plt.plot ( y , 1- ( x / w ) , ' k -- ' , color= ' blue ' , lw=2 )`
` plt.plot ( x , x / exfunct ) , ' k- ' , color= ' red ' , lw=2 )`
` plt.plot ( x , x / exfunct ) , ' k- ' , color= ' red ' , lw=2 )`
Rotating the labels can be done with ` setp ` ; see answer here
Like when you do ` fig.show() ` and then scale it manually by mouse ?
I'm using the following code ` plt.hist2d ( x [: , 1 ] , x [: , 2 ] , weights=log ( y ) , bins=100 )`
` image_file = cbook.get_sample_data ( ' grace_hopper.png ')`
However , I really liked the idea of using numpy.histogram and pyplot.bar instead just pyplot.hist .
import matplotlib.pyplot as plt
plt.plot ( xval , yval )
plt.show()
Is " from matplotlib import pyplot as plt " == " import matplotlib.pyplot as plt " ?
Is " pyplot " alone the module and " matplotlib " also a module ?
Or is " matplotlib.pyplot " the module ?
Another solution using np.where #CODE
plt.plot ( x , y )
plt.plot ( x , z )
plt.show()
Instead of using ` plt.ion() ` , call ` canvas.show() ` after drawing the line .
import matplotlib.pyplot as plt
Why does ` numpy.vectorize ` not help here ?
Vectorized functions were creatred with numpy.vectorize : #CODE
What is the dtype of img ?
X , Y = np.meshgrid ( x , y )
Have you tried passing label as argument , y_test [ 1800:1900 ] .plot ( color= ' blue ' , linewidth=3 , label= " ACTUAL ") .
plt.show()
I am trying to create pcolor based on 4 discrete value 1 , 2 , 3 , 4 .
This program shows how pcolor works : #CODE
From the Matlab docs ( presumably the matplotlib pcolor does the same thing ):
Note using ` c [ 0 ]` is safe here , because the logic of the line above guarantees that the ` ndarray ` will only have one member .
fig , ax = plt.subplots ( nrows=2 , sharex=True , gridspec_kw =d ict ( height_ratios =[ 1 , 3 ]))
plt.subplots_adjust ( hspace= 0.02 ) # etc
import matplotlib.pyplot as plt
fig , ax = plt.subplots ( nrows=3 , ncols=1 , sharex=True , figsize =( 8 , 11 ) ,
plt.subplots_adjust ( hspace= 0.02 , top= 0.94 , right= 0.95 , bottom= 0.06 )
ax [ 0 ] .plot ([ 1 , 2 , 3 ] , [ 4 , 3 , 1 ] , ' o- ')
ax [ 1 ] .plot ([ 1 , 2 , 3 ] , [ 1 , 6 , 2 ] , ' o- ')
ax [ 2 ] .plot ([ 1 , 2 , 3 ] , [ 5 , 3 , 8] , ' o- ')
Be sure you are calling plt.subplots ( with the plural , ' s ') and not plt.subplot .
` ax.update_datalim ` seemed promising , but doesn't seem to do what I hoped : #CODE
Q = ax.quiver ( X , Y , u , v )
plt.subplot ( 111 )
Given the 1D arrays you can create the 2D versions with ` numpy.meshgrid ` .
@USER thanks it actually seems to work with numpy.meshgrid
can't chart what I want to chart with .hist() in Pandas
could you explain why .hist() doesnt work in this case ?
I've also tried this with ` plt.setp ( ax.get_xticklabels() , visible=True )` as well , but it doesn't change the lack of x-axis labels one bit .
Does this answer it for you ( ` xlabel() ` and ` ylabel() `) ?
I also tried to specify the labels directly inside the ` plot() ` command , using ` vertex_label = ...
`` fill_between() `` is a nice idea .
Using ` fill_between() ` is a way of doing it too .
I like the approach of combining wedge and triangle .
Your solution is nice too , I like that you were able to leverage existing functionality ( the wedge ) .
and ` ax.get_xaxis() .set_major_formatter ( matplotlib.ticker.ScalarFormatter() )`
I display with imshow
I try a " labelsize " in plt.colorbar but it doesnt work
Tried tight_layout and subplots_adjust
I've also tried this with ` plt.setp ( ax.get_xticklabels() , visible=True )` as well , but it doesn't change the lack of x-axis labels one bit .
` ax.imshow ( arr , extent = [ x1 , x2 , y1 , y2 ] , aspect= ' auto ')`
The only thing I can think to try ( not sure why this would matter , but worth a shot , I suppose ) is to change ` mpld3.show() ` to ` plt.show() ` , since that's how I've always " shown " plots in the past .
` recarray ` is the old version , and still compatible , but structured arrays are more consistent in their syntax and behavior .
There are lots of SO questions about structured arrays , many produced by ` np.genfromtxt ` applied to csv files like yours .
There are a number of SO questions about using that dtype .
` recarray ` and ` ndtype ` are both classes .
firstperiod.megaball.value_counts() .sort_index() .head gives : #CODE
you can pass explicit bins to ` plt.hist ` and ` DataFrame.plot() `
how seaborn changes the behavior of pyplot by just importing the package ?
so if i want to overload axes.imshow , how i can overload it in class level rather than the object level ?
But it doesn't seem to be an option in hexbin .
You might consider using hexbin instead , as shown in [ this example ] ( #URL ) .
@USER how is hexbin useful here ?
Which returns a ` LineCollection ` object .
matplotlib.pyplot plt.show() nothing happen with MacOSX backend ?
I have tried things like ` Figure.close() , Figure.clf() ` but none worked .
So I deleted the .grid() part of the code and I tried something like this below which did not work : #CODE
try ` t= np.linspace ( 0 , 0.00033 , 1000 )`
You cannot make ` t= np.linspace ( 0,2,100 )` work , because the timesteps are too large .
Look into matplotlib.animation for more details .
` TypeError : twinx() got an unexpected keyword argument ' projection '` .
** I also tried changing the ` twinx() ` line to : #CODE
Nor does ` animate.convert_args ` in rcParams .
PNG overlay on basemap through imshow
That is why I was not sure what to pass on .hist method .
Unable to install pyplot due to special character ( Windows )
Currently , this cannot be done for the ` IPython ` " inline " graphs , however , if you opt to change a ` Renderer ` part of the ` matplotlib ` framework , to another one , the limitation of a singleton call of the ` .show() ` method does not hurt and you can ex post modify the object's content and it gets re-processed by the ` Renderer ` .
why is ` meshgrid ` difficult ?
meshgrid is not difficult .
I've tried imshow , but I feel that a 3D surface is the best display option for the work I'm doing
The memory leak seems to be caused by only the line ` self.__fig = plt.figure ( figsize =( 16 , 11 ))` .
` plt ` is pyplot in this case .
I am aware of how to do that in cartesian coordinates using ` numpy.histogram2d ` : #CODE
pyplot : Closing a show() window doesn't continue code
It seems to hang on ` show() ` .
have you tried setting ` plt.ion() ` sometime before ` plt.show() ` .
@USER Well in that case it closes because you call ` plt.close() ` .
@USER even when ` plt.close() ` is removed , it still exhibits the same blocking behaviour .
I am trying to programmatically pass the direct output from a pandas / matplotlib ` plot() ` call , e.g. something like this : #CODE
possible duplicate of [ How to change the table's fontsize with matplotlib.pyplot ? ] ( #URL )
Are you using ` pyplot.table ` or ` ax.add_table ` ?
` np.meshgrid ` expects 2 or more 1D input arrays .
As @USER says above , you need to give ` np.meshgrid ` two 1D arrays .
Using matplotlib.pyplot in iPython Notebook
` plt.draw() `
Possibly ( only possibly ) you need a call to ` plt.hold ( True )` to prevent the creation of new graphs .
see the following documentation for set_ylim and set_xlim
For instance I would like to do this using categorical variables
.. does [ ` np.arange `] ( #URL ) work ?
Right : ` arange ` .
You used ` matplotlib.pyplot ` , so It must be ` plt.show() `
` plt.scatter ` is the solution .
Everything belongs to ` matplotlib.pyplot ` module
Here are my experiments , for ` plt.figure() ` : #CODE
Here are my experiments , for ` plt.subplots() ` : #CODE
As you can see there are no such functions ` fig = plt.figure() ` nor ` fig , ax_lst = plt.subplots ( 2 , 2 )`
I know that generating a .dvi via latex and converting it to a pdf is possible but matplotlib doesn't seem to allow this procedure .
But this is invoking ` AttributeError : ' numpy.ndarray ' object has no attribute ' autoscale_None '` .
You have to import the ` pyplot ` module of ` matplotlib ` and call the
This ` plt ` is an alias for ` matplotlib.pyplot ` , so when
.plot is matplotlib.plot
Perhaps you want this : ` df [ ' Strike '] .hist()
Why is my plt.savefig is not working ?
` pyplot.gcf() `
` figure.get_window_extent() `
And how would I implement them via matplotlib / pyplot ?
Streamlines on a triangulation with matplotlib
For that I used griddata .
` Streamplot ` should hopefully be able to handle this gracefully as in this example :
It has an example for of the Poisson equation ( which models heat conduction ) with Dirchlet boundary conditions in the tutorial ( #URL ) .
But even after googling for graphical objects and the definition of ` set() ` I am not sure how this would be introduced in your syntax .
So I used ` plt.close ( fig )` in mainwindow destructor fuction .
I assume it is associated with blocking feature of show() method , but i don't know what is exact problem .
I don't think using ` pyplot ` when embedding matplotlib in a GUI is a good idea .
Just call ` plt.ion() ` right after importing it .
Interactive pcolor in python
I checked it and although it does not have the equivalent of pcolor in pyplot , it has figure.image that can be used , although does not seem to have as many options as pcolor .
You are looking for set_xticklabels
` ax.xaxis.set_major_formatter ( ticker.FormatStrFormatter ( ' % .1f '))` switches the scientific notation off .
For customizing limits , check ` axes.set_xlim() ` and ` axes.set_ylim() ` .
It would however provide a method set_powerlimits .
I'd say your best bet would be to subclass ` ticker.ScalarFormatter ` and override the corresponding methods .
Matplotlib Line2D unexpected behavior
You have given line2D ` ( x1 , y1 ) , ( x2 , y2 )` , but you need to give it ` ( x1 , x2 ) , ( y1 , y2 )` #CODE
1 ) what you are looking for is most probably some combination of get_yticks() and set_yticks : #CODE
you need to turn ` x ` and ` y ` into type ` np.array ` before you calculate ` above_threshold ` and ` below_threshold ` , and then it works .
` autofmt_xdate ` is a method of ` plt.figure ` , so you need to have ` fig =p lt.figure ` and then ` fig.autofmt_xdate() ` ( see my edit above )
` plt.legend ` doesn't work
e.g. ` plt.scatter ( x [ below_threshold ] , y [ below_threshold ] , color= ' green ' , label= ' below ')` before you call ` plt.legend() `
Object-oriented access to fill_between shaded region in matplotlib
As the documentation states ` fill_between ` returns a ` PolyCollection ` instance .
my_line = ax.plot ( x , y );
I tested , savefig() works fine , it seems only the inline remote graph have issues .
Background color of quiverkey in matplotlib
Using unstack() is one way .
Sankey diagrams with crossing branches
I have tried ` draw() ` , ` show() ` , basically anything I've found on ` pyplot ` about this .
If so , you _don't_ want things tracked by pyplot in that sense .
If you're not writing a separate gui application , though , then it's best to create figures using pyplot for exactly the reason you just mentioned .
Could you post the output of print ( dataframe.head() ) ?
dynamic graph - django and d3.js instead of matplotlib.animation
TypeError : ' builtin_function_or_method ' object has no attribute ' __getitem__ ' -- do you know what this means ?
This results to huge xaxis interval far away from the interval of y2 .
I've tried ` delaxes ` but still it does not change something .
Xaxis interval y1 ( y2 ) ax1 : ( - 19.0 , - 10.0 ) ( correct )
Xaxis interval y1 ( y2 ) , ax1 : ( - 100000.0 , 800000.0 ) ( wrong )
Xaxis interval y1 ( y2 ) ax2 : ( - 100000.0 , 800000.0 ) ( wrong )
plt.axes ( define range for y1 , y2 )
Xaxis interval y1 ( y2 ) , ax1 : ( - 19.0 , - 10.0 )
Python " set_over " / " set_under " equivalent in R ?
Matplotlib troubleshooting , matplotlib.pyplot.xlim()
I am having difficulty understanding how ` matplotlib.pyplot.xlim() ` works .
Not sure if it can be achieved using rcParams in seaborn .
Thanks @USER for subplot() .
The easiest way is numpy.loadtxt .
Have you tried ` import matplotlib.pyplot as pl ` ?
I thought one can adjust this by matplotlib.use ( ' GTKCairo ') , but this has no effect .
Change a rcParams keymap to right mouse click ?
render() returns a string , but it doesn't write a file directly .
Currently the imshow isn't getting updated .
I had a similar problem with redrawing on pcolormesh ( i.e. it didn't redraw ) .
Z , xedges , yedges = np.histogram2d ( x [ #URL bins=150 )
Faulty " normed " option in python matplotlib.pyplot.hist ?
` normed ` should be a boolean not a string in ` matplotlib.pyplot.hist ` ( see #URL )
The argument ` normed ` expects a boolean not a string in ` matplotlib.pyplot.hist ` .
If ` griddata ` with ` nearest ` introduces too much connection for your case , maybe ` cubic ` would improve .
Maybe you need some form of adaptive mesh refinement type scheme , using ` griddata ` with ` interp_grid ` locally refined near complex features ?
EDIT : I'm using the ` plt.subplots ( 2 , 2 )` wrapper .
Following dienzs answer , I tried ` plt.subplots ( 2 , 2 , sharex=True , sharey=True )` almost right , but now the ticks are gone except for the left and bottom row .
I should have mentioned I'm using the ` plt.subplots() ` wrapper .
H , xedges , yedges = np.histogram2d ( x [ 1:1000 ] , y [ 1:1000 ] , bins =( 10 , 10 ))
Try ` x_subsampled = x [ np.random.rand ( * x.shape ) < fraction ]` .
As far as I know ` ax.bar ` does not work like that .
PS : I am trying to implement PCA .
Even though ` plt.plot ` does this ?
plt.plot is drawing a line segment , not a line .
Then limit the ` plt.xlim ` and ` plt.ylim ` to some sensible value .
` ax.spines [ ' bottom '] .set_position ( ' zero ')
ax.set_xticklabels ( labels , rotation = -90 `
Hence what you are looking for is : plt.clabel
Python 2.7 : Unable to import matplotlib.pyplot
So the problem is that you only call ` ax.set_xticklabels ` .
By calling ` set_xticks ` the ` AutoLocator ` is replaced under the hood with a ` FixedLocator ` .
You can also just print the pivot_table itself .
df3 [ c ] = df3 [ c ] .astype ( ' category ')
File " / usr / lib / python2.7 / dist-packages / pandas / core / generic.py " , line 2018 , in astype
dtype , copy=copy , raise_on_error=raise_on_error )
TypeError : pivot_table() got an unexpected keyword argument ' annot '
RuntimeError : RRuleLocator estimated to generate 2879 ticks from
Am I using the datelocator wronly ?
sigma ( log10 ( yi ) )= log10 ( e ) * | sigma ( yi ) / yi |
` fig , ax = plt.subplots ( nrows=2 , ncols=1 , sharex=True , sharey=False )`
comment regarding : ` plt.subplots_adjust ( bottom= 0.25 )`
comment regarding : ` plt.axis ([ 0 , 10 , -1 , 1 ])`
comment regarding : ` ax [ 0 ] .axis ([ pos , pos+10 , -1 , 1 ]) vs ax [ 1 ] .axis ([ pos , pos+10 , -1 , 1 ])`
` plt.subplots_adjust ( bottom= 0.25 )`
` subplots_adjust ( left=None , bottom=None , right=None , top=None , wspace=None , hspace=None )`
` plt.axis ([ 0 , 10 , -1 , 1 ])`
` ax [ 0 ] .axis ([ pos , pos+10 , -1 , 1 ])`
` ax [ 1 ] .axis ([ pos , pos+10 , -1 , 1 ])`
Regarding 5th : calling ` plt.subplot ( 211 )` is not switching me to ` ax [ 0 ]` but ratter overwriting it ?
It uses ` matplotlib.pyplot.scatter ` , ( #URL ) which is why it has this restriction .
` annot=True ` is an argument of ` heatmap ` , not ` pivot_table ` : #CODE
You can do so using ` set_yticks ` this way : #CODE
ex ` ax.get_yaxis() .set_major_locator ( MultipleLocator ( 1 ))`
` import matplotlib.pyplot as plt `
Most surprisingly this backend worked with ` plt.draw() ` ( except for the fact that the window freezes ) but throws the following warnings and errors when running it with ` plt.pause ( 0.0001 )` : #CODE
I now wonder : How do I correctly ` draw() ` with the ` Qt4Agg ` ?
( On a side note : What exactly went wrong in the ` pause() ` -call of the ` GTK3Agg ` backend ? )
For complex arguments the arctan is given by :
This might look like : u0 - B ( x ) .real .
pyplot x-axis being sorted
Just do plt.plot ( c ) .
This is done with plt.xticks .
Matplotlib imshow low quality compared to OpenCV
out_listener.on_data ( i + random.randint ( -5 , 5 ))
AttributeError : ' builtin_function_or_method ' object has no attribute ' randint '"
Try using ` numpy.random.randint ( -5 , 5 )` instead .
out_listener.on_data ( i + numpy.random.randint ( -5 , 5 )
I know the command ` plt.scatter ` will do the trick .
Try ` plt.scatter() ` instead of ` plt.plot() `
I know the command plt.scatter will do the trick .
so something like ` sample_date [[ 0 , 6 ]] .plot() ` ?
I'm not sure why the x_axis is formatted like that in pandas , it's possible your 2 line issue is because matplotlib doesn't understand datetime64 dtype correctly , see this : #URL
` basemap ` objects are not one-to-one ` pyplot ` objects .
By supplying ` gridspec_kw ` you can tell the underlying ` GridSpec ` object how you want the widths to be specified : #CODE
get_figwidth and get_figheight
What kind of problems are you having wtih ` set_yscale ( ' symlog ')` ?
@USER How do you call ` scatter() ` ?
I have a question using matplotlib and ` imshow ` .
Your ordering of PCA and KMeans is screwing things up ...
Perform a separate ` PCA ` on your cluster centroids , which produces a completely different 2D subspace for the centroids .
If not , then you might not want to be so aggressive in your PCA .
` fig , ax = plt.subplots() `
This should properly label the x-axis without the need for the plt.xticks ( yearList ) , but if you can try it with and without .
Deleting plt.xticks ( yearList ) causes matplotlib to scale the x-axis automatically but this is not what i need .
You can check ` axes.get_children() ` for ` Line2D ` instances .
And then call ` plt.show() ` after the loop
x = np.array ([ 1 , 3 , 4 ]) , ([ 1 , 2 ])
having issues using ` set_xlim ` .
` plt.hist ( x , bins=5 , range =( 7 ., 11 . ) , facecolor= ' None ' , linestyle= ' dashed ' , linewidth=2 , normed=1 )
So ` set_dashes (( 3 , 3 ))` should produce something different then ` set_dashes (( 15 , 15 ))` .
` show() ` is the method to display the graph .
Finally , generate sequences with ` np.linspace ` rather than ` range ` .
I thought about saying that , but I assumed that if autofmt_xdate didn't work , that wouldn't either .
Notice the line ` plt.title ( r " $\displaystyle\sum_{n=1}^\infty\frac{-e^{i\pi}}{2^n}$ ")` .
@USER matshow() returns a AxesImage .
Try ` ax.set_xlim() ` .
I tried ` df.dropna() .xs ( blabla ) .plot ( blabla )` but won't accept it .
Looking to the documentation for pandas.DataFrame.plot , the only reference to the x labels and ticks being invisible is in the sharex option .
You want ` fill_between ` : #CODE
plt.figure ( figsize =( 14 , 9 ) , dpi=600 ) #CODE
Here we change ` imshow ` as #CODE
i had some solution with np.where but this is better
Assuming ax is ` matplotlib.axes.Axes ` .
i already have labels on the xaxis .
Then you just need to run `` df.plot() ``
" plt " is traditionally used for pyplot , not pylab .
( ` import matplotlib.pyplot as plt `) .
But if we look to the yaxis , I can see of the left the y corresponds to 10 , but on the right , it corresponds to 1 / 10= 1.0 .
But as the OP is asking for a duplicate yaxis , here is the updated version of the code : #CODE
But if we look to the yaxis , I can see of the left the y corresponds to 10 , but on the right , it corresponds to 1 / 10= 1.0 .
ax.set_xticks ( xx [: : 5 , 0 ])
ax.set_xticklabels ( times [: : 5 ])
ax.set_yticks ( yy [ 0 , :: 5 ])
Of course , the obvious way to go about the problem would be to just call pandas own plot-function ` DF.plot() ` , yielding
From briefly skimming through it , I believe this might help : Change this line ` self.fig.sns.distplot ( df [ C ] .dropna() , 25 )` to ` sns.distplot ( df [ C ] .dropna() , 25 , ax= self.graph )` .
I noticed that I didn't have to call ` plt.show() ` or its variants for this part , which I don't know whether it's significant or not .
I just had to call ` np.copy() ` since I forgot arrays are mutable in Python .
I'm not even calling pyplot in my code .
Exactly , so you can do ` i = np.where ( ( x > 11 ) & ( x < 20 ) & ( y > - 0.1 ))` , right ?
Actually , there is no need for using ` np.where ` .
I have made a pivot_table that looks like this :
` TypeError : must be string , not numpy.ndarray `
You try to call ` set_ydata ` on the ` ax [ 0 ]` ( or ` ax [ 1 ]` , respectively ) .
` set_ydata ` is a method of ` Line2D ` artists .
TypeError : boxplot() got an unexpected keyword argument ' labels '
` set_xticklabels ` .
I had no idea about the FuncFormatter .
Updating sankey diagram using sankey handle in python
I'm trying to create a live updating sankey diagram using python .
ticks in ` x-axis ax.set_xticklabels ( times [: : 10 ] , color= ' lightseagreen ')`
Additionally call ` ax.minorticks_off() `
Additionally call ` ax.minorticks_off() `
Exit graph window using matplotlib.pyplot in terminal ?
I wrote a command-line program in ` Python ` using ` matplotlib.pyplot ` and ` argparse ` .
How can I exit this matplotlib.pyplot graph window from the terminal ?
Naively one would expect something like the following , but plt.boxplot doesn't support labels .
yerr = np.array ([ ])
I want to produce in python with matplotlib / pyplot
` plt.hexbin ` makes this particularly easy : #CODE
Matplotlib darker hsv colormap
Is there a way to darken or make smoother the HSV colours so they look more like this
I initially tried to make the question short since mapping the vector directions into an HSV color palette is not very easy and my code is lengthy so it would complicate the post .
And then modify the call to pcolormesh : #CODE
Also ` ax.plot ` uses these two .
I am having difficulties importing ` matplotlib.pyplot ` when I am using ssh to access my local lab cluster .
I have tried to just ` import matplotlib as mpl ` and this is fine , so something specifically about importing ` pyplot ` is wrong here .
Try ` matplotlib.use ( " Pdf ")` before importing ` pyplot ` .
Perfect , ` .use ( ' Pdf ')` worked like a charm .
import matplotlib.pyplot as plt
This line ax.scatter ( x , y , color=colors ) just gives me , I'm using iPython Notebook
I tried this , but I'm getting ValueError : to_rgba : Invalid rgba arg " 0 255
I'm attempting this with the .format string method .
Before when i used df.plot() instead of ax.plot , i got the plots though
TypeError : object of type ' instancemethod ' has no len() `
Interestingly , there's often a method for an ` ax ` object corresponding to one for ` matplotlib.pyplot ` .
I think overwriting ` plt.scatter ` is a bad idea .
` import matplotlib.pyplot as plt `
` plt.figure ( 1 )`
` plt.axis ([ f0-10 *BW , f0 + 10*BW , 0 , 20 ])`
` plt.grid() `
` plt.show() `
@USER Yeah after doing some research , I am inclining towards this conclusion that this transparency option with imshow isn't compatible with RGB images , if not straight-forward with masking using ` np.ma.masked_where ` .
` plt ` usually refers to the ` pyplot ` module ( if imported as ` import matplotlib.pyplot as plt `) .
In a very simplified manner ` plt.plot ` is built up like this : #CODE
Thus ` plt.setp ( labels , rotation=45 )` does something like : #CODE
f.gca() .invert_xaxis()
` plt.colorbar() ` ?
I should have used OffsetImage and AnnotationBbox .
I should have used OffsetImage and AnnotationBbox .
If I type these commands line by line into ipython console , there is no graph displayed after the plt.show() command .
I'm getting a ` AttributeError : ' JointGrid ' object has no attribute ' get_xlim '` .
-- ` dir ( g.ax_joint )` ; aha , there's ` set_ylim ` , etc .
So I wasn't sure ` imshow ` was the best way to do this since its going to be running in the background .
How about ` plt.axis ( ' off ')` ?
TimedAnimation . init ( self , fig , ** kwargs )
line , = ax.plot ( x , y , z , ' ro ')
TypeError : object of type ' float ' has no len()
import matplotlib.pyplot as plt #CODE
@USER uhh , adding plt.show() makes sense .
Because of this , ticklabel_format has no effect .
What is * wrong * when using ` imshow ` ?
I have solved this issue by using Matplotlibs gca() and related functions for example : plt.gca() .get_title()
I'm aware , that ` twinx() ` almost does the trick like so : #CODE
matplotlib's ` twinx ` is what you're looking for .
It is because you are calling ` plt.scatter ` with `' bo '` inside .
The above works only for ` plt.plot ` !!
Whereas for ` plt.scatter ` you should instead call it this way : #CODE
The meridian labels aren't xaxis labels .
have you tried imshow or pcolor ?
The " set_xlabel() " seems to be ignored .
( The y-label * could * be centered with a call to plt.text but that seems like a dirty solution to me ... ) Please ask in a new question .
You'll need to create your own class , like they do , that defines the ` legend_artist ` method , which then adds squares and circles as appropriate .
Also I have trouble when I try to import numpy or matplotlib.pyplot , so is there a way I can do this ?
What about ` plt.show() ` ?
` plt.show() ` did the trick
dropna : boolean , optional
I think I am asking a simpler question : let's say I wanted ` plt.show() ` to always return contours with each numerical value labeled .
import matplotlib.pyplot as plt
plt.ion() #CODE
Basemap-Plotted Quadrilaterals have Irregular Gaps - Matplotlib with Pcolormesh and Pcolor
I am completely baffled by the behavior of Basemap's pcolormesh and pcolor .
For some reason , the nilearn object from ` plot_stat_map ` does not have an attribute ` set_visible ` unlike the matplotlib object from ` axvspan ` .
matplotlib.pyplot and wx importing problems using python 2.7.10
These two are matplotlib.pyplot and wxpython .
Have you tried setting ` alpha ` for each hexbin ?
I just thought it might be useful for you :) The documentation says that ` mmap ` behaves like a file object , and the ` imread ` help says that you can pass it a file object .
I guess it might be possible to construct a mmap object with your filename , and pass this object to imread .
@USER numpy's ` memmap ` will probably not be useful for you .
You are looking for the ` extent= ` keyword argument to ` imshow() ` as detailed in the documentation
1 ) how the settings for parameters that are not specified ( or commented out ) in the current rcParams file come about .
2 ) How to change those , not touching the rcParams file .
Same rcParams , same scripts , different machines .
Using different scripts or different rcParams files oneach machine is also not an option .
inpolygon for Python - Examples of matplotlib.path.Path contains_points() method ?
I have been searching for a python alternative to MATLAB's inpolygon() and I have come across contains_points as a good option .
contains_points ( points , transform=None , radius= 0.0 )
( I'm not interested in ` interpolation= ' nearest '` in ` imshow ` . )
` plt.clf() `
The reason you're only getting a single click to work is that you're calling ` plt.show() ` in your " on-click " callback .
You only want one of those things to happen , so you should call ` fig = matplotlib.figure.Figure ( ... )` instead .
Thanks a lot Joe , what can I call instead of plt.show ?
` plt.show() ` is equivalent to your ` window.mainloop() ` .
Why not ` df [[ ' tally ' , ' costs ']] .plot ( ...
plt.xlim ([ 0 , 10 ])
This way , I don't end up with so many Line2D objects .
Something similar to the ` fig.set_size_inches ( 18.5 , 10.5 )` of matplotlib .
This works , but just pass ` figsize ` to ` plt.subplots() ` ; there is no need for an additional line of code to call ` set_size_inches ` .
Using the ` df.plot() ` is very convenient , and I like the layout it gives me .
This often digresses into me trying to recreate the exact graph in ` matplotlib ` , which turns into a couple of hundred rows of code and it still does not work quite the same way as the ` df.plot() `
Or , ` fig , ax = plt.subplots() ; df.plot ( ax=ax ); ax . ...
Using ` pyplot.ion ` and ` pyplot.ioff ` , as detailed here .
Using the ` matplotlib.animation ` package , as detailed in this very comprehensible example .
For example , if you are using ` pyplot.contour ` , the returned ` QuadContourSet ` has no ` set_zdata ` method , but this will work : #CODE
The object returned by ` plt.contour ` is a ` QuadContourSet ` .
Label Areas in Python Matplotlib stackplot
I would like to generate labels inside the areas of a matplotlib stackplot .
Furthermore , I would like to do this as efficiently as possible using ` np.sum() ` .
Using matplotlib , the xaxis is ` arr ` .
I think what you are looking for is ` cumsum ` .
Try ` fig , ( ax , ax2 , ax3 , ax4 , ax5 ) = plt.subplots ( 1 , 5 , sharey=True )` instead .
You are not calling ` plt.subplots ` correctly .
This ` np.array ([( 1 , 0 , 0 )] *len ( y ))` is really neat !
How to fade color to transparent using hexbin and matplotlib ?
` matrix_n = np.linalg.matrix_power ( matrix2 , i )`
FuncAnimation .
Here is an example to do it without ` matplotlib.collections.LineCollection ` .
I want to overlay differently colored regions with pcolormesh .
Change ` Z2 [( X+Y ) =10 ]= np.nan ` to ` Z2 = np.ma.masked_array ( Z , ( X+Y ) =10 )` .
AttributeError : ' numpy.ndarray ' object has no attribute ' get_figure ' .
As recommended in this other question , normally I would skip the get_figure() and the fig.savefig() , opting instead for plt.savefig , but I am making multiple figures .
@USER ` fig , ax ` are created in pair when you call ` plt.subplots() ` .
Matplotlib add_subplot & change_geometry bug ?
Anyway , I came across this behavior of ` add_subplot ` followed by ` change_geometry ` that I didn't expect .
@USER Good call on the ax.set_xlim ( 0 , 15 ) works like a charm .
Perhaps you can fake it with [ set_yticklabels ] ( #URL ) and set_yticks
Solution : increase your sampling frequency ( ` x = np.arange ( 0 , 50 , 0.01 )` for example ) .
Thanks Tom , although I think something additional is happening as I still see the performance issues after using ` plt.ion() ` .
Try using np.loadtxt instead .
Why does matplotlib.figure.Figure behave so different than matplotlib.pyplot.figure
The changes involved switching from ` tight_layout ` to ` set_tight_layout ` to avoid a warning , as mentioned on #URL .
You did have one before , but the ` pyplot ` API " hid " it from you under the covers so you didn't realise it .
The reason you see this behaviour is because of how ` matplotlib.pyplot ` works .
The crucial bit is that ` pyplot ` is stateful .
` pyplot ` doesn't know anything about ` self.fig ` .
Have you tried increasing the linewidth in your calls to ` grid() ` and ` xaxis.grid() ` ?
You can specify more customizations for the ` .figtext() ` by overloading the method such as coloring and bold / italicization .
after adding the line ` plt.tight_layout() ` , it made matters worse :
Edgecolor of violinplot in Seaborn is not determined by the hue
I have created a violinplot substantially similar to one in the Seaborn gallery : #CODE
I think this is just how seaborn's violinplot currently works .
Have you tried changing your code to ` import matplotlib.pyplot as plt ` ?
` set_under ` changes the ` alpha ` of the cmap's ` lut ` attribute , but it seems ` TriMesh ` overwrites it with the ` alpha ` given to ` tripcolor ` , which defaults to ` 1 ` if not given .
Cf the doc on tripcolor :
What happen if you do ` fig.savefig ( ' figure_1.png ' , dpi=96 )` for example .
I went through the docs of imshow and skimage.io.imread .
I have already implemented the ` ax.xaxis_date() ` so that shouldn't be the problem .
Should ` xasis_date() ` be ` xaxis_date() ` ?
How Shall I make this as 1 , 10 , 100 etc .?
As expected , the solution is in the ` matplotlib.offsetbox ` module : #CODE
In fact , ` AnnotationBbox ` does everything needed and alot more with numerous options .
so call ` reset_index ` and then ` set_index ` ?
Try ` fig.suptitle ( " Averaged 532 nm Total Attenuated Backscatter ")`
Checking the docs for twiny gives the note
Maybe it is read as a string by np.loadtxt() .
a line before ` plt.show() ` .
` update() ` again .
So , ` update() ` will be called again , which will call ` set_val() ` again , then ` update() ` again and so on ...
matplotlib.mlab.magnitude_spectrum
matplotlib.mlab.psd
Right now I am using the ` matplotlib.patches ` module .
Is there a way to both simultaneously specify the location of major ticks and ' auto ' -fill the remaining up to a certain number like ` MaxNLocator ` ?
Currently I define my own methods for ` FuncFormatter ` like this : #CODE
add_subplot() not working if fig = plt.figure() is in another cell in Ipython Notebook
fill_between in matplotlib does not handle " rasterized=True " option correctly
How can I specify the * nix read / write permissions for an output file ( e.g. PDF ) produced by the matplotlib ` savefig() ` command from within a Python script ?
savefig() does not have capability to change file permissions .
matplotlib.pyplot.savefig() does not have capability to change file permissions .
Matplotlib GridSpec without pyplot
but isn't your ` fig ` from ` pyplot ` ?
I have done this using Gridspec : #CODE
You probably want ` twinx ` as in [ this example ] ( #URL )
I am guessing that ` g ` is a ` numpy.ndarray ` .
I added this : plt.plot ([ x_min , x_min ] , [ y_min , y_max ] , [ -30 , -30 ] , ' k- ' , lw = 2 )
Regarding the ` backend ` , as suggested in the pyplot documentation :
This is related to if you have ` plt.ion() ` called or not which affects how aggressively mpl ties to the gui event loop .
Did you include the parenthesis ``` iteritems() ```
matplotlib.get_backend() MacOSX
If anyone is interested , the code to be added before importing pyplot is : #CODE
Why avoid ` imshow ` ?
: import matplotlib.pyplot as plt
plt.subplot ( 2 , 2 , 1 ) , plt.contour ( np.transpose ( z ))
import matplotlib.pyplot as plt
x = np.random.normal ( mu , sigma , 1186 )
y = np.random.normal ( mu , sigma , 1186 )
plt.subplot ( 2 , 2 , 3 ) , plt.scatter ( x , y , c =d ensity )
plt.show() ` @USER and @USER
What do you want to do with - ` plt.annotate ( grid_x , grid_y )` ?
matplotlib.colors.Normalize ( vmin= numpy.amin ( Z ) , vmax= 0.15 )
it is ` plt.show() ` and not ` fig.show() `
Now you can just feed in ` final_sats ` to ` ax.set_xticks ` comme ca : #CODE
` pylab.scatter ( x , y , c=zip ( a , b , numpy.zeros ( 50 )))` ?
` hold() ` line does not seems to work .
I have used plt.close() and it works .
Length-1 Arrays and Python Scalars Via plt.text
After reviewing the plt.text documentation , it appears that the plotted value ( third arg ) has to be a number and that the number has to be a whole number , NOT a number with decimals .
Here's what I have for coding now : " fmt = temp [ 0 ] .split()
plt.text ( grid_x , grid_y , list_of_floats )"
fmt = temp [ 0 ] .split()
print type ( temp ) -> " numpy.ndarray " , print type ( temp [ 0 ]) -> " "
applying the matplotlib draw() freezes window solution to special case
Being new to python , I've come upon the matplotlib draw() freezes window problem myself and found the solution on this site : #CODE
read the documentation : matplotlib.pyplot.subplots
` pyplot.subplots() ` returns a tuple ` fig , ax ` which is unpacked in two variables using the notation #CODE
` ax.hist ( yourdata )` ?
For completeness , ` numpy.histogram ` is what I was looking for !
When is matplotlib's pyplot.figure redundant ?
So yes , weather or not you call ` plt.figure ` yourself doesn't really matter .
Thanks for answering , I just don't comprehend the BoundaryNorm class .
This runs , and gives more colour quantisation levels than matplotlib.colors.Normalize
I am using errorbar from matplotlib .
Anyhow , you can compensate for the length change by using a value for yerr that is proportional to the y coordinate of the errorbar .
data0 = df.loc [ df [ " binary "] == 0 ]
which version of python you are using .?
changing the delimiter to ' , ' worked great -- however , if i have a huge dataset with thousands of rows , I need to somehow automate the append() command .
matplotlib subplot2grid doesn't display correctly
I'm using subplot2grid to display graphs .
but if I have 3 overlapping point , with the set_sizes method will I create 3 overlapping " big " circles ?
What about a hexbin ?
In this case try my answer with ` fnx = lambda : np.random.randint ( 5 , 50 , 10 ) .values .astype ( np.float64 )` which enforces the elements to be actual floating point numbers .
In python 3.x ` keys() ` , ` values() ` and ` items() ` return views .
Without the dtype specification #CODE
Because of matplotlib.use call , you will want to import seaborn after MPL imports .
before each call to ` plt.savefig ` .
Linear Regression fill_between with matplotlib
I have attempted a ` np.linspace ` method but I have received the following errors for a few methods that have worked for me previously .
Your solution works if you call plt.bar() instead .
I'm aware of " fill_between " , but I'm unable to work it into my code , primarily because I'm having trouble defining x and y , as in #CODE
fill_between ( x , days_len , alpha = .2 )
` import matplotlib.pyplot as plt ` or just ` import matplotlib ` was not run .
Here's the docs page for the ` pandas.DataFrame.hist ` method .
which I later do a ` plt.show() ` on .
fig.autofmt_xdate() supresses ax.set_position()
However , this only works when I omit fig.autofmt_xdate()
` fig.autofmt_xdate() ` automatically calls ` subplot_adjust() ` which messes up your layout .
The two arguments you're passing to safezip are of different sizes .
Thanks to @USER - Found out that this is a problem with DatetimeIndex as x-values .
" Thanks to @USER - Found out that this is a problem with DatetimeIndex as x-values .
Thanks to @USER - Found out that this is a problem with DatetimeIndex as x-values .
So I guess using the .grid ( in_= self.display_frame ) does not make it a child of self.display_frame ?
schechter_range = numpy.linspace ( 10.0 , 11.9 , 10000 )
plt.draw() was the missing line .
The " get_loc " returns " KeyError : 1 " from " Python 2.7.6.1 \App\lib\ site-packages \pandas\tseries\ index.py 1178 " .
Cxy = matplotlib.pyplot.cohere ( y1 , y2 , NFFT=16 , noverlap=0 )
Both [ matplotlib.mlab.cohere ] ( #URL ) and [ matplotlib.pyplot.cohere ] ( #URL ) do have a parameter ` window ` .
I have attempted to modify their module slightly by importing matplotlib.pyplot and running the code as : #CODE
I've tried both ' import matplotlib.pyplot as plt ' and from matplotlib.pyplot import * but still no joy
I'm trying to determine if there's a way I can control the visibility of a PatchCollection in an IPython / Jupyter ( 3.2.x ) notebook .
I've assigned the label " routes " to my PatchCollection ( ` pc_v `) using ` set_label() ` .
Does ` fig = plt.figure ( figsize =( 30 , 1 ))` work ?
I meant fig.set_size_inches ... not set_figsize .
The post you link refers to ` set_fig_inches ` , ` forward=True ` is not an option ` set_figwidth ` or ` set_figheight ` .
Kind of annoying that ` set_figwidth ` or ` set_figheight ` doesn't seem to work .
It is the same as a combined ` set_figwidth ` and ` set_figheight `
It's shorter than your current code : ` fig.set_size_inches ( 30 , 1 , foward=True )`
I based my heatmap off of : Heatmap in matplotlib with pcolor ?
However , the two subsequent calls to tricontourf() do not work simultaneously .
@USER : Very true ; indeed adding ` alpha= 0.5 ` to each of my ` ax.tricontourf() ` instances solved the issue .
What are the functions of polyfit and poly1d ?
Documentation for polyfit
Documentation for poly1d
You need a different method call , namely ` .set_rotation ` for each ` ticklable ` s .
` barplot ` returns a ` matplotlib.axes ` object ( as of ` seaborn ` 0.6.0 ) , therefore you have to rotate the labels this way .
Try using the ` na_values ` parameter of ` read_csv ` .
2 ) Print ` df.dtypes ` and see what's going on .
You can tell it to treat hyphens as NaN substitutes using the ` na_values ` parameter to ` read_csv ` : #CODE
Try importing from ` matplotlib.pyplot ` , rather than from ` pylab ` ( this is now the recommended way to import ` matplotlib ` ):
Out [ 33 ]: dtype ( ' int16 ')`
Python claims to be unable to import pyplot .
is that the ` c ` parameter of ` ax.scatter ` expects a sequence of RGB ( A )
Unsupported operand type ( s ) for ** or pow() : ' generator ' and ' int '
The method you are using is lifted from a question that's dealing with a different circumstance - I can't see why you don't just include @USER syntas in your ( already existing ) call to ` plt.legend() ` ?
If I do ` df [ ' speed '] .hist() ` , the grouping would make them too broad , like this :
Internally mpl converts your lists to ` np.ndarray ` .
How to make axvline continue the color cycle ?
Am I supposed to call plt.draw() for this to work ?
This is exactly what ` tight_layout() ` is supposed to adjust .
What you are seeing is a _feature_ of ` tight_layout ` , not a bug .
You can achieve a similar result using subplots_adjust .
Is there a way for me to build ` .add_axes() ` into this ?
A more automated approach can be achieved using the ` get_ticklabel_extents ` method .
Event handling : Matplotlib's Figure() and pyplot's figure()
Excellent , I attempted some stuff using ` ColorbarBase ` as well , but missed the ` orientation ` keyword .
import matplotlib.pyplot as plt
I recommend just : ` import matplotlib.pyplot as plt ; plt.figure() `
What's wrong with ` df.boxplot ( column= ' Col1 ' , by =[ ' X ' , ' Y '])` ?
Snippet , demonstrating ` ColorbarBase ` #CODE
import matplotlib.pyplot as plt
x , y , vel = np.loadtxt ( ' finaldata.txt ' , skiprows=0 , unpack=True )
plt.scatter ( x , y , s=27 , c=vel , vmin=0 , vmax= 0.09 , marker= ' o ')
plt.colorbar()
plt.savefig ( ' testfig.png ' , dpi=400 )
What you're looking for is a way to detect line intersections - if a single polyline crosses itself it inherently must form a loop .
` plt.legend() `
I have tried both ` scipy.interpolate.griddata ` as well as ` matplotlib.mlab.griddata ` and the results are similar .
import matplotlib.pyplot as plt `
` a= np.linspace ( 0 , 1 )
plt.plot ( a , np.sinc ( a ))`
` a= np.linspace ( 0 , 1 ) +2
plt.plot ( a , np.sinc ( a ))
Nothing happens when I call ` plt.show() ` or ` plt.gca() ` .
I've tried playing with the arguments in animation.FuncAnimation() but no luck , I've bare boned the code .
existing ` PathCollection ` instead of calling ` plt.scatter ` again .
Try including the ` vmax ` argument in hexbin .
` imshow ` enforces a 1:1 aspect ( by default , but you can change it with ` aspect ` parameter ) , which makes things a little trickier .
You can do a lot of thing with that , say , rotate the labels , using ` plt.setp ( cax.get_yticklabels() , rotation=45 )`
More Efficient Alternatives to plt.draw() in MatPlotLib
This uses directly the ` plt.legend ` option .
add_subplot
you should check out [ gridspec ] ( #URL )
It is somewhat a hack , there is a ` set_path ` method for the ` PolyCollection ` that ` fill_between ` returns , but it seems not to be functional .
set_radius is exactly what I need .
Here's an example using pyplot .
` plt.scatter ( X_r2 [ y == i , 0 ] , X_r2 [ y == i , 1 ] , s=40 , c=c , label=target_name , marker=marker )`
Note that setting the TkAgg backend after importing pyplot does not work either ; it crashes too .
Digging further , I found that ` plt.draw() ` can be substituted by two commands , #CODE
Matplotlib pcolormesh using RGB tuples
imshow may be what's necessary
*** rgb = np.random.random (( 10 , 3 )) *** is colour definition
` imshow ` did do the trick .
While there is a ` get_offsets() ` method and a ` set_offsets() ` method , those appear to be inherited from the 2d version and don't work properly for 3d .
` ax.locator_params ( axis= ' y ' , nbins=num )` is the easiest way to do this .
This can also be controlled by ` locator_params ` : #CODE
why not just ` plt.scatter (( 0 , 1 , 2 , 3 ) , ( 43 , 15 , 25 , 9 ) , c =( ' #ffffff ' , ' #ffffff ' , ' #ff0320 ' , ' #452143 '))` ?
I am setting ` fig.subplots_adjust ( hspace=0 )` for the 2D plots to share a common x-axis .
` dir ( ax )` includes ` yaxis ` .
` dir ( ax.yaxis )` includes ` get_label ` .
` dir ( ax.yaxis.get_label() )` includes ` set_x ` .
` help ( ax.yaxis.get_label() .set_x ` says : #CODE
I'm tinkering with this and ` ax.yaxis.get_label() .set_x ` doesn't appear to work .
You can do it with ` Axes.tick_params() ` method : #CODE
One more thing : when I run my snippet ( adding your line and changing legend() location ) , I end up with two images .
I try ` df.plot ( marker =[ " * " , " . "])` but doesn't work .
Of course , there are more files in the folder / hmi / kme / .fonts / Alegreya_Sans
Sorry , I don't know much about how font_manager works , but hopefully someone more knowledgable will be along soon :)
Cartopy can do ( A ) , and Basemap can do ( B ) , however Cartopy can only label gridlines on PlateCarree plots , and Basemap does not support transformation of images using ` imshow() ` .
Thank you a lot , it worked , but it did because it loaded from PySide despite of ` matplotlib.rcParams [ ' backend.qt4 '] = ' PyQt4 '` .
or : ` plt.plot ( xpointslist , ypointslist , " , " , c= " #008000 ")`
D3-like Sankey chart with matplotlib
The matplolib built-in sankey chart doesn't look very appealing ...
Its the following import pandas as pd my_data = pd.read_csv ( ' my_.csv ' , index_col = 1 )
array_data = np.array ( my_data )
import matplotlib.pyplot as plt
plt.plot ( x , y , color= ' black ' , linestyle= ' : ' , label= ' something something ')
plt.show()
The following should work , using ` pandas ` builtin ` DataFrame.plot() ` command .
I keep getting ` ImportError : No module named basemap ` butg it might be that you have to end with ` plt.show() `
show()
I've been attempting this by setting the parameters of the boxes after calling ` matplotlib.pyplot.boxplot ` as shown below .
However , when I create a pdf using , say , ` matplotlib.pyplot.savefig ( " output.pdf ")` the line is not solid , it's transparent also .
matplotlib.pyplot.plot ( *args , ** kwargs )
Setting ` va= ' bottom '` in ` plt.setp ` seems to yield better results .
So instead , you can access the labels you want from ` ax.get_xticklabels ` .
I understand the ' labels ' argument for setting the xtick labels .
However , as per my initial question , I'm interested in the ` labels ` property of the ` boxes ` key that's output by calls to ` matplotlib.pyplot.boxplot ` .
This value can be overridden by passing the ` dpi ` keyword argument to the ` plt.figure() ` call .
It appears that ` plt.annotate ` is a ` mpl ` feature that is not yet supported in ` mpld3 ` .
I have also enabled ` text.usetex ` on rcParams .
And I'm guessing plt.plot performs that task ?
Apologies also if this question has been dealt with previously on stackoverflow but I have looked extensively for the correct procedure for ` gridSpec ` but found nothing as yet .
For example , to make this one steeper , try ` ax.plot (( 1-d / 2 , 1+d / 2 ) , ( -d , +d ) , ** kwargs )`
Using python matplotlib.animation on cloud9
However , I still feel that turning interpolation off should be a supported feature in ` plot_date ` .
Hardcoding the points instead of using ` plt.ginput() ` also gives the correct result : #CODE
I think you just need a ` plt.draw ` before ` plt.show ` .
You can do that with ` plt.draw ` .
I tried what many other answers suggested with ` figure.tight_layout() ` to no avail .
I think the problem is with ` fig.autofmt_xdate() ` .
However , I still had an issue with missing xlabels when using gridspec - that was resolved by reverting to pandas 0.15.1 .
There is no key in ` matplotlib.rcParams ` to control it with a matplotlibrc file ( ` rcParams [ ' grid.linestyle '] = [ 6 , 2 , 1 , 2 ]` does not work ) .
you can do this by setting the ` linewidth ` of ` ax.grid ` : #CODE
If not , what versions of Julia , PyPlot , PyCall , and Python are you on ?
prop : None or : class : ` matplotlib.font_manager.FontProperties ` or dict
:d ata : ` matplotlib.rcParams ` will be used .
Matplotlib pcolor with varying Y bins
In this case there is no ` get_figure ` method as your code assumes .
I want to prepare some hexbin plots from Pandas .
My current attempt ( borrowing somewhat from Heatmap in matplotlib with pcolor ? ): #CODE
Try ` plt.pause ( 60 )` instead of ` time.sleep ( 60 )` .
Pycharm 4.5.3 debugger crashes when importing matplotlib.pyplot on Windows
Without the ` clf() ` line , you will see than number growing by 1 each iteration .
Animate a ScatterPlot with PyPlot
How to make a pyplot window larger than the screen and scroll-able
I'm not sure to understand if your problem is with mathtext or just with creating a custom label .
` plt.show ` isn't an issue .
You can call it like this : ` fig.add_subplot ( nrows , ncols , plot_number )` .
This is the most relevant part of my method ` Viewer.show ( ... )` , that instanciate the FuncAnimation
So , it confirmed that none of the FuncAnimation were garbage collected
I'm not sure I understand what's wrong with storing a FuncAnimation object in a class variable , but ` anim._stop ` just did the trick !
Before instanciating a new FuncAnimation , I called ` _stop() ` on it and now , I have no more artifacts and I checked garbage collector ( same as 2.d ) and objects are actually garbage collected .
Using Seaborn 0.6.0 , I am trying to overlay a ` pointplot ` on a ` violinplot ` .
A matplotlib developer , @USER , recommends using matplotlib.ticker for this .
Like plt.plot ( t1 , s1 , t2 , s2 , lw=2 ) or something like that ?
Answers to similar topics suggests that ` panel.canvas.draw() ` and ` panel.Refresh() ` should do the trick , but I've also tried ` panel.Update() ` and ` panel.canvas.Refresh() ` .
` plt.scatter ( x , y , c=z , cmap= ' YlGnBu ')` should do what you want
import matplotlib.pyplot as plt
xv = np.array ( x1 )
yv = np.array ( y1 )
zv = np.array ( z1 )
plt.scatter ( xv , yv , c=zv , cmap= ' YlGnBu ')
Thanks . plt.show did work .
plt.scatter ( x , y , edgecolors= ' none ' , s=marker_size , c= np.log ( void_fraction ))
Keep your call to ` imshow ` the same as you have it in the question .
Python set_picker behavior to allow selection anywhere
Specifically , how does the set_picker work ?
ValueError : to_rgba : Invalid rgba arg " [ ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' b ' , ' r ']"
` ax = plt.subplot() `
In my implementation ` Lasso ` is used in three different functionalities .
When I try to drag with the mouse using the control key , the Lasso manager becomes unresponsive ( including in the original code from matplotlib ) .
There is even a Python-function ` to_rgb ` which exactlyu does that .
Is this a problem of cartopy or matplotlib.tri ?
And I can now confirm that your example works and ` plt.savefig ` works with matplotlib= 1.3.1 .
The string `" - 18.381 - 172.320 5.9 " .split ( ' , ')` ( see the traceback you posted ) is going to yield ` [ " - 18.381 - 172.320 5.9 "]` .
` ymin , ymax = ax.get_ylim()
ymid = np.mean ([ ymin , ymax ])
ax.set_ylim ([ ymid - yrang / 2 , ymid + yrang / 2 ])`
` ax.yaxis.set_major_locator ( ticker.MultipleLocator ( base= 0.005 ))`
plt.show() not working in Sublime 2
For some odd reason , plt.show() is not working .
pyplot to 3d pdf
from matplotlib import pyplot
import matplotlib.colorbar
import matplotlib.artist as martist
Python Matlplotlib errorbar : some errors disappear
Fill_Between returns ValueError : Argument dimensions are incompatible
I am not sure you can do this with ` .plot ` method .
` LineCollection ` might also be helpful if you only have strait sections .
You can do this using ` plt.twinx ` .
` import matplotlib.pyplot as plt `
` set_xdata ` does not work .
` plt.boxplot ( myData [ ' MyColumn '] .values )`
You could inspect the whiskers ( ` maplotlib.lines.Line2D ` objects ) returned by ` df.boxplot() ` .
would you be able to briefly explain what are the numbers in ` np.linspace ( 0 , 0.7 , 3 )`
While importing pyplot from matplotlib it hangs
` from matplotlib import pyplot as plt ` #CODE
` x = np.arange ( 1 , N+1 )`
You can determine which backend you are using with the command ` matplotlib.get_backend() ` .
gca() ` outside of your loop .
In your case , you want to make a ` PatchCollection ` .
This question also prompted #URL as it _seems_ like ` CircleCollection ` should do what you want , but it is hard-coded to be area in points^2 .
More likely , you want to call ` plt.subplot ` .
Sorry , it should be ` set_title ` .
That gives me ` AttributeError : ' NoneType ' object has no attribute ' set_axes '` .
Line2D instance have the property ` dashes ` , which is a sequence of numbers .
Increase dpi with ` rcParams ` #CODE
You can pass in the number of bins you want as an optional argument . plt.hist ( hour_list , bins=24 )
Good question , ` plt.hist ( hour_list , bins= np.arange ( 24 ) - 0.5 )` will work .
See also the demos for [ ` matplotlib.pyplot.contourf `] ( #URL )
I tried ` plt.xticks ( np.arange ( 13 ) - 0.5 , label )
plt.hist ( hour_list , bins= np.arange ( 13 ) - 0.5 )` but it wasm't correct ( ' centred ') .
@USER ` fig , ax =p lt.hist ( hour_list , bins= np.arange ( 25 ) - 0.5 )`
If so - you really want ` bins= np.arange ( 25 ) + 0.5 ` .
I am trying this ` plt.xticks ( np.arange ( 25 ) - 0.5 , labels );
Using ` set_xlim ` works fine .
why are you giving ` plt.plot ` a barwidth ?
This is the type of thing that ` pcolormesh ` ( or ` pcolor `) is meant for .
On a side note , ` pcolormesh ` defaults to using no antialiasing for performance reasons .
Yes , the gallery has an [ errorbar example ] ( #URL ) .
Have you tried using [ ` twiny `] ( #URL ) ?
am I replacing plt.figure() with fig , axis1 = subplots() ?
1 Have you tried moving the ` plt.ylabel ` * before * the call to ` twinx() ` ?
from matplotlib import pyplot as plt
This is because the ` set_color ` method does not act on the facecolor , instead it should be ` set_markerfacecolor ` .
However , ` plt.show() ` should always work .
Might be better to recommend ` plt.show() ` in the comment .
Sorry , ` plt.subplot ` and ` plt.subplots ` are different commands .
If you're using the code I provided , make sure you're using ` plt.subplots ` .
ValueError : Colormap viridis is not recognized .
( ` cmaps.viridis ` is a ` matplotlib.colors.ListedColormap `) #CODE
In the latter case , it is impossible to tell how to vectorize ` fun() ` without actually seeing its code .
` pcolor() ` is used to visualize discreet arrays ; ` imshow() ` suits your purpose better : #CODE
The result for ` xaxis ` is : #CODE
Did you try ` ax.set_xlim (( 1,100 0 ))` ?
As suggested by paulH , this can also be done with ` sharey=True ` as part of ` plt.subplots ` .
I pasted this code snippet into what I've included in my answer right before plt.show() .
Xp : ndarray , 2-dimensional
column = np.array ( column ) .astype ( ' uint8 ') * 255
If you are making _many_ ` LineCollection ` might also be useful to you
The ` LinearSegmentedColormap ` is nice because it is very flexible , but ` cdict ` takes some getting used to .
Finally got it right with statsmodel using .density attribute
Please check the sequence of arguments to [ ` barh `] ( #URL ): ` matplotlib.pyplot.barh ( bottom , width , height= 0.8 , left=None , hold=None , ** kwargs )` -- ` bottom ` is y-coordinate of your bars , ` width ` is width of bars on the x-axis
` import matplotlib.pyplot as plt ` ref : #URL
File " C :\ Users\User\Downloads\Year 2\Own source\python\ ex21.py " , line 1 , in import matplotlib.pyplot as plt
import matplotlib.colorbar
import matplotlib.pyplot as plt
AttributeError : ' module ' object has no attribute ' pyplot '
` import matplotlib.pyplot as plt `
` plot() ` does not accept generators .
So you need to call ` gaussian() ` for each element in ` linspace() ` .You could try : #CODE
Animate a matplotlib sankey diagram
How can I animate a matplotlib Sankey diagram with multiple arrows , properly ?
Apparently , adding ` plt.close() ` after ` plt.savefig ( pp , format= ' pdf ')` worked .
Using fig.subplots_adjust ( left = 0.12 ) still gives the same results .
Just a guess : whatever ` saveas ` is , perhaps it requires that ` plt.show() ` has been called * before * ` saveas ` is called .
Have you tried ` plt.savefig ( ... )` ?
This is one of the reasons that ` set_ticklabels ` is dangerous , it is a pass-thru to ` FixedFormatter ` which should only be used with ` FixedLocator ` .
I'm not sure about how reliable MaxNLocator is in returning exactly the desired number of ticks , though .
You could achieve the same result using ` FuncFormatter ` instead of slicing the alphabet .
which has to be converted to dB by np.log10 ( cax [ 0 ]) .
` matplotlib.pyplot.xticks ( ` ` *args , ** kwargs ` `)`
I have a question about blitting in the FuncAnimation module of matplotlib .
I am using example code for Pyplot histograms taken from this page of the matplotlib website as a starting point to build something else .
Make plt.colorbar extend to the steps immediately before and after vmin / vmax
The result I expected was the same as from ` plt.scatter ( iris.sepal_width , iris.sepal_length , c= iris.petal_length )`
Change " axes() " to " ax " .
I can not change the code to ` plt.savefig ( ' figure.png ')` .
( Lets say " figure% d.png " with %d the amount of times show() has been called so far . )
By the way , you can let show() not block just using plt.show ( block=False ) .
plt.plot ([ 1 , 2 , 3 ])
plt.show() ` would work ?
But ` shapely.geometry.shape ( feature [ ' geometry ']) .contains ( point )` just returns points that are part of the LineString .
Haven't read through your code , but I'm pretty confident you should be able to do something good enough with matplotlib.pyplot.annotate
` leg_colors = plt.cm.Dark2 ( np.linspace ( 0 , 1 , 3 ))
yeah , note you have ` arr.mean() == 45.6 ` , ` np.median ( arr ) == 27.0 ` .
Using plt.figure() also gets the job done ...
I have tried using ax.set_aspect and passing ' aspect ' as a subplot_kw argument but to no avail .
What does this have to do with ` imshow ` ?
When ` imshow ` is called , it calls ` ax.set_aspect ( 1.0 )` , by default .
I think that ` tight_layout ` will override this setting , so you may need to turn that off .
So adjust you ` imshow ` command to : #CODE
And pass it to ` imshow ` as ` extent=extent ` .
Does it makes sense that ` ax.tick_params ( labelcolor= ' r ' , zorder=100 )` doesnt work ?
There is also [ np.nanstd ] ( #URL ) ;)
Yes , this is possible using matplotlib's fill_between .
However , what does ` maxy = plt.ylim ( ) [ 1 ] ` imply ?
instead of plt.plot .
The actual problem seem to be caused by the fact that pdfs are always calculated with 72 dpi and OffsetImage ignores that .
Does setting ` plt.figure ( figsize =( width , height ))` help as this should impact the PDF .
I am using csv2rec to read csv file .
ImportError : No module named pyplot
ages_matrix is a ` 2d ndarray ` and year_labels is a ` 1d ndarray `
Does ` plt.axis ( ' tight ')` help ?
And with the plt.setp method , how could I access the ticklabels ?
I guess that ` plt.setp ( axis.get_xticklabels() , ** axesFont )` should work .
How to embed matplotlib or pyplot into Python 3 ?
Can you say us the output of ` import matplotlib ; print ( matplotlib.get_backend() )` ?
I am not sure how the FuncAnimation works , because if I omit this call and just run " animate ( n ) " instead , then I have no errors .
As a complete example ( I'm also showing an example of using the ` extent ` kwarg with ` imshow ` just in case you weren't aware of it ): #CODE
I tried different things including ` sca ` , but nothing has worked .
` plt.sca ( main_ax )` should have worked .
Thankfully ( and oddly ) , setting the labels works when doing it via ` set_xticklabels() ` #CODE
Otherwise , call ` ax.autoscale ( False )` to disable autoscaling .
Could you explain a little more about this dtype ?
I'm sorry to keep bothering but dtype simply doesn't work for me for some reason .
The actual code used to do this from ` matplotlib.colors.Normalize ` is , #CODE
You are looking for the ` extent= ` keyword argument to ` imshow ` .
I used ` matplotlib.pyplot ` to generate graphs .
That's how ` plt.hist ` works .
It's ` plt.bar ` .
If your functions are calling ` plt.figure ` then they will create their figures .
How to determine the colours when using matplotlib.pyplot.imshow() ?
( That's actually how initialization works and how ` artist.set ( ... )` and ` plt.setp ` works , as well . )
Using fontManager instance from C :\ Users\ XX.matplotlib \ fontList.cache
findfont : Matching : family= #URL to Bitstream
That's done using ` pyplot.show() ` ...
> import matplotlib.pyplot as plt
plt.plot ([ 1 , 2 , 3 , 4 ])
Without using ` matplotlib.pyplot ` , did it work in your script ??
show() " ?
Unable to handle linspace properly
If you want the label to be displayed you need to call ` plt.legend() ` .
Why pyplot ( matplotlib ) is joining points randomly ?
Why is pyplot joining points randomly when I run this code ?
could you also provide the code for ` date2num() ` ?
It sounds like you're calling ` date2num ` on a float .
` date2num ` expects ` datetime ` objects .
( e.g. ` import matplotlib ; matplotlib.use ( " TkAgg ") ; import matplotlib.pyplot as plt ; plt.subplots() ; plt.show() `) How did you install matplotlib ?
I am using Pyplot in Python .
The clf() worked really well .
matplotlib imported but pyplot cannot be imported
` .grid() ` call signature : #CODE
I am also not very familiar with PyPlot or Python in general .
Using the ` matplotlib.animation ` module and its ` FuncAnimation ` class : #CODE
I'm using Matplotlib.mathtext to do the job ( from a translated latex raw string ) with the following code .
So , focus should rest on the ` MathTextParser ` and it could be a dpi issue .
Sticking some debug prints in _get_glyph within the BakomaFonts class .
Sounds like nobody uses ` matplotlib.mathtext ` intensely ...
However , if I explicitly specify fontsize to the call to to_png() with my example , the exclamation point appears .
We have a target now : ` MathTextParser ` .
It seems that this is related to the alpha handling of ` imshow ` :
I agree , the colours are definitely different ( more grey on the ` imshow ` , as you said ) .
daryl , easily fixed by adding the tight layout argument ` plt.savefig ( " test.png " , bbox_inches = ' tight ')`
According to the documentation on numpy.polyfit , it can also return residuals , which are the errors you are looking for .
You need this ` FormatStrFormatter ( ' % .2e ')`
Simply change ` majorFormatter = FormatStrFormatter ( ' %d ')` to what I showed you earlier and you'll see
` canvas.get_tk_widget() .destroy() ` .
What I've found is that the behaviour seems to what gets returned in the __str__ method .
However , I recently found that matplotlib.finance uses a local cache ( matplotlib.get_cachedir() tells me my cache is in ~ / .matplotlib ) .
How to change scale while using matplotlib.pyplot in pPython 2.7
` ax.set_ylim ` ?
Python : How to nest plt.imshow() in a For loop ?
How can I nest the ` plt.imshow() ` call inside a for loop , so that Python gives me n+1 figures ?
plt.figure ( dpi=100 )
figure() defaults to 80 dpi , while savefig() defaults to 100 dpi
I am using import matplotlib.pyplot as plt , so please don't change that .
ImportError : No module named matplotlib.pyplot even after installing from pip and apt
` x , y , z = np.meshgrid ...
If so you could str.strip them off
You might try putting the ` ax.scatter ( ... )` inside the for loop .
You need to pass the ` LogNorm ` into ` PatchCollection ( ... , norm= LogNorm() )`
@USER Do I need to pass anything additional to ` ColorbarBase() ` ?
x = ( x * 255 ) .astype ( np.uint8 ) MemoryError
... but they do not seem to relate to ` plt.scatter() ` .
fig2 = plt.figure()
have you tried ` df1 [ ' Volume ( BTC )'] .plot ( label= ' EUR Volume ' , ax=ax2 )` ?
import matplotlib.pyplot as plt
import matplotlib.colorbar
import matplotlib.artist as martist
or automated with ` ax.set_xlim (( 0 , data.max() +200 ))` .
An example could be ` plt.axes ([ 0.2 , 0.1 , 0.9 , 0.9 ])` .
matplotlib set_label_position no effect in 3d ?
@USER : it looks like in ` matplotlib v1.5.0 ` mplot3d now resepcts the ` {x , y} axis.labelpad rcParams ` #URL
[ pyplot Reference ]
you do not have to call plt.plot() inside the loop , I did it outside with my code example ( see other answer ) and it created 10 plots .
Incorrect indentation could also have caused your problem that you mentioned in the other comment : if your plt.savefig ( ... ) is not indented to be inside the loop , but outside , it would only be called once after the final iteration .
matplotlib tripcolor gives long triangles
` triangle = matplotlib.tri.Triangulation ( x2 , y )`
` plt.tripcolor ( x , y , triangle.triangles , z )`
` ax.plot ( maturity , yield , ' -o ')`
Here's an example , I used ` df.plot() ` in this case .
This section compares the boolean indexing based approach listed in this solution to ` np.tril_indices ` based one in the ` other solution ` for performance .
instead of ` raw [ np.tril_indices ( raw.shape [ 0 ] , -1 )] = np.nan `
I used ` raw [ np.tril_indices ( raw.shape [ 0 ] , 0 )] = np.nan `
AttributeError : ' numpy.ndarray ' object has no attribute ' getshape '
Beyond a single ` imshow ` , and for multiple plots of different types .
Does figimage not work for you ?
Perhaps figimage will work for you ?
Have you also checked ` help ( plt.contour )` ?
I am using the matplotlib fill_between command .
TypeError : ufunc ' isfinite ' not supported for the input types , and the
In both cases , the answer was to pass the .values attribute instead .
Below shows that .values is returning a np.ndarray .
So as I wrote this question , I realized that high.values gives me an ndarray of ' dtype = object ' .
I can pass a Series.astype ( float ) directly to matplotlib and it works fine .
No need to intermediate through an ndarray ....
Got it right with ` plt.legend() .set_visible ( False )` .
This can be done with ` axhline ` or ` fill_between ` functions , #CODE
I am having the same problem , while already calling ` plotfile ` with ` newfig=False ` .
You need ` pcolor ` for that : #CODE
Attach matplotlib figure.Figure to pyplot
The problem is that such package uses the MATLAB-like interface and looks for plots in the pyplot object ( using ` plt.get_fignums() `) and then compares with images in files .
What is meant by PCA preserving only large pairwise distances ?
Don't confuse PCA with dimensionality reduction .
What is meant by PCA only preserving larger pairwise distance and not small ?.
It was highlighted as one drawback in using PCA
@USER , it just means that slightly distorting pairwise distances by discarding low-variance dimensions after PCA could lead to loss of small differences .
As far as I know there is not a high-level way to do this , but you can make it work with an ` EllipseCollection ` .
It could also be that matplotlib uses different backends , so also check ` matplotlib.get_backend() ` .
There are two version in numpy ; np.min and np.minimum .
Unfortunately , I don't think you can simply do np.minimum ( array1 , array2 , array3 ) like to have above , so I think you need to nest the np.minimum calls .
I didn't know about ` np.minimum ` .
You can see in this dict ` matplotlib.rcParams ` .
notebook hanging on pyplot.show()
can't compile ' fig = plt.figure() ' in python 2.7.6
import matplotlib.pyplot as plt ' which was suggested [ link ] ( #URL ) here , but it didn't work neither .
The PolyCollection seems to be missing this code : #CODE
btw : ` ax.plot ( qmean , np.arange ( -5 , 5.5 , 0.5 ))` does work nicely .
clabel is apparently not implemented in 3D #CODE
AutoMinorLocator is only designed to work for linear scales :
AutoMinorLocator
And the ` AutoMinorLocator ` documentation :
The ` sin() ` graph will be shown .
No , but I was ( by mistake ) executing stuff like ` plt.xlim = [ d1 , d2 ]` or maybe ` plt.set_xlim = [ d1 , d2 ]` .
Ok , I was just testing to see if you specify ` legend() ` was the cause , since it's working fine for me , and it seems that it is .
Changing labels for Pandas ` df.plot() ` : #CODE
I found out before reading your answer that that does not happen with the ax.plot command .
Try this : ` import matplotlib.pyplot as plt
fig = plt.figure()
a= fig.add_subplot ( 1 , 6 , n )
plt.axis ([ 0 , 4 , 0 , 4 ])`
Normally I would increase matplotlib's global linewidths by editing the matplotlib.rcParams .
Can you try ` ax.xaxis.set_major_locator ( HourLocator() )` .
( Obviously you can change the frequency of the minor ticks in that ` arange ` assignment ) .
Apparently , importing seaborn sets the marker edges in a ` matplotlib.pyplot.plot ` to zero or deletes them .
e.g. ` plt.plot ( x , y , maker= ' s ' , markerfacecolor= ' none ')`
This works with pyplot.plot() , who do you do it for pyplot.scatter() ?
` plt.scatter ` has differently named keyword arguments , I think you want ` linewidth ` .
ImportError : No module named matplotlib.pyplot
should ` linspace ( 6 , 6 , 1001 )` be ` ( -6 , 6 , 1001 )` ?
It's easy enough to do using ` matplotlib ` directly ( ` matplotlib.pyplot.figure() ` specifically ) , but I'm using the ` Sympy.mpmath.plot ` module because ` Sympy ` works much better for the symbolic manipulation we're doing in this course .
I also tried with pcolormesh() but without success .
` plt.savefig ( " test.svg ")`
Pyplot - Unwanted gap on x-axis on moving plots
You can see that I have been printing out what specgram returns in a hope to understand it but I am still pretty lost .
What happens if you feed ` num=iteration ` to ` plt.subplots ` ?
It worked the same way it did before I added num=iteration to plt.subplots .
hmm -- does adding ` plt.ion() ` to the top help ?
It can then be manipulated with a ` setp ` command .
See the pyplot tutorial for basics .
Another option is to change the limits of the yaxis : #CODE
For your edited code , include two additional arguments in the call to ` animation.FuncAnimation ` :
` mlab.specgram ( x64 , NFFT=nfft , Fs=fs , window=han_norm , noverlap=noverlap [ 5 ])`
` import matplotlib.pyplot as plt
import matplotlib.pyplot - fc-list hangs
I am experiencing the same problem as described in import matplotlib.pyplot hangs after updating my matplotlib version ` import matplotlib.pyplot as plt ` hangs while executing ` fc-list ` .
I can now call ` import matplotlib.pyplot as plt ` as before .
ImportError : No module named pyplot
When I tried to install pyplot I got this massage : #CODE
If anyone has an idea how to install pyplot and why my distribution is not matching , I appreciate your help .
Is this something similar to switching backend of matplotlib to matplotlib.use ( ' TkAgg ') ?
The bins are logarithmic ( generated via ` xrange = np.logspace ( minX , maxX , 100 )`) .
I think you just want to pass ` normed=True ` to ` np.histogram2d ` :
For example , if a point has a value of ` 10 ` the errorbar should be drawn in ` red ` .
ValueError : to_rgba : Invalid rgba arg " [[ 0 . 0 . 0.5 1 . ]
I have some problem with ScalarFormatter in matplotlib .
I tried to do it with scalarformatter : #CODE
` DataFrame.hist ` accepts the ` alpha ` keyword , which controls the transparency .
May enforce the ` vmin ` / ` vmax ` ` .set_clim() ` on both scales
` gs = gridspec.GridSpec ( 1 , 3 )` indicates that there is 1 row and 3 columns , but
I believe the issue to be in the functions ` increase ` and ` decrease ` .I tried using the ` self.line , = ax.plot ( tft [ self.event_num ] , tf1 [ self.event_num ] , ' . ')` and ` self.canvas.draw() ` but it's not working .
It is standard matplotlib.pyplot : #CODE
In cases like this , some people create a minimal example with a fake dataset , for example creating the arrays with with numpy.random .
From the documentation of numpy.histogram2D
What doesn't go well if you do : heatmap , yedges , xedges = np.histogram2d ( y , x , bins=30 )
And here are both images with ` np.histogram2d ( x , y , bins=30 )` and ` np.histogram2d ( y , x , bins=30 )`
You will need to ` import matplotlib.pyplot as plt ` too .
numpy.linspace ( start , stop , num )
( Now I see : ` linspace ` is even mentioned in ` arange `' s docstring ... )
These xtics are getting shifted towards yaxis .
Issue with tight_layout in matplotlib rendering
Try adding something like ` bins= np.arange ( 0 , 1.1 ,. 1 )` to the plt.hist() calls and they should come out looking the same .
For editing the ticks , I tried ` artistax.set_xticks ` , ` artistax.axis [ " bottom "] .??
Replacing numpy as a dependency would , amongst other things , involve implementing your own version of ` np.ndarray ` .
` np.array ([ 1 , 2 , 3 ]) * 3 ` is * very * different to ` [ 1 , 2 , 3 ] * 3 ` .
matplotlib uses ` np.ndarray ` objects pretty much everywhere .
I also tried adding something like plt.figure() before imshow() but that doesn't help either .
` matplotlib.animation.FuncAnimation ` is the right tool for you .
Also is there a way to set_data by individual points rather than lists ?
actually 2 small things , for the ' i ' in animate ( i ) , its that the frame number ? and what is the purpose of the ' .T ' in .graph_offset ?
Matplotlib : How do I have the xtick labels apear on the other side of the x-axis ?
There are some good examples using ` imshow ` , ` pcolor ` and ` pcolormesh ` that do what you want
Or you could just look into rotation matrices through ` numpy.linalg ` .
Unfortunately using the rcParams : #CODE
I've constructed the three arrays using ` np.arange ( stop , end , increment )` .
You will also probably benefit from using [ ` np.meshgrid `] ( #URL ) .
It's easy with pyplot but apparently pyplot shouldn't be used when embedding .
Something like , ` ( log10 ( N ) - 2.0 ) / 9.0 `
I have followed this example with the exception of adding ` matplotlib.use ( ' TKAgg ')` after ` import matplotlib ` .
Just try this , without the ` add_axes ` .
I'm not sure how good the PyPlot support is in Juno .
So far , I have tried the following before the ` plt.show() ` command :
The ` plt.plot ` command always returns a tuple , so you should be catching ` l1 , = plt.plot ( ... )` .
I'm familiar with using it to iterate in two dimensions ( e.g. , df.iloc [ row , column ]) .
I might represent this information using stacked errorbar plots .
Given the PathCollection returned by ` plt.scatter ` , you could call its ` get_offsets ` method : #CODE
I also found ` update_normal() ` , which works as long as you dont change ` vmin ` / ` vmax ` of ` pcolor ` / ` pcolormesh ` .
: I am using ` GridSpecs ` object and ` subplot() ` method to create my figures .
The problem was not present when I computed boxes myself and used ` add_axes() ` method .
According to the documentation of ` plt.hold ` ,
2 . are you familiar with matlab's ` loglog ` and ` plt.loglog ` ?
Adding the workaround that I originally was thinking of doing with axvline , but @USER answer is what exactly was looking because no need of for loops :
I know if I do a ` df.reset_index ` I'll have a column with ( non-unique ) Sectors and Industries with an integer counter .
One way to do this is with ` plt.bar ` : #CODE
An alternative is ` plt.step ` : #CODE
Have you tried ` plt.plot ( a , b , ' ko- ' , color= ' grey ')` yet ?
From the docs for ` plt.plot ` :
for ax in g.axes.flat : ax.set_xlabel ( ' myLabel ')
` rgb2hex ` will make it simpler -- thanks !
I ended up going with ` rgb2hex ` .
Is it possible with ` matplotlib.pyplot ` ?
I have checked several examples using ` matplotlib.pyplot ` but hardly came out with a good example .
can anyone help me with this to have this on ` matplotlib.pyplot ` or using ` pyplot `
Is there a way to tell from the ` host_subplot() ` definition that it derives from ` subplot() ` ?
If you look [ here ] ( #URL ) you'll see that it calls ` fig.add_subplot ( ax )`
I noticed that if i replaced the line y [ k ]= np.log ( i ) with the line y [ k ]= sc.log ( i ) , my code above would still work .
The other issue here is that you have assumed the ` arange ( 0 , 10 , 0.1 )` call will produce the same 101-length output as Matlab .
I believe I'm explicit and correct in limiting the width and height already in ` plt.savefig ` ( taken from previous SO threads e.g. this ) that this shouldn't be happening ?
( It leaves me wondering how many undocumented features there are in pyplot . ) Now if I only knew how to credit his answer ....
You need ` plt.show `
Python , matplotlib pyplot show() not blocking
I'm new to matplotlib.pyplot .
Note : I did read through " ( python ) matplotlib pyplot show() .. blocking or not ?
` plt.show ` should block by default .
Look for something like ` plt.ion() ` .
A small extra note , the " block=True " in the plt.show() call , ...
Is there a way to manually change the x-axis behavior from categorical to numerical ?
The method ` iteritems ` produces an iterator across ` ( k , v )` tuples .
You can make nice graphs with matplotlib.pyplot for example .
PyPlot works on a mac computer running Julia 0.3.9 .
On windows running Julia 0.4.0 neither PyPlot nor Plots work , each giving various errors with the using command .
also ` np.arange ( results.shape [ 1 ])` will be cleaner and faster than what yo are currently doing
" when trying to import matplotlib.pyplot
This is how you could create a 2x2 raster with twinx each : #CODE
I tried with plt.xticks ( df_eg.index.values ) but that does not work
You need ` ax.set_xticklabels ( df_eg.index )` .
bins = np.linspace ( min_edge , max_edge , Nplus1 )
Matplotlib AutoDateLocator not working with DatetimeIndex
on non-X sessions before importing pyplot solves the problem .
I have tried the different keyword arguments for plt.contour but none of them seems to do the job .
plt.contour ( X , Y , Z_mask , levels =[ 0.5 ]) .
I tried the following code , which uses matplotlib.pyplot #CODE
Nice ways to collect pyplot graphs into a single page / document / etc ?
` in ` plt.subplots ( ..., sharex=True )` = m ?
@USER So I passed ` figsize =( 10,100 0 )` to ` plt.subplots ( ... )` and it didn't seem to do anything .
Changing Alignment of labels in Matplotlib Sankey Diagrams
It works the following way : ` fig.set_size_inches (( 16 , 12 ))` .
You can verify that by doing ` df.dtypes `
Or even better : ` df = pd.DataFrame ( l , dtype= ' float ')`
I guess ` plt.show ` will be unaffected ...
Whole images are a different story , and when you call imshow you're using memory for each pixel of each frame .
This should do it : ` axHistx.yaxis.get_offset_text() .set_visible ( False )`
Unfortunately , this problem is hardcoded into ` pandas.DataFrame.hist ` since [ ` df.hist ` points to ` pandas.tools.plotting.hist_frame `] ( #URL ) .
but with the quality of pcolormesh ( imshow is giving a really bad quality ) , and with 2 colorbars .
Try ` pcolormesh ( ..., aspect= ' auto ')`
there is no attribute " aspect " in pcolormesh .
I tried plt.gca() .set_aspect ( ' auto ') after the pcolormesh , but there is no change .
You should not mix the object api ( ` ax.legend() `) with the matlab-like api ( ` plt.xticks ` , ` plt.savefig `) .
Your label problem can be solved by calling ` fig.tight_layout() `
change sunpy / pyplot color
Or move the suptitle yourself with the ` x ` parameter , e.g. : ` plt.gcf() .suptitle ( ' mytitle ' , x= 0.5 )`
the subplots_adjust method seems to work well .
PPS : ` pcolormesh() ` has a similar problem : #CODE
Solved the issue by using GridSpec as it is supposed to be used .
ValueError : to_rgba : Invalid rgba arg " # "
to_rgb : Invalid rgb arg " # "
plt.savefig ( x2 ) File " / usr / lib / pymodules / python2.7 / matplotlib / pyplot.py " , line 561 , in
return fig.savefig ( *args , ** kwargs ) File " / usr / lib / pymodules / python2.7 / matplotlib / figure.py " , line 1421 , in
Here is the line of code in question : ` plt.quiver ( x , y , u , v , color= ' black ' , headwidth=1 , scale = 10 , headlength=4 )`
matplotlib , plt.show() in a different method = no on_clicked
For what it's worth , you might consider using ` matplotlib.colors.rgb2hex ` instead of jumping through the multiplying by 255 and manual formatting .
Are you manually embedding them in Tkinter frames yourself , or are you using ` plt.show ` ?
I would personally return the ` fig ` or ` ax ` , since then you can perform other functions on that object ( e.g. ` ax.set_xlim ` , or ` fig.savefig() ` etc . ) .
There's no need to return ` plt ` , since that is the ` pyplot ` module that you have already imported .
There is a problem : ` AttributeError : ' module ' object has no attribute ' set_xlim '` .
Try ` plt.gca() .set_xlim `
is using ` ax.legend() .set_visible ( False )` as done [ here ] ( #URL ) an alternative ?
any_cmap ( np.linspace ( 0 , 1 , number_of_lines ))` .
no , but it works fine . the line ' colours = cm.jet ( np.linspace ( 0 , 1 , nlines ))' is marked with ' undefined variable from import ' , also if i try other cmaps .
Barplot savefig() returning an AttributeError
I guess you should import pyplot .
I also found a way to do it without the need to import pyplot separately .
@USER also has a working solution , but it requires another import statement , and utilizing pyplot's ` savefig() ` directly .
Creating vertical graphs using pyplot
I corrected this using the ` set_position ` command .
Try this [ example ] ( #URL ) ` seaborn.plt.show() ` or ` plt.show() ` worked fine for me .
I was thinking that the length would probably not actually be necessary for drawing the arrows , but if it is , it can be easily calculated as length = np.sqrt ( y\*\*2 + z**2 ) .
It seems that if matplotlib itself is absent , adding it after a failed PyPlot installation doesn't work .
Pkg.rm ( " PyPlot ") , followed by shutting down julia , and then Pkg.add ( " PyPlot ") did the trick
Is it possible to change the linewidth , facecolor , etc . of an AnchoredOffsetbox ?
You say you want to fade your alphas to zero by multiplying them with ` np.linspace ( 0 , 10 , n )` .
From the matplotlib documentation for ` FuncAnimation ` :
Python Pyplot word occurrence frequency
This is not how ` pyplot ` works .
How about [ ` matplotlib.patches.Polygon `] ( #URL ) ?
So definitely not in an equidistant meshgrid .
If you don't actually care for the triangles , but only the ` z ` landscape , then you can let ` python ` do the triangulation for you : #CODE
You can see that the result is different from the control , because ` matplotlib ` chose another triangulation as we did in MATLAB .
However , it is possible to provide the triangulation manually .
Imshow is generally for dense plots .
` plt.scatter ` would obviously scale by itself once feeded with your x-values .
You can do this easily with ` fill_betweenx ` .
fill_betweenx ( y , x1 , x2=0 , where=None , ** kwargs ) Create a
You need to do ` fill_betweenx ` for each of your offsets .
cbar = colorbar()
draw()
` plt ` is ` matplotlib.pyplot ` #CODE
@USER thank you , I did not think of this , ( I am using ` matplotlib.pyplot.imsave ` ) , provide it as an answer
yticklabels=line_sales_by_day [ ' product_name '] [ 0 : n_skus ] .values ,
Have you tried the ` tight_layout ` option from ` matplotlib.pyplot ` ?
` plt.boxplot ` won't do much by itself .
Do you have ` plt.show ` or ` plt.savefig ` somewhere in your code after that ?
It doesn't go pass the plt.boxplot , which is why I don't have anything after .
My actual code has plt.savefig .
According to this comment by one of the lead Matplotlib developers , you must not import ` pyplot ` when you're embedding Matplotlib in Qt .
Pyplot sets up its own gui , mainloop and canvas , which interfere with the Qt event loop .
Edit : I just remembered , perhaps the LassoSelector is what you need .
I'd suggest using ` polyfit ` and the ` poly1d ` class :
AttributeError : ' NoneType ' object has no attribute ' set_animated '
I'm trying to write a FuncAnimation to an mpeg4 using ffmpeg in Eclipse ( on Mac OS X ) .
@USER , output of df.head() is : VEP
dtype : float64
The reason is , that ` np.mean ` applied to a ` pandas.DataFrame ` returns a ` pandas.Series ` .
Using matplotlib.pyplot from a Gtk app
I am using twinx() which seems to be the generally accepted way of accomplishing this .
However , ` DateFormatter ` is seeming to have no effect .
How about a ` plt.show() ` ?
plt.show does work , but adding that also causes code to stop if it's executed via command line .
` pandas ` does provided a nice ` .to_pydatetime() ` method : #CODE
The need to ` set_visible ( False )` in the ` init ` seems like a hack , I got it from #URL which again appears to be a problem with blit .
You need to ` fig.subplots_adjust ( bottom= 0.3 )` ( you might need to adjust the 0.3 )
You need to fig.subplots_adjust ( bottom= 0.3 ) ( you might need to adjust the 0.3 )
Try using ` plt.gcf() .tight_layout() ` .
TypeError : object of type ' numpy.int32 ' has no len()
It fails because ` .plot() ` expects a sequence of points , and ` Point [ 0 ]` is not a sequence .
` from pylab import * ` or ` from matplotlib.pyplot import plt ` #CODE
` from pylab import * ` or ` from matplotlib.pyplot import plt ` + ` ion() ` **
I will need to execute ` close() ` on the terminal which is not very convenient .
Unfortunately it does not work and gives the same behavior as ` ion() ` does .
The ` ion() ` does not work as explained on my question .
Checkout matplotlib.animation.FuncAnimation for details .
Now , when I try to import matplotlib.pyplot in a python script , using : #CODE
but I seem not to be able to do usual ` xticks() ` , or ` set_xlabel() ` commands .
I tried through calling ` grids [ i ] .imshow() ` , and adding them as args to the ` AxesGrid() ` .
` img_3 ` ( left ) vs ` ( H_1+H_2 ) .T ` ( right ):
For example , ` fig = pl.figure() ` ` fig.subplots_adjust ( 0.16 , 0.13 , 0.97 , 0.95 , 0.10 , 0.35 )` .
When I worked with ` FuncAnimation ` outside the class , it worked .
Using spy() in Julia
Regarding the ` tight_layout ` issue
I thought it was the " barh = ...
Are you taking about [ ` plt.savefig `] ( #URL ) ?
This should be ` plt.savefig ` if you are using the state-machine interface .
most important is ` plt.connect ( ... )`
Working example with ` plt.connect() ` .
MatPlotLib Python 3.4 : Enumerate and ax.annotate
The manual way is by setting matplotlib's ` rcParams ` .
You can then call ` numpy.linspace ( 0,1,100 0 )` to generate ` x1 ` , for example ( although that will also contain ` 1000 `) .
Maybe , but a simpler way to achieve the same look would be with ` matplotlib.pyplot.contourf() ` .
why can't I specify the xycoords in text() according to #URL ?
That's because ` matplotlib.text ` !
= ` matplotlib.pyplot.text ` .
The following will work fine ` ax.text ( - 0.1 , 1.1 , ' ( a )' , size=20 , weight= ' bold ')`
You simply need ` plt.bar ` : #CODE
lat lon alignment in basemap's pcolormesh method - feature or bug ?
It seems that imshow could do what I want , but this seems to only work for regular ( linear ) grids .
` pcolormesh ` takes the nodal coordinates as the ` X ` and ` Y ` arguments .
From the docs ( to ` pcolor ` , but its the same for ` pcolormesh `) :
Would that work for you instead of pcolormesh ?
` plt.colorbar ( ticks =[ vmin , value1 , ... , vmax ])`
What I want is basically to have the same ticks as I would have using ` LogNorm() ` ( Magnitudes ) .
plt.hist ( fileInfo , range = 20 , color = ' red ')
TypeError : ' _csv.reader ' object has no attribute ' __getitem__ '
You can do this using the ` matplotlib.ticker ` module .
The method we are looking for is ` Legend.get_texts() ` .
I would like to create a pdf file [ by using plt.savefig ( " ~~~ .pdf ")]
Substituting the ` xlabel() ` string above with : #CODE
Try ` plt.scatter() ` !
` module ' matplotlib.pyplot ' has no attribute ' polyfit '` .
Also correct me if I'm wrong but isn't ` polyfit ` found in ` numpy ` or ` scipy ` ?
I think you want ` plt.scatter ` , in which case your code works : #CODE
How can I import matplotlib pyplot options as dict ?
It looks like it's getting stuck on the ' Z = np.reshape ( kernel ( positions ) .T , X.shape )' line though .
Problems in python combining the libraries datetime , pyplot and statsmodels
Because the ` test() ` method is started within the GUI thread , the GUI is blocked until the method returns .
See matplotlib.animation.FuncAnimation .
You can do this with ` plt.autoscale() ` , or ` plt.xlim ` and ` plt.ylim ` .
Later on I create an object of that class and try to do a ` deepcopy() ` of that object .
I've copied the code of ` pyplot.pause() ` here : #CODE
I tried ` sharey=False ` and tried omitting ` set_ylim ` .
Is there a way without ` set_index ( ' feature ')` ?
Matplotlib : Pcolor creates huge images
tom ; out of curiosity : is such a loop using ` ndenumerate ` faster than a manual loop ?
Does the ` cumsum ` work as expected for the ` datetime ` input ?
matplotlib only plots points , so you have just to provide the correct y points to ` plt.plot ( x , y )`
See the plt.subplots ( x , y ) call .
Further you misplaced two of the minus signs in the figlegend call .
` fig.savefig ( ' image_output.png ' , dpi=300 , format= ' png ' , bbox_extra_artists =( lgd , ) , bbox_inches= ' tight ')`
seems like a bug , but you might try using ` semilogy ` #URL
` semilogy ` works for me .
` plt.gca() .set_ylim ( 0.1 , 1.0 )`
` plt.gca() .yaxis .set_minor_formatter ( FormatStrFormatter ( " % .2f "))`
Thankfully , ` plt.gca() .yaxis .set_minor_formatter ( FormatStrFormatter ( " % .2f "))` works great .
So I have some python code that plots a few graphs using pyplot .
I am using PyPlot and have tried to adopt this answer to julia as #CODE
Perhaps you want ` plt.contourf ` ?
*- ( { :d } ) \ .txt ' .format ( timestep )` : #CODE
in the for loop , I replaced this : data2 = np.loadtxt ( file , skiprows=1 )
You can do this with the ` subplots_adjust ` call you already have in there .
but the script wouldn't continue beyond ` plt.show() ` so ` values_v ` and ` values_i ` were never updated .
As ` xnx ` pointed out in comments , this isn't as easily accessible as if you used ` plt.hist ` .
You can even do it without the explicit loop : ` plt.setp ( bp [ ' whiskers '] , color= ' #ff0000 ' , lw=2 )`
I also mentioned ` np.ix_ ` which lets you avoid explicitly creating 2D grids for ` X ` and ` Y ` ( see ` np.ogrid ` as well ) .
I've tried putting in ` fig = plt.figure ( 0 , figsize =( 14.5 , 1.75 ))` which does slightly help , but maybe ` ax.set_aspect() ` however , using scalars for this hasn't helped much either !
I tried tight_layout() and didn't work ..
You are passing a ` pandas.Series ` to matplotlib ( ` df0.Zcoord `) .
If ` input ` is a ` numpy.ndarray ` then everything works great .
However , if ` input ` is a ` pandas.Series ` or ( even worse ) a ` pandas.DataFrame ` , the expression ` input [ 0 ]` will have a very different meaning .
@USER Possibly , however , the even without calling ` ax.set_yticks ` , ` ax2 ` already experiences this problem .
` np.polyfit ( X.squeeze() , f.squeeze() , 2 )` gives you your three coefficients in a much simpler fashion .
One , I didn't know about polyfit .
subplots_adjust ( left=None , bottom=None , right=None , top=None ,
Try to do a plt.show() instead of plt.savefig() to see quickly the result .
Consider calling ` plt.scatter ` with the vector of points and colours only once .
However , trying to increase the density with pyplot functions messes up the x-axis labelling ( possibly because the labels here are strings rather than numeric ): #CODE
Matplotlib Legends for barh
( maybe meshgrid with steps of a constant value ? )
I also seems worth mentioning that griddata has multiple options for interpolation method : #URL
Matplotlib- meshgrid
Hint : ` Z = np.sin ( 3* np.sqrt ( X*X+Y*Y )); print Z `
` Meshgrid ` essentially gives you matrices from vectors so that these pairings are explicitly defined .
You can turn the boxes on and off explicitly with ` plt.box ( ' off ') / plt.box ( ' on ')` .
For this example however , I am using purely matplotlib.pyplot .
( edit : ` semilogy ` does discard the marked line segment ... )
Are there really only 4 line styles in Matplotlib pyplot ?
The class is intended for inline labeling of Line2D , similar to the solution described in this thread .
This can be overcome by explicitly calling ` plt.draw() ` before ` plt.show() ` but I guess there must be a better solution .
import matplotlib.pyplot as plt #CODE
Perhaps you're looking for ` barh ` : #CODE
I tried using ` df.plot ( column= ' C1 ' , by= ' Type ')` but seems there is no property `' column ' for a plot() ` .
I want to create a wedge with the following code : #CODE
You are missing a ` plt.legend() ` .
Why the frame area drawed by the pyplot is black ?
Compare the two examples below created with and without ` tight_layout ` .
Without ` tight_layout() ` :
With ` tight_layout() ` :
How to input exponentiation in label using set_yticklabels in matplotlib
ValueError : to_rgba : Invalid rgba arg " NA " to_rgb : Invalid rgb arg
` fig , ax = subplots()
ax.plot ([ 1 , 2 , 4 ] , [ 4 , 5 , 6 ] , ' r^- ')
ax.set_frame_on ( True )
I tried : fig , ax = plt.subplots ( 1 , 1 , figsize =( 7.5 , 6 ) , sharey=False , sharex=False , edgecolor= ' k ' , frameon=True ) , and also : plt.rcParams [ ' axes.edgecolor '] = ' k '
ax.grid ( True )
ax.set_frame_on ( True )
print matplotlib.matplotlib_fname() `
matplotlib LogFormatterExponent -- ' e ' in the exponent labels of cbar
m , bins = np.histogram ( x [ i ] , bins , weights=w [ i ] , ** hist_kwargs )
But you also don't need ` ax.hist ` :) That could only give you the distribution of a single variable .
Or if I could create a variable for each color of code and string them together under fig.text or plt.title , that would be great .
line 2319 , in draw_artist
` draw_artist ( a )`
As given in the documentation for ` matplotlib.pyplot.scatter() ` you need to specify two input arrays ` x ` , and ` y ` .
` pandas.DataFrame.plot ` has an ` ax ` parameter :
But you don't have a problem for ` set_size ` ?
So you need to loop in these lists of ` matplotlib.text.Text `
` imshow ` is for displaying images , so it does not support x and y bins .
matplotlib.axes documentation
Also , reviewing your code , it appears that you are specifying your ` iloc ` columns incorrectly .
hi Alexander - I see the problem with my iloc columns , sorry for that .
You need to provide the ` x_start ` and ` x_end ` to ` .hlines() ` .
They can be ` numpy.array ` s , in which case each element determines the start / end point of each line segment : #CODE
By the way , can this also be done using plt.plot ?
Generally mixing embedding with ` pyplot ` does not work well .
I am new to Python and trying to recreate MATLAB functionality , so i want pyplot obviously .
What does ` matplotlib.get_backend() ` give ?
' import matplotlib.pyplot as plt print ( plt.get_backend() )' gives :
Have you tried without tight_layout , for instance , or checked the ` backend ` you are using ?
iPython matplotlib.pyplot
When I try to import submodule pyplot : #CODE
This is easy using ` fig.savefig ( filename )` .
Is there a way to do ` plt.axis ( ' off `)` without using the ` pyplot ` object ?
( I do ` fig.tight_layout() ` for the ` bbox_inches ` thing .
Does ` ax.set_ylim ( 0,100 )` work ?
Or ` ax.set_ylim ( 100 , 0 )` ?
Have you read the documentation for [ ` plt.pcolor `] ( #URL ) ?
Consider using ` pcolormesh ` or ` imshow ` instead .
You were correct , it was better to write this code with imshow than pcolor , thank you .
Have you tried the ` gridspec ` module ?
A working example of the gridspec module : #CODE
I try to display with imshow #CODE
if isinstance ( event.artist , matplotlib.axes.Axes ):
for line in axes.get_lines() :
plt.figure()
plt.plot ( line.get_xdata() , line.get_ydata() )
plt.show()
` class ' numpy.ndarray ' ( 8 , 32 )`
` class ' numpy.ndarray ' ( 8 , 32 )`
` class ' numpy.ndarray ' ( 8 , 32 )`
` numpy ` allows for vectorized expressions , like ` x , y = np.meshgrid ( np.linspace ( 0 , 1 , N ) - 0.5 , np.linspace ( 0 , 1 , N ) - 0.5 )` and ` surface = np.exp ( - ( x**2 + y**2 ) / 0.08 )`
Edit : I should also note , tight_layout() does not improve this either , though it is missing from the working example .
Just to make sure , if i have ` import matplotlib ` and not ` matplotlib.pyplot as plt ` on what object would i call ` ion() ` ?
Do you call ` show() ` somewhere ?
Check ` rcParams ` : #CODE
Using pyplot : #CODE
ValueError : to_rgb : Invalid rgb arg " ( ' red ' , ' blue ' , ' yellow ')"
` im = np.zeros (( df.shape [ 0 ] , df.shape [ 1 ] , 3 ))`
@USER and others , anyone know how to do ` invert_yaxis ` for Plotly ?
Because you need ` np.cos ` and ` np.sin ` instead .
As I said in my comments you needed ` np.cos ` and ` np.sin ` .
Matplotlib's violinplot doesn't follow rcParam
There seems to be a default alpha setting with ` violinplot ` which makes this not quite apparent .
` plt.fill_between ( x , y1=10 , y2=255 , where=x < 100 )` ?
Trying to visualize this in the pyplot with overlapping circles as follows : #CODE
df = pd.DataFrame ( np.random.randn ( 11 , 3 ) +3 , columns =[ ' r ' , ' g ' , ' b '])
df.plot ( kind= ' area ' , stacked=False , alpha=alpha_k )
plt.gca() .add_patch ( cle )
plt.xlim ( 0 , 10 )
circ1 = Line2D ([ 0 ] , [ 0 ] , linestyle= ' none ' , marker= ' s ' , alpha=alpha_k ,
In your example , ` plt.axes() .set_ylabel ( '')` will not work because you dont have ` import matplotlib.pyplot as plt ` in your code , so ` plt ` doesn't exist .
` ax.set_ylabel ( '')` worked perfectly . thanks !
But when using instead of plt.plot plt.semilogy the following happens :
I am using ipython matplotlib inline so don't need to do plt.show()
Check that plt.plot() is commented out .
Now I run the same code with plt.plot() statement uncommented .
I've found ` plt.xticks() ` which seems like it's the right call but maybe it's ` set_xticks ` ?
` ziAB ` , ` ziBA ` and ` ziAA ` were generated in a previous ` griddata ` interpolation call .
For further flexibility , e.g. changing the colorscale please read the documentation for ` numpy.histogram2d ` .
` twinx() ` is your friend for adding a secondary y-axis , e.g. : #CODE
matplotlib.pyplot.twinx ( ax=None )
@USER Yes , you're not passing anything to ` subplots() ` so I suspect that'll be your problem .
Are you trying to replicate what [ plt.scatter ] ( #URL ) is doing ?
I think in plt.contour ( X , Y , Z ) , X and Y are mesh points , Z is the height of each point .
ax = df.plot ( kind= ' area ' , stacked=False )
ax.lines [ 0 ] .set_color ( ' yellow ')
However I'm not satisfied with the result : plt.show() does not display the labels completely , like this :
The ` numpy.loadtxt ` probably didn't work because of the parentheses in the beginning and in the end .
So should I still have fig = plt.plot ( iriR , iriL ) ?
I am using matplotlib.pyplot.specgram and matplotlib.pyplot.pcolormesh to make spectrogram plots of a seismic signal .
Instead , it scales them to decibels ( in other words , it plots the ` 10 * log10 ` of the amplitudes ) .
With that in mind , let's mimic what ` specgram ` does : #CODE
` imshow ` vs ` pcolormesh `
Both ` imshow ` and ` pcolormesh ` are very good options , in this case .
Why is my plt.savefig and cmap is not working ?
I looked in rcParams , but nothing there seems to work .
Hmm , doesn't look like there is anything obvious is rcParams or the matplotlibrc file .
Adding plt.clf() fixed that problem , and appears to be the solution to mine relating to Flask as well .
kwargs for linestyle and linecolour within the axvline and axhline with matplotlib
ok , ` subplots_adjust ` might work .
Thus when using ` fig , ax = plt.subplots() ` you unpack this tuple into the variables ` fig ` and ` ax ` .
I have attached a picture of what my plt.fill looks like .
Seaborn passes kwargs to plt.boxplot()
The above example shows that the kwargs are being passed properly to plt.boxplot() .
You are looking for ` plt.grid ` .
Another thing you can try setting ` ax.set_axisbelow ( True )` .
you might want to look into the ` matplotlib.ticker ` module to control the frequency of the ticks
pcolormesh with user-defined value level
Try adding ` plt.rcParams [ ' text.usetex '] =True ` before the other ` rcParams ` line ( see my edit above )
Getting theta coefficients with numpy.linalg.lstsq : #CODE
plt.tight_layout() with sns.clustermap
Seaborns clustermap doesn't work with plt.tight_layout() .
I don't think tight_layout works with ` clustermap ` .
I have tried ` set_visible ` , ` set_linewidth ` , ` set_color ` but to no avail .
I think that the command you are looking for is ` set_frame_on ` .
set_frame_on ( b )
basically i am looking for something like ` sns.pointplot ` that uses numeric , rather than categorical x-axis . does seaborn have something like this ?
Try adding this to your code before ` plt.show() ` : #CODE
in the above , i am trying to make the x-margins bigger , but the ` x ` argument to ` margins() ` seems to have no effect . how can this be done ?
Using matplotlib.ticker.FormatStrFormatter ( fmt ) does not help
But I also have categorical variables ( district , color , type ) .
But now I wanted to somehow visualize dependency of my categorical variables ( such as district ) on predicted price .
You can instead pass them to ` plt.subplots() ` above .
I attempt to import matplotlib before ` setup() ` has a chance to install it .
Connected streamlines in a streamplot
Thanks it is working , unfortunately not for viridis colormap .
maybe my question should be * how * are you importing ` viridis ` ?
g.ax_joint.xaxis.set_major_locator ( ticker.MultipleLocator ( 90 ))
plt.yticks ( np.arange ( -90 , 90+45 , 45 )) However , I'm still interested in learning how to implement your suggestion .
But how can I shorten the ` .reshape() ` ?
It's calculated from ` Y = np.arange ( -30 , 31 , 1 )` , and I think it may be automated ?
Should work without the line ` X , Y = np.meshgrid ( X , Y )` .
You have the docs already ` help ( plt.contour )` .
You can call ` plt.contourf ` in different ways .
Modified code from your z= np.tile statement ( now commented out ): #CODE
plt.figure ( i ); afplot [ column ] .plot()
plt.savefig ( ' ... / apple fplot{} ' .format ( i ))`
You could keep things short with e.g. ` pl.xlim ( - np.abs ( pl.xlim() ) .max() , np.abs ( pl.xlim() ) .max() )`
The documentation says that if you do not specify a dedicated writer in ` Animation.save ` , it uses the rcParam value for ` animation.writer ` .
I think it is simply because by preserving the range I end up with a float in the range [ 0 , 255 ] whereas ` pyplot.imshow ` is only capable of displaying MxNx3 float arrays in the range [ 0.0 , 1.0 ] .
You want to change the fontsize of the ` offset_text ` from the ` yaxis ` .
` imshow ` doesn't seem to have a smooth option , so you should probably look into smoothing of the dataset itself .
Looks like ` ax.invert_yaxis() ` solves it .
@USER that's the default behaviour of ` matplotlib.pyplot ` : subsequent plots are drawn with seperate colours .
` l , =p .plot ( ... )` to make the graph ,
The simplest solution is to call ` plt.clf() ` .
You can do ` pyplot.hold ( True )`
Also , don't forget to import ` pyplot ` #CODE
You missed the linestyle code in your ` .plot ` call : #CODE
The root cause is ` get_tk_widget() .place() ` method .
I want to know how the contours levels are chosen in ` pyplot.contour ` .
how to stop pyplot from popping up figures
I think the command ` plt.close ( fig )` does not work as intended .
It may also help to see the entire script you're running just to check there isn't a ` plt.ion() ` somewhere .
When ` plt.ion ` is commented out , the popups are gone .
( It's not the edgecolor option in pcolormesh ) #CODE
In addition to the workaround mentioned in the linked duplicate , consider using ` imshow ` with ` interpolation= ' nearest '` instead .
Using imshow is a good alternative .
I am using OSX El Capitan and trying to import matplotlib.pyplot
8 #matplotlib .pyplot .hist ( stats.getActionData ( " Human " , " Pacman " , " Left "))
272 matplotlib.rcParams [ ' backend '] = backend
--> 274 import matplotlib.pyplot
275 matplotlib.pyplot.switch_backend ( backend )
---> 29 import matplotlib.colorbar
32 import matplotlib.artist as martist
33 import matplotlib.cbook as cbook
26 from matplotlib.artist import allow_rasterization
28 import matplotlib.path as mpath
64 from matplotlib.cbook import mplDeprecation , warn_deprecated
14 from matplotlib import rcParams
---> 15 import matplotlib.font_manager as font_manager
fontManager instance from %s " % _fmcache ) 1419 except :
fontManager
-> 1405 fontManager = FontManager() 1406 if _fmcache : 1407 pickle_dump ( fontManager , _fmcache )
in findSystemFonts ( fontpaths , fontext )
in get_fontconfig_fonts ( fontext )
-> 1388 return Unpickler ( file ) .load() 1389 1390 # Doctest
It seems to me figure() is the higher level controller according to the user manual #URL
Does ` animation.FuncAnimation ` somehow know to pass a value in there or how does this work ?
` class matplotlib.animation.FuncAnimation ( fig , func , frames=None , init_func=None , fargs=None , save_count=None , ** kwargs )`
Bases : matplotlib.animation.TimedAnimation
Thanks for that , y = np.sin ( 2 * np.pi * ( x - 0.01 * i )) is expecting a value for i however , what is it going to do with None ?
Does animation.FuncAnimation somehow know to pass a value in there or how does this work ?
It remains unclear , in what line your `` AttributeError `` is raised , and `` d `` ( on which `` keys() `` is also evoked ) is not defined .
does calling ` plt.tight_layout() ` before ` plt.show ` work for you ?
how to read in png into n x n-array with predefined value of " n " in matplotlib using imread
` matplotlib.pyplot.colormaps() `
( devastating obsolete + lacks pyplot for some unknown reason ) .
Are there ` imshow ` or ` matshow ` parameter setting that will do this ,
I think you are looking for ` fig.figimage ` #URL
Suggestions ` scipy.optimize ` , ` fsolve ` , or numpy's ` polyfit ` but I have been unsuccessful thus far .
There is most definitely a question here on SO ( which unfortunately I haven't been able to locate ) which is solved by [ passing the ` ax ` argument to ` df.plot `] ( #URL ) .
Are you missing ` .domain() ` in ` xScale() [ 0 ]` ?
the usual way is ` import matplotlib.pyplot as plt ` , ` plt.show() `
@USER : I thought that doing ` .plot() ` on a panda object would handle everything for me ( i.e. pandas does the matplotlib job , instead of me ) : see [ this example ] ( #URL ) .
If so then you are really not speeding anything up , since ` pandas ` already imports ` pyplot ` : #CODE
We can simplify your code a little using ` plt.subplots ` : #CODE
` fig.colorbar ( args )`
I tried various things like ` plt.axis ( ... )` but it was mostly unsucessful .
You can do this with ` DayLocator ` and ` DatesFormatter ` from ` matplotlib.dates ` .
` DayLocator `
` DateFormatter `
` a= np.asarray ( range ( 0 , 9**3 ))`
` b= np.reshape ( a , ( 9 , 9 , 9 ))`
` c= np.roll ( b , i , 2 )`
You can do this by passing ` manual=True ` to [ ` plt.clabel `] ( #URL ) .
I wonder if it has something to do with your rcParams .
I found a solution just after posting this question ; similar question was asked for pandas.Series .
This can be solved by specifying ` barsabove=True ` in pyplot.errorbar() as follows .
How does Python's matplotlib.pyplot.quiver exactly work ?
Your import is wrong , you want ` matplotlib.pyplot ` : #CODE
You want ` matplotlib.dates.YearLocator ` and ` matplotlib.dates.MonthLocator ` : #CODE
` xaxis ` is an attribute of a ` matplotlib.axes._subplots.AxesSubplot ` instance .
Using ` ax.xaxis.set_major_locator ( yloc )` throws the following AttributeError : ` AttributeError : ' tuple ' object has no attribute ' xaxis `
Well , I don't know about matplotlib , but I think ` plt.gca() ` returns a tuple in this case ( or maybe ` plt.subplots ( 111 )` returns a tuple ) .
I would usually unpack the output like this : ` fig , ax = plt.subplots ( 1 , 1 )` .
Manually specify levels , e.g. ` levels = np.linspace ( -4 , 6 , 4 )` for ` plt.contour ( ... , levels = levels )` may also help ...
Missing default matplotlib labels with matplotlib.dates
Unfortunately , this wipes out many of the " default " labels when just using straightforward ` matplotlib.pyplot.plot() `
Using ` matplotlib.dates ` , #CODE
I tried with 2 plots using plt.subplots and plt.gridSpec to no avail .
` GridSpec ` works for me ( ` matplotlib ` v1.5.0 in case it matters ): #CODE
AttributeError : ' PathCollection ' object has no attribute ' set_xlim '
For example , you can try ` plt.xlim() ` instead of ` fig.set_xlim() ` in your code .
Why is pyplot giving me a TclError on osx ?
Creating confidence contours in pyplot.scatter
Why does pyplot.draw() reseed rand() when called via Python's C API ?
Thus , in below example code , every call to ` rand() ` produces the same value .
The reason for this behavior is that in the ` Sketch ` ( aka XKCD ) handling code there is a call to ` srand ( 0 )` .
Matpotlib Xtick Overlap
Alright I got it to work by using plt.minorticks_on() and changing the range of x to x = np.arange ( 0 , 361 , 50 , dtype = int ) ....
I would avoid using ` set_xticks ` directly .
Here I'm using scipy's griddata but there's a few different techniques .
Maybe try changing backend ( ` plt.switch_backend ( " Qt4Agg ")` .
figure.add_subplot() vs pyplot.subplot()
The problem is that ` pyplot ` is a stateful module which is meant to be convenient for people who are used to matlab .
but " import matplotlib.pyplot as plt returns :
import matplotlib.pyplot as plt
either modify your ` matplotlibrc ` file or ` import matplotlib ; matplotlib.use ( ' tkagg ') ; import matplotlib.pyplot as plt ` .
You need to specify the ` xaxis ` : #CODE
or ` yaxis ` : #CODE
cb.ax.set_major_formatter ( ticker.FuncFormatter ( myfmt ))
cb.ax.yaxis.set_major_formatter ( ticker.FuncFormatter ( myfmt ))
` plt.FuncFormatter ( myfmt )` works or me as well as ` ticker.FuncFormatter ( myfmt )` .
` cb =p lt.colorbar ( sc , ax = ax1 , aspect=10 , format= ticker.FuncFormatter ( myfmt ))` and disable the line
AttributeError : ' FuncFormatter ' object has no attribute ' set_powerlimits '`
Initially my errorbar had a range from 0.0 - 2.25 but not it seems to run from 0.0 to 1.25 .
The suggested alternative works when I disable MaxNLocator .
I'm not sure that this is exactly what you need but I believe GridSpec can be useful here .
`" {{ ( {0} , {1} ) }} " .format `
I just found ` plt.subplot2grid ` also which is pythonic too
` plt.xscale ` vs ` set_xscale `
matplotlib blit how to change xaxis and yaxis
` plt.plot ` is basically a one-liner .
It's ` return plt.gca() .plot ( *args , ** kwargs )` .
We enter the gui mainloop with ` plt.show() ` .
I am doing that using matplotlib.widgets.RectangleSelector .
@USER You don't need ` show() ` if you're using ` draw() `
Numpy+MKL includes required DLLs in the numpy.core directory .
I printed the leg.window_extent() after plt.show() and they are correct there ....
( i ) Why is there a ` [ 0 ]` necessary in line ` route = ax.plot ([ ] , [ ]) [ 0 ]` as found in this post ) ?
You're looking for the ` extent ` kwarg to ` imshow ` .
In general , you're looking for the ` extent ` kwarg to ` imshow ` .
However , you might also consider using ` pcolormesh ` in this case .
` imshow ` and ` pcolormesh ` treat the extents slightly differently .
` imshow ` is " cell-centered " while ` pcolormesh ` is " mesh-centered " .
Now when I try to import it using " import matplotlib.pyplot as plt " , it says that there is no module named matplotlib .
Series.hist ( by=None , ax=None , grid=True , xlabelsize=None , xrot=None , ylabelsize=None , yrot=None , figsize=None , bins=10 , ** kwds )
For what it's worth , there's nothing questionable about the ` facecolor= ' none ' , edgecolor= ' black '` kwargs to ` pcolormesh ` .
@USER Fair enough , I've never seen ` pcolor ` / ` pcolormesh ` used in that way before .
Other weirdness would include ` np.divide (( b-a ) , float ( N ))` instead of ` ( b-a ) / N ` ( with the proper future import as necessary ) .
I used that ` np.divide ` because of my belief ( that seems unjustified now as I just tried running ( b-a ) / N and it ran without hitch ) that ( b-a ) / N would return the nearest integer only and not a decimal .
The following code will do this , sorry not quite the same as your example and plasma colormap missing for me but hopefully idea should be helpful , #CODE
In the code above , I need ` ax2 = fig.add_subplot ( 312 )
` import matplotlib.pyplot as plt `
