Why do you say that reusing plt.figure will lead to memory issues ?
I am using matplotlib.pyplot to create histograms .
I corrected this using the ` set_position ` command .
` np.asarray ( Image.fromarray ( image.astype ( ' uint8 ') *255 ) .convert ( ' L ')) .astype ( float ) / 255 `
python : ImportError : No module named patheffects
import matplotlib.patheffects
` plt.bar ( left , height , width= 0.8 , bottom=None , hold=None , ** kwargs )`
I typically have them in the ax.plot line .
my attempt to define the aspect ratio for both ` y ` -axis while using ` twinx ` ( which does not work )
For each of this point , I can calculate the value of my unordered categorical variable X .
You can achieve it using the ` ScalarFormatter ` : #CODE
@USER how is hexbin useful here ?
Hmm , doesn't look like there is anything obvious is rcParams or the matplotlibrc file .
What you're doing is aliasing ( " renaming ") matplotlib.font_manager to FontProperties so calling fontP = FontProperties() is actually calling matplotlib.font_manager which is not callable .
I think changing the arrowstyle will help here .
plt.plot ( x , z )
` plt.tight_layout ( pad= 2.0 , h_pad= 6.5 , w_pad= 4.5 )` gives the desired result ( Fig.3 ) .
Should work without the line ` X , Y = np.meshgrid ( X , Y )` .
O1 = np.array ( new_OI )
There's no need for a vector representation of each pixel , and ` imshow ` will be much faster .
So definitely not in an equidistant meshgrid .
Inserted after pyplot.savefig() and the problem seems to be solved .
` numpy.polyfit ( x , y , deg , rcond=None , full=False , w=None , cov=False )`
Simply putting in : ` bbox =d ict ( facecolor= ' blue ' , alpha= 0.5 )` in the ax.text statement changes the color .
ax.set_xticks ([ " 1975-01-01 " , " 1980-01-01 " , " 1985-01-01 " , " 1990-01-01 " , " 1995-01-01 " ,
Also , don't mix ` pyplot ` with guis ( unless you are explicitly using a non-interactive backend ) .
FuncAnimation
` x2 ' = -mu / np.sqrt ( x ** 2 + y ** 2 + z ** 2 ) * x ` ,
matplotlib.pyplot.stem ( *args , ** kwargs )
I've confirmed that this works for ` plot() ` as well as ` imshow() ` .
PCA ( X ) is not the same thing as PCA ( X.T ) .T
I should have used OffsetImage and AnnotationBbox .
Using GridSpec
Try removing that argument from your call to ` streamplot ` .
Try `` ax.text ( 0 , 0 , ' whatever ')`` .
matplotlib tripcolor - removing edges
` ax.xaxis.get_children() [ 1 ] .set_size ( 15 )`
I have tried lots of different combinations of the ax.plot() part , but if I change it to : #CODE
but i want to keep the ytick marks only on the left hand side . thank you .
fig is defined as : ` fig = plt.figure() `
We used the same method , but I somehow missed ` set_markeredgewidth ` .
---> 29 import matplotlib.colorbar
ax.plot ( r.date , r.close )
plt.plot()
The ` .format ` form is the preferred way to do string formatting now as opposed to the ` % ` operator .
` GridSpec ` works for me ( ` matplotlib ` v1.5.0 in case it matters ): #CODE
A search of the ` matplotlib.pyplot ` API documentation does not reveal anything , so I'm afraid you'll have to live with using ` matplotlib.patches.Ellipse `
for why ` LinearSegmentedColormap ` shows strange color , I think this link would be helpful .
I did so both in the Windows shell and emacs shell and the same PYTHONPATH is used . doing the rcParams both return TkAgg .
However , the savefig() output is too zoomed out , too general .
plt.imshow ( Xt [ 0 , :] .reshape ( 105,105 ) .T , interpolation= ' nearest ' , cmap= cm.Greys_r ) and it gives me the correct flipped output .
See [ ` matplotlib.pyplot.contourf `] ( #URL ) for example .
Why pyplot ( matplotlib ) is joining points randomly ?
x = np.array ([ 1 , 3 , 4 ]) , ([ 1 , 2 ])
` np.arange ` doc
plt.colorbar ( cs )
` tick_params ` should do it .
I have experiemented with turning interactivity on and off via ` plt.ioff() ` , but to no avail .
don't do ` plt.xticks ...
thx ! but in the end this worked : ` ax [ 1 ] .bar ( bins [: -1 ] , 1 . *hist / N , np.diff ( bins ) , log=True )`
For example ` griddata ` , ` Rbf ` , ...
It sounds like you would rather have an ` axhspan ` or ` axvspan ` .
matplotlib : plt.isinteractive() returns 0 instead of True or False after plt.ion() is called , when the script is being run in a terminal ?
matplotlib FuncAnimation input
@USER Do I need to pass anything additional to ` ColorbarBase() ` ?
In some other code , I used the OpenCV ` SaveImage ` on a single frame to provide a reference for what I would expect from ` imshow ` .
AxesSubplot has no attribute hist2d - Matplotlib
fig = plt.figure()
customize ticks for AxesImage ?
In addition , " changing plt.figure ( i )" is not correct .
I tried it out . linecollection does not appear to work in 3D .
You can verify it by calling ` plt.xlim() ` both before and after the ` pandas.plot() ` call .
Did you try calling ` plt.show() ` ?
Edit : My original answer used ` ax.scatter ` .
The helper functions date2num() , num2date() and drange() are used to facilitate easy conversion to and from datetime and numeric ranges .
Here's an example of how you can display multiple plots side-by-side below a larger one using Gridspec : #CODE
I only just discovered the awesome that is ` matplotlib.mlab.psd() ` , but I am having one issue , that is : how can I change the frequency range used by the method ?
Python Matlplotlib errorbar : some errors disappear
@USER It says : font_manager attribute not found o_O .
Documentation of legacy ` subplot() ` is [ here ] ( #URL ) and ` subplots() ` is [ here ] ( #URL ) .
I am not completely sure if this is the kind of thing you're looking for , but ` legend() ` inside ` matplotlib.pyplot ` may be able to help you out .
Is the PCA stuff really relevant ?
Seaborns clustermap doesn't work with plt.tight_layout() .
fig = plt.figure ( **figprops ) .
From your remark that ` datetime ( 2009 , 10 , 7 , 0 ) .strftime ( ' %Hz%d%b ')` gave the right string I would've thought it worked .
yerr = np.array ([ ])
ax = fig.add_subplot ( 111 );
plt.subplots :
( It's not the edgecolor option in pcolormesh ) #CODE
` plt.xlabel ( u'Wavelength ( \u03bc m )')`
You may see that how ` .ix ` was used for selecting an interval .
I am running the tutorial for pylearn2 and I'm getting some errors when it imports ` matplotlib.pyplot ` .
then a call to ` fig.get_size_inches() ` gives ` [ 6 , 7.475 ]` .
I am experiencing the same problem as described in import matplotlib.pyplot hangs after updating my matplotlib version ` import matplotlib.pyplot as plt ` hangs while executing ` fc-list ` .
Using ` pcolor ` from matplotlib I am unable to do it because my pc goes easily out of memory ( more than 8G ) ..
+ " plt.plot ([ " + d.x1 + " , " + d.x2 + "] , [ " + d.y1 + " , " + d.y2 + "] , ' k- ') \n "
I am trying to import Pylab using the ` import matplotlib.pyplot as plt ` .
The plt.subplots_adjust method : #CODE
for i , j in np.where ( significant ): print i , j
ax = fig.add_subplot ( 111 , projection= ' 3d ')
matplotlib.pyplot does savefig() but not show() in python3 but works in 2.7
In this case , pcolor and pcolormesh will produce the same result .
From the documentation of ` pyplot.errorbar() ` :
Tkinter and pyplot running out of memory
You've already created ` ax ` with ` plt.subplots ` so don't you just need to pass ` ax=ax ` to ` merged2.fcast.plot ` instead of setting ` ax= ...
You also should not import pylab , you should do ` import matplotlib.pyplot as plt `
Alright I got it to work by using plt.minorticks_on() and changing the range of x to x = np.arange ( 0 , 361 , 50 , dtype = int ) ....
You can control the ratio of the height / width with ` ax.set_aspect ( number )` .
What about plt.title ?
Is there a way to darken or make smoother the HSV colours so they look more like this
plt.plot ( arr [ ' lapse_time '] , arr [ ' contact_angle '])
We are looking for some ` .line ` objects and there are two .
My ` rcParams ` are not read .
Now , it says ` get_data ` is not defined ... after I move ` my_plot ` before the loop
Xaxis interval y1 ( y2 ) ax2 : ( - 100000.0 , 800000.0 ) ( wrong )
Then define a method ` show() ` that calls ` plt.show() ` .
` plt.setp ( plt.gca() , ' yticklabels ' , ylabels )`
matplotlib.get_backend() MacOSX
# matplotlib.use ( ' tkagg ') ;
From the ` savefig() ` docs , #CODE
You might also want to look into [ ` numpy.vectorize `] ( #URL ) .
' and ' plt.figure() ; for result in results : plt.clf() ...
Python , matplotlib pyplot show() not blocking
According to the docs ` numpy.loadtxt ` is
What is ravel() ?
` plot() ` in ` pandas ` are build on ` matplotlib ` .
` plt.colorbar() ` ?
from matplotlib.ticker import LinearLocator , FormatStrFormatter
Is matplotlib.pyplot.hist() what you are looking for ?
File " / usr / lib / python2.7 / dist-packages / pandas / core / generic.py " , line 2018 , in astype
Perhaps you should be calling ` axvline ` on ` ax2 ` instead of calling the ` pyplot ` method ?
( ` np.all ( np.diff ( lats , axis=0 ) > 0 ))` , similar fro ` lons `)
The problem is ' cause my np.mgrid should vary from -1 to 1 and have the self.width and self.height .
awesome . and thanks for the np.transpose tip , too .
And using ` set_bad ` , ` set_under ` and ` set_over ` is not a very good option as I would like to have a possibility to mark different pixels with different colours , and this limits their number to 3 .
@USER numpy's ` memmap ` will probably not be useful for you .
How about using ` interpolate() ` : #CODE
cb.ax.set_major_formatter ( ticker.FuncFormatter ( myfmt ))
special method ` __call__() ` is a good approach for such
` plt.tight_layout() ` might do it .
Unfortunately , I don't think you can simply do np.minimum ( array1 , array2 , array3 ) like to have above , so I think you need to nest the np.minimum calls .
Using ` set_offsets ` doesn't seem to behave as I expect it to .
Does the import of Axes3D do something behind the scenes to alter the import of pyplot ?
` get_color() ` just returns the color attribute from a line .
plt.tight_layout() `
( Now I see : ` linspace ` is even mentioned in ` arange `' s docstring ... )
By default ` animation.MovieWriter ` uses a ` subprocess.PIPE ` to feed the frames to the writer .
With your ` matplotlibrc ` file , the variables ` mp.rcParams [ ' lines.linestyle ']` and ` mp.rcParams [ ' axes.grid ']` are correctly specified and this works as expected ...
pyplot interface
( and ` set_yticklabels ` for the y-axis )
